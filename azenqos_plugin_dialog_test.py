# -*- coding: utf-8 -*-
"""
/***************************************************************************
 AzenqosDialog
                                 A QGIS plugin
 Azenqos Plugin
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2019-03-18
        git sha              : $Format:%H$
        copyright            : (C) 2019 by Metamedia Techonology Co.,Ltd
        email                : gritmanoch@longdo.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import os
import sys
import datetime
import time
import threading
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import *
from PyQt5.QtCore import QAbstractTableModel, QVariant, Qt, QByteArray
from PyQt5.QtSql import QSqlQuery, QSqlDatabase
from matplotlib.figure import Figure
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.backends.backend_qt4agg import NavigationToolbar2QT as NavigationToolbar
import sqlite3
import matplotlib.pyplot as plt
from matplotlib.ticker import StrMethodFormatter
import numpy as np
# from qgis.core import *
# from qgis.utils import *

azenqosDatabase = None
databasePath = None
latestMenu = None
minTimeValue = None
maxTimeValue = None
currentTime = None
tableNotUsed = [
    'android_metadata', 'sqlite_sequence', 'spatialite_history',
    'idx_signalling_geom_parent', 'idx_signalling_geom_node',
    'idx_signalling_geom_rowid', 'idx_signalling_geom',
    'views_layer_statistics', 'geometry_columns', 'spatial_ref_sys',
    'layer_statistics'
]
clickedLatLon = {"lat": 0, "lon": 0}
sliderLength = None
openedWindows = []

# Database select window


class Ui_DatabaseDialog(QDialog):
    def __init__(self):
        super(Ui_DatabaseDialog, self).__init__()
        self.setupUi(self)

    def setupUi(self, DatabaseDialog):
        DatabaseDialog.setObjectName("DatabaseDialog")
        DatabaseDialog.setWindowModality(QtCore.Qt.ApplicationModal)
        DatabaseDialog.resize(540, 90)
        DatabaseDialog.setMaximumSize(QtCore.QSize(540, 90))
        self.browseButton = QtWidgets.QPushButton(DatabaseDialog)
        self.browseButton.setGeometry(QtCore.QRect(420, 25, 113, 31))
        self.browseButton.setObjectName("browseButton")
        self.dbPath = QtWidgets.QTextEdit(DatabaseDialog)
        self.dbPath.setGeometry(QtCore.QRect(10, 30, 400, 21))
        self.dbPath.setObjectName("dbPath")
        self.buttonBox = QtWidgets.QDialogButtonBox(DatabaseDialog)
        self.buttonBox.setGeometry(QtCore.QRect(370, 56, 164, 32))
        self.buttonBox.setStandardButtons(QtWidgets.QDialogButtonBox.Cancel
                                          | QtWidgets.QDialogButtonBox.Ok)
        self.buttonBox.setObjectName("buttonBox")
        self.dbPathLabel = QtWidgets.QLabel(DatabaseDialog)
        self.dbPathLabel.setGeometry(QtCore.QRect(10, 10, 181, 16))
        self.dbPathLabel.setObjectName("dbPathLabel")

        self.retranslateUi(DatabaseDialog)
        QtCore.QMetaObject.connectSlotsByName(DatabaseDialog)

        self.browseButton.clicked.connect(self.getfiles)
        self.buttonBox.button(QtWidgets.QDialogButtonBox.Ok).clicked.connect(
            self.checkDatabase)
        self.buttonBox.button(
            QtWidgets.QDialogButtonBox.Cancel).clicked.connect(self.close)

    def retranslateUi(self, DatabaseDialog):
        _translate = QtCore.QCoreApplication.translate
        DatabaseDialog.setWindowTitle(_translate("DatabaseDialog", "Azenqos"))
        self.browseButton.setText(_translate("DatabaseDialog", "Browse.."))
        self.dbPathLabel.setText(
            _translate("DatabaseDialog", "Database path: ( .db, .sqlite )"))

    def getfiles(self):
        fileName, _ = QFileDialog.getOpenFileName(self, 'Single File',
                                                  QtCore.QDir.rootPath(),
                                                  '*.db *.sqlite')
        if fileName != "":
            baseFileName = os.path.basename(str(fileName))
            self.dbPath.setText(fileName)
            self.databasePath = fileName
        else:
            if self.dbPath.toPlainText() != "":
                self.databasePath = self.dbPath.toPlainText()

    def checkDatabase(self):
        self.addDatabase()
        if not azenqosDatabase.open():
            QtWidgets.QMessageBox.critical(
                None, "Cannot open database",
                "Unable to establish a database connection.\n"
                "This example needs SQLite support. Please read "
                "the Qt SQL driver documentation for information how "
                "to build it.\n\n"
                "Click Cancel to exit.", QtWidgets.QMessageBox.Cancel)
            return False
        else:
            # self.addLayerToQgis()
            self.getTimeForSlider()
            QMessageBox.about(self, 'Connection result',
                              'Database is Connected, Enter the main menu')
            self.hide()
            self.azenqosMainMenu = AzenqosDialog()
            self.azenqosMainMenu.show()
            self.azenqosMainMenu.raise_()
            self.azenqosMainMenu.activateWindow()

    def getTimeForSlider(self):
        if azenqosDatabase is not None:
            azenqosDatabase.open()
        query = QSqlQuery()
        query.exec_(
            "select MIN(time) as mintime, MAX(time) as maxtime from signalling"
        )
        while query.next():
            mintime = query.value(0)
            maxtime = query.value(1)
            global minTimeValue
            minTimeValue = datetime.datetime.strptime(
                mintime, '%Y-%m-%d %H:%M:%S.%f').timestamp()
            global maxTimeValue
            maxTimeValue = datetime.datetime.strptime(
                maxtime, '%Y-%m-%d %H:%M:%S.%f').timestamp()
        azenqosDatabase.close()
        self.setIncrementValue()

    def addDatabase(self):
        global azenqosDatabase
        azenqosDatabase = QSqlDatabase.addDatabase("QSQLITE")
        azenqosDatabase.setDatabaseName(self.databasePath)

    # def addLayerToQgis(self):
    #     QgsProject.removeAllMapLayers(QgsProject.instance())
    #     # urlWithParams = 'type=xyz&url=http://a.tile.openstreetmap.org/%7Bz%7D/%7Bx%7D/%7By%7D.png&zmax=19&zmin=0&crs=EPSG3857'
    #     urlWithParams = 'contextualWMSLegend=0&crs=EPSG:4326&dpiMode=7&featureCount=10&format=image/tiff&layers=longdo_icons&styles&url=http://ms.longdo.com/mapproxy/service'
    #     rlayer = QgsRasterLayer(urlWithParams, 'Longdo Map Icons', 'wms')
    #     if rlayer.isValid():
    #         QgsProject.instance().addMapLayer(rlayer)
    #     else:
    #         print('invalid layer')
    #     uri =QgsDataSourceUri()
    #     uri.setDatabase(self.databasePath)
    #     azenqosDatabase.open()
    #     query = QSqlQuery()
    #     query.exec_("SELECT name FROM sqlite_master WHERE type='table'")
    #     while query.next():
    #         if query.value(0) not in tableNotUsed:
    #             uri.setDataSource('', query.value(0), 'geom')
    #             vlayer = QgsVectorLayer(uri.uri(), query.value(0), 'spatialite')
    #             QgsProject.instance().addMapLayer(vlayer)
    #     azenqosDatabase.close()

    def setIncrementValue(self):
        if azenqosDatabase is not None:
            azenqosDatabase.open()
        query = QSqlQuery()
        query.exec_("select count(distinct time) from signalling")
        while query.next():
            timeCount = query.value(0)
        global sliderLength
        sliderLength = maxTimeValue - minTimeValue
        azenqosDatabase.close()


class AzenqosDialog(QDialog):
    def __init__(self):
        """Constructor."""
        super(AzenqosDialog, self).__init__(None)
        self.setupUi(self)
        self.raise_()
        self.activateWindow()

    def setupUi(self, AzenqosDialog):
        AzenqosDialog.setObjectName("AzenqosDialog")
        AzenqosDialog.resize(640, 480)

        self.setupTreeWidget(AzenqosDialog)

        # Time Slider
        self.timeSlider = TimeSlider(AzenqosDialog)
        self.timeSlider.setGeometry(QtCore.QRect(300, 56, 150, 22))
        sizePolicy = QSizePolicy(QSizePolicy.Expanding, QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(
            self.timeSlider.sizePolicy().hasHeightForWidth())
        self.timeSlider.setSizePolicy(sizePolicy)
        self.timeSlider.setBaseSize(QtCore.QSize(500, 0))
        self.timeSlider.setPageStep(1)
        self.timeSlider.setSliderPosition(0)
        self.timeSlider.setOrientation(QtCore.Qt.Horizontal)
        self.timeSlider.setObjectName("timeSlider")
        self.timeSlider.setTracking(True)

        # Datetime Textbox
        self.timeEdit = QDateTimeEdit(AzenqosDialog)
        self.timeEdit.setGeometry(QtCore.QRect(480, 56, 140, 22))
        self.timeEdit.setObjectName("timeEdit")
        self.timeEdit.setDisplayFormat("hh:mm:ss")
        self.timeEdit.setDateTime(
            datetime.datetime.fromtimestamp(minTimeValue))

        # Time label
        self.timeSliderLabel = QLabel(AzenqosDialog)
        self.timeSliderLabel.setGeometry(QtCore.QRect(300, 30, 100, 16))
        self.timeSliderLabel.setObjectName("timeSliderLabel")

        self.setupPlayStopButton(AzenqosDialog)

        # Import Database Button
        self.importDatabaseBtn = QPushButton(AzenqosDialog)
        self.importDatabaseBtn.setGeometry(QtCore.QRect(300, 140, 181, 32))
        self.importDatabaseBtn.setObjectName("importDatabaseBtn")

        # Filter Button
        self.filterBtn = QPushButton(AzenqosDialog)
        self.filterBtn.setGeometry(QtCore.QRect(300, 190, 181, 32))
        self.filterBtn.setObjectName("filterBtn")

        self.retranslateUi(AzenqosDialog)
        QtCore.QMetaObject.connectSlotsByName(AzenqosDialog)

        self.timeSlider.valueChanged.connect(self.timeChange)
        self.importDatabaseBtn.clicked.connect(self.importDatabase)
        # self.filterBtn.clicked.connect(self.playTime)

    def retranslateUi(self, AzenqosDialog):
        _translate = QtCore.QCoreApplication.translate
        AzenqosDialog.setWindowTitle(
            _translate("AzenqosDialog", "Azenqos Main Menu"))
        self.presentationTreeWidget.headerItem().setText(
            0, _translate("AzenqosDialog", "Presentation"))
        __sortingEnabled = self.presentationTreeWidget.isSortingEnabled()
        self.presentationTreeWidget.setSortingEnabled(False)
        self.presentationTreeWidget.setSortingEnabled(__sortingEnabled)
        self.configurationTreeWidget.headerItem().setText(
            0, _translate("AzenqosDialog", "Configuration"))
        self.configurationTreeWidget.setSortingEnabled(False)
        self.configurationTreeWidget.setSortingEnabled(__sortingEnabled)
        self.importDatabaseBtn.setText(
            _translate("AzenqosDialog", "Import Database"))
        self.filterBtn.setText(_translate("AzenqosDialog", "Filter"))
        self.timeSliderLabel.setText(_translate("AzenqosDialog", "Time:"))

    def setupTreeWidget(self, AzenqosDialog):
        # Presentation Tree Widget
        self.presentationTreeWidget = QTreeWidget(AzenqosDialog)
        self.presentationTreeWidget.setGeometry(QtCore.QRect(20, 20, 260, 300))
        self.presentationTreeWidget.setFrameShape(QFrame.StyledPanel)
        self.presentationTreeWidget.setAllColumnsShowFocus(True)
        self.presentationTreeWidget.setObjectName("presentationTreeWidget")
        self.presentationTreeWidget.itemDoubleClicked.connect(
            self.loadAllMessages)

        # GSM Section
        gsm = QTreeWidgetItem(self.presentationTreeWidget, ['GSM'])
        gsmRadioParams = QTreeWidgetItem(gsm, ['Radio Parameters'])
        gsmServeNeighbor = QTreeWidgetItem(gsm, ['Serving + Neighbors'])
        gsmCurrentChannel = QTreeWidgetItem(gsm, ['Current Channel'])
        gsmCI = QTreeWidgetItem(gsm, ['C/I'])
        gsmLineChart = QTreeWidgetItem(gsm, ['GSM Line Chart'])
        gsmEventsCounter = QTreeWidgetItem(gsm, ['Events Counter'])

        # WCDMA Section
        wcdma = QTreeWidgetItem(self.presentationTreeWidget, ['WCDMA'])
        wcdmaActiveMonitoredSets = QTreeWidgetItem(wcdma,
                                                   ['Active + Monitored Sets'])
        wcdmaRadioParams = QTreeWidgetItem(wcdma, ['Radio Parameters'])
        wcdmaASL = QTreeWidgetItem(wcdma, ['Active Set List'])
        wcdmaMonitoredSet = QTreeWidgetItem(wcdma, ['Monitored Set List'])
        wcdmaSummary = QTreeWidgetItem(wcdma, ['BLER Summary'])
        wcdmaTransportChannel = QTreeWidgetItem(wcdma,
                                                ['BLER / Transport Channel'])
        wcdmaLineChart = QTreeWidgetItem(wcdma, ['Line Chart'])
        wcdmaBearers = QTreeWidgetItem(wcdma, ['Bearers'])
        wcdmaPilotPoluting = QTreeWidgetItem(wcdma, ['Pilot Poluting Cells'])
        wcdmaActiveMonitoredBar = QTreeWidgetItem(wcdma,
                                                  ['Active + Monitored Bar'])
        wcdmaReports = QTreeWidgetItem(wcdma, ['CM GSM Reports'])
        wcdmaCells = QTreeWidgetItem(wcdma, ['CM GSM Cells'])
        wcdmaPilotAnalyzer = QTreeWidgetItem(wcdma, ['Pilot Analyzer'])

        # LTE Section
        lte = QTreeWidgetItem(self.presentationTreeWidget, ['LTE'])
        lteRadioParams = QTreeWidgetItem(lte, ['Radio Parameters'])
        lteServingNeighbors = QTreeWidgetItem(lte, ['Serving + Neighbors'])
        ltePPParams = QTreeWidgetItem(lte, ['PUCCH/PDSCH Parameters'])
        lteLineChart = QTreeWidgetItem(lte, ['LTE Line Chart'])
        lteRlc = QTreeWidgetItem(lte, ['LTE RLC'])
        lteVo = QTreeWidgetItem(lte, ['LTE VoLTE'])

        # CDMA/EVDO Section
        cdmaEvdo = QTreeWidgetItem(self.presentationTreeWidget, ['CDMA/EVDO'])
        cdmaEvdoRadioParams = QTreeWidgetItem(cdmaEvdo, ['Radio Parameters'])
        cdmaEvdoServingNeighbors = QTreeWidgetItem(cdmaEvdo,
                                                   ['Serving + Neighbors'])
        cdmaEvdoParams = QTreeWidgetItem(cdmaEvdo, ['EVDO Parameters'])

        # Data Section
        data = QTreeWidgetItem(self.presentationTreeWidget, ['Data'])
        dataGsmLineChart = QTreeWidgetItem(data, ['GSM Data Line Chart'])
        dataWcdmaLineChart = QTreeWidgetItem(data, ['WCDMA Data Line Chart'])
        dataEdgeInfo = QTreeWidgetItem(data, ['GPRS/EDGE Information'])
        dataWebBrowser = QTreeWidgetItem(data, ['Web Browser'])
        dataStats = QTreeWidgetItem(data, ['HSDPA/HSPA + Statistics'])
        dataHsupaStats = QTreeWidgetItem(data, ['HSUPA Statistics'])
        dataLteStats = QTreeWidgetItem(data, ['LTE Data Statistics'])
        dataLteLineChart = QTreeWidgetItem(data, ['LTE Data Line Chart'])
        dataWifiConnectedAp = QTreeWidgetItem(data, ['Wifi Connected AP'])
        dataWifiScannedAp = QTreeWidgetItem(data, ['Wifi Scanned APs'])
        dataWifiGraph = QTreeWidgetItem(data, ['Wifi Graph'])

        # Signaling Section
        signaling = QTreeWidgetItem(self.presentationTreeWidget, ['Signaling'])
        signalingEvents = QTreeWidgetItem(signaling, ['Events'])
        signalingLayerOne = QTreeWidgetItem(signaling, ['Layer 1 Messages'])
        signalingLayerThree = QTreeWidgetItem(signaling, ['Layer 3 Messages'])
        signalingBenchmark = QTreeWidgetItem(signaling, ['Benchmark'])
        signalingMM = QTreeWidgetItem(signaling, ['MM Reg States'])
        signalingSystemInfo = QTreeWidgetItem(signaling,
                                              ['Serving System Info'])
        signalingDebug = QTreeWidgetItem(signaling, ['Debug Android/Event'])

        # Positioning Section
        positioning = QTreeWidgetItem(self.presentationTreeWidget,
                                      ['Positioning'])
        positioningGps = QTreeWidgetItem(positioning, ['GPS'])
        positioningMap = QTreeWidgetItem(positioning, ['Map'])
        positioningPositioning = QTreeWidgetItem(positioning, ['Positioning'])

        # Customized Window Section
        customizedWindow = QTreeWidgetItem(self.presentationTreeWidget,
                                           ['Customized Window'])
        customizedWindowStatus = QTreeWidgetItem(customizedWindow,
                                                 ['Status Window'])
        customizedWindowMessage = QTreeWidgetItem(customizedWindow,
                                                  ['Message Window'])
        customizedWindowChart = QTreeWidgetItem(customizedWindow,
                                                ['Line Chart'])
        #
        # # NB-IoT Section
        nBIoT = QTreeWidgetItem(self.presentationTreeWidget, ['NB-IoT'])
        nBIoTParams = QTreeWidgetItem(nBIoT,
                                      ['NB-IoT Radio Parameters Window'])

        self.presentationTreeWidget.header().setCascadingSectionResizes(True)
        self.presentationTreeWidget.header().setHighlightSections(True)

        # Configuration
        self.configurationTreeWidget = QTreeWidget(AzenqosDialog)
        self.configurationTreeWidget.setGeometry(
            QtCore.QRect(20, 320, 260, 100))
        self.configurationTreeWidget.setFrameShape(QFrame.StyledPanel)
        self.configurationTreeWidget.setAllColumnsShowFocus(True)
        self.configurationTreeWidget.setObjectName("configurationTreeWidget")
        cellInformation = QTreeWidgetItem(self.configurationTreeWidget,
                                          ['Cell Information'])
        equipmentConfiguration = QTreeWidgetItem(self.configurationTreeWidget,
                                                 ['Equipment Configuration'])

    def setupPlayStopButton(self, AzenqosDialog):
        # todo ยังไม่เสร็จ
        self.horizontalLayout = QWidget(AzenqosDialog)
        self.horizontalLayout.setGeometry(QtCore.QRect(290, 70, 90, 48))
        self.playButton = QToolButton()
        self.playButton.setIcon(self.style().standardIcon(QStyle.SP_MediaPlay))
        self.pauseButton = QToolButton()
        self.pauseButton.setIcon(self.style().standardIcon(
            QStyle.SP_MediaPause))
        layout = QHBoxLayout(self.horizontalLayout)
        layout.addStretch(1)
        layout.addWidget(self.playButton)
        layout.addWidget(self.pauseButton)
        self.playButton.clicked.connect(self.playTime)

    def playTime(self):
        # todo ยังไม่เสร็จ
        global isSliderPlay
        isSliderPlay = True
        if isSliderPlay:
            for x in range(int(sliderLength)):
                value = self.timeSlider.value() + 1
                self.addTime(value)
        isSliderPlay = False

    def addTime(self, value):
        self.timeSlider.setValue(value)
        self.timeSlider.repaint()

    def loadAllMessages(self):
        getSelected = self.presentationTreeWidget.selectedItems()
        if getSelected:
            baseNode = getSelected[0]
            if baseNode.text(0) is not None:
                getChildNode = baseNode.text(0)
                getParentNode = baseNode.parent().text(0)
                self.classifySelectedItems(getParentNode, getChildNode)
                global latestMenu
                latestMenu = getParentNode + '_' + getChildNode

    def importDatabase(self):
        self.databaseDialog = Ui_DatabaseDialog()
        self.databaseDialog.show()
        self.hide()

    def timeChange(self):
        global currentTime
        value = self.timeSlider.value()
        timestampValue = minTimeValue + value
        sampledate = datetime.datetime.fromtimestamp(timestampValue)
        self.timeEdit.setDateTime(sampledate)
        global currentTime
        currentTime = timestampValue
        self.timeSlider.update()

    def classifySelectedItems(self, parent, child):
        windowName = parent + "_" + child
        if parent == "GSM":
            if child == "Radio Parameters":
                if hasattr(self, 'gsm_rdp_window'):
                    self.gsm_rdp_window.show()
                else:
                    if hasattr(self, 'database'):
                        self.gsm_rdp_window = TableWindow(windowName)
                    else:
                        self.gsm_rdp_window = TableWindow(windowName)
                        self.gsm_rdp_window.show()
            elif child == "Serving + Neighbors":
                if hasattr(self, 'gsm_sn_window'):
                    self.gsm_sn_window.show()
                else:
                    self.gsm_sn_window = TableWindow(windowName)
                    self.gsm_sn_window.show()
            elif child == "Current Channel":
                if hasattr(self, 'gsm_cc_window'):
                    self.gsm_cc_window.show()
                else:
                    self.gsm_cc_window = TableWindow(windowName)
                    self.gsm_cc_window.show()
            elif child == "C/I":
                if hasattr(self, 'gsm_ci_window'):
                    self.gsm_ci_window.show()
                else:
                    self.gsm_ci_window = TableWindow(windowName)
                    self.gsm_ci_window.show()
            elif child == "GSM Line Chart":
                if hasattr(self, 'gsm_lc_window'):
                    self.gsm_lc_window.show()
                else:
                    self.gsm_lc_window = TableWindow(windowName)
                    self.gsm_lc_window.show()
            elif child == "Events Counter":
                if hasattr(self, 'gsm_ec_window'):
                    self.gsm_ec_window.show()
                else:
                    self.gsm_ec_window = TableWindow(windowName)
                    self.gsm_ec_window.show()
        elif parent == "WCDMA":
            if child == "Active + Monitored Sets":
                if hasattr(self, 'wcdma_ams_window'):
                    self.wcdma_ams_window.show()
                else:
                    self.wcdma_ams_window = TableWindow(windowName)
                    self.wcdma_ams_window.show()
            elif child == "Radio Parameters":
                if hasattr(self, 'wcdma_rp_window'):
                    self.wcdma_rp_window.show()
                else:
                    self.wcdma_rp_window = TableWindow(windowName)
                    self.wcdma_rp_window.show()
            elif child == "Active Set List":
                if hasattr(self, 'wcdma_asl_window'):
                    self.wcdma_asl_window.show()
                else:
                    self.wcdma_asl_window = TableWindow(windowName)
                    self.wcdma_asl_window.show()
            elif child == "Monitored Set List":
                if hasattr(self, 'wcdma_msl_window'):
                    self.wcdma_msl_window.show()
                else:
                    self.wcdma_msl_window = TableWindow(windowName)
                    self.wcdma_msl_window.show()
            elif child == "WCDMA BLER Summary":
                if hasattr(self, 'wcdma_bler_window'):
                    self.wcdma_bler_window.show()
                else:
                    self.wcdma_bler_window = TableWindow(windowName)
                    self.wcdma_bler_window.show()
            elif child == "WCDMA BLER / Transport Channel":
                if hasattr(self, 'wcdma_bler_window'):
                    self.wcdma_blertc_window.show()
                else:
                    self.wcdma_blertc_window = TableWindow(windowName)
                    self.wcdma_blertc_window.show()
            elif child == "WCDMA Line Chart":
                if hasattr(self, 'wcdma_lc_window'):
                    self.wcdma_lc_window.show()
                else:
                    self.wcdma_lc_window = TableWindow(windowName)
                    self.wcdma_lc_window.show()
            elif child == "WCDMA Bearers":
                if hasattr(self, 'wcdma_bearer_window'):
                    self.wcdma_bearer_window.show()
                else:
                    self.wcdma_bearer_window = TableWindow(windowName)
                    self.wcdma_bearer_window.show()
            elif child == "Active + Monitored Bar":
                if hasattr(self, 'wcdma_amb_window'):
                    self.wcdma_amb_window.show()
                else:
                    self.wcdma_amb_window = TableWindow(windowName)
                    self.wcdma_amb_window.show()
            elif child == "WCDMA CM GSM Reports":
                if hasattr(self, 'wcdma_report_window'):
                    self.wcdma_report_window.show()
                else:
                    self.wcdma_report_window = TableWindow(windowName)
                    self.wcdma_report_window.show()
            elif child == "WCDMA CM GSM Cells":
                if hasattr(self, 'wcdma_cells_window'):
                    self.wcdma_cells_window.show()
                else:
                    self.wcdma_cells_window = TableWindow(windowName)
                    self.wcdma_cells_window.show()
            elif child == "WCDMA Pilot Analyzer":
                if hasattr(self, 'wcdma_analyzer_window'):
                    self.wcdma_analyzer_window.show()
                else:
                    self.wcdma_analyzer_window = TableWindow(windowName)
                    self.wcdma_analyzer_window.show()
        elif parent == "LTE":
            if child == "Radio Parameters":
                if hasattr(self, 'lte_param_window'):
                    self.lte_param_window.show()
                else:
                    self.lte_param_window = TableWindow(windowName)
                    self.lte_param_window.show()
            elif child == "Serving + Neighbors":
                if hasattr(self, 'lte_sn_window'):
                    self.lte_sn_window.show()
                else:
                    self.lte_sn_window = TableWindow(windowName)
                    self.lte_sn_window.show()
            elif child == "PUCCH/PDSCH Parameters":
                if hasattr(self, 'lte_ppparam_window'):
                    self.lte_ppparam_window.show()
                else:
                    self.lte_ppparam_window = TableWindow(windowName)
                    self.lte_ppparam_window.show()
            elif child == "LTE Line Chart":
                if hasattr(self, 'lte_lc_window'):
                    self.lte_lc_window.show()
                else:
                    self.lte_lc_window = Ui_LTE_LCwidget(windowName)
                    self.lte_lc_window.show()
            elif child == "LTE RLC":
                if hasattr(self, 'lte_rlc_window'):
                    self.lte_rlc_window.show()
                else:
                    self.lte_rlc_window = TableWindow(windowName)
                    self.lte_rlc_window.show()
            elif child == "LTE VoLTE":
                if hasattr(self, 'lte_volte_window'):
                    self.lte_volte_window.show()
                else:
                    self.lte_volte_window = TableWindow(windowName)
                    self.lte_volte_window.show()
        elif parent == "CDMA/EVDO":
            if child == "Radio Parameters":
                if hasattr(self, 'cdma_rp_window'):
                    self.cdma_rp_window.show()
                else:
                    self.cdma_rp_window = TableWindow(windowName)
                    self.cdma_rp_window.show()
            elif child == "Serving + Neighbors":
                if hasattr(self, 'cdma_sn_window'):
                    self.cdma_sn_window.show()
                else:
                    self.cdma_sn_window = TableWindow(windowName)
                    self.cdma_sn_window.show()
            elif child == "EVDO Parameters":
                if hasattr(self, 'cdma_evdo_window'):
                    self.cdma_evdo_window.show()
                else:
                    self.cdma_evdo_window = TableWindow(windowName)
                    self.cdma_evdo_window.show()
        elif parent == "Data":
            if child == "GSM Data Line Chart":
                if hasattr(self, 'gsm_data_lc'):
                    self.gsm_data_lc.show()
                else:
                    self.gsm_data_lc = TableWindow(windowName)
                    self.gsm_data_lc.show()
            elif child == "WCDMA Data Line Chart":
                if hasattr(self, 'wcdma_data_lc'):
                    self.wcdma_data_lc.show()
                else:
                    self.wcdma_data_lc = TableWindow(windowName)
                    self.wcdma_data_lc.show()
            elif child == "GPRS/EDGE Information":
                if hasattr(self, 'gprs_info'):
                    self.gprs_info.show()
                else:
                    self.gprs_info = TableWindow(windowName)
                    self.gprs_info.show()
            elif child == "Web Browser":
                if hasattr(self, 'web_browser'):
                    self.web_browser.show()
                else:
                    self.web_browser = TableWindow(windowName)
                    self.web_browser.show()
            elif child == "HSDPA/HSPA + Statistics":
                if hasattr(self, 'hsdpa_stat'):
                    self.hsdpa_stat.show()
                else:
                    self.hsdpa_stat = TableWindow(windowName)
                    self.hsdpa_stat.show()
            elif child == "HSUPA Statistics":
                if hasattr(self, 'hsupa_stat'):
                    self.hsupa_stat.show()
                else:
                    self.hsupa_stat = TableWindow(windowName)
                    self.hsupa_stat.show()
            elif child == "LTE Data Statistics":
                if hasattr(self, 'lte_data_stat'):
                    self.lte_data_stat.show()
                else:
                    self.lte_data_stat = TableWindow(windowName)
                    self.lte_data_stat.show()
            elif child == "LTE Data Line Chart":
                if hasattr(self, 'lte_data_lc'):
                    self.lte_data_lc.show()
                else:
                    self.lte_data_lc = TableWindow(windowName)
                    self.lte_data_lc.show()
            elif child == "Wifi Connected AP":
                if hasattr(self, 'wifi_connected_ap'):
                    self.wifi_connected_ap.show()
                else:
                    self.wifi_connected_ap = TableWindow(windowName)
                    self.wifi_connected_ap.show()
            elif child == "Wifi Scanned APs":
                if hasattr(self, 'wifi_scanned_ap'):
                    self.wifi_scanned_ap.show()
                else:
                    self.wifi_scanned_ap = TableWindow(windowName)
                    self.wifi_scanned_ap.show()
            elif child == "Wifi Graph":
                if hasattr(self, 'wifi_graph'):
                    self.wifi_graph.show()
                else:
                    self.wifi_graph = TableWindow(windowName)
                    self.wifi_graph.show()
        elif parent == "Signaling":
            if child == "Events":
                if hasattr(self, 'events_window'):
                    self.events_window.show()
                else:
                    self.events_window = TableWindow(windowName)
                    self.events_window.show()
            elif child == "Layer 1 Messages":
                if hasattr(self, 'layer_one_messages'):
                    self.layer_one_messages.show()
                else:
                    self.layer_one_messages = TableWindow(windowName)
                    self.layer_one_messages.show()
            elif child == "Layer 3 Messages":
                if hasattr(self, 'layer_three_messages'):
                    self.layer_three_messages.show()
                else:
                    self.layer_three_messages = TableWindow(windowName)
                    self.layer_three_messages.show()
            elif child == "Benchmark":
                if hasattr(self, 'benchmark'):
                    self.benchmark.show()
                else:
                    self.benchmark = TableWindow(windowName)
                    self.benchmark.show()
            elif child == "MM Reg States":
                if hasattr(self, 'mm_reg_states'):
                    self.mm_reg_states.show()
                else:
                    self.mm_reg_states = TableWindow(windowName)
                    self.mm_reg_states.show()
            elif child == "Serving System Info":
                if hasattr(self, 'serving_system_info'):
                    self.serving_system_info.show()
                else:
                    self.serving_system_info = TableWindow(windowName)
                    self.serving_system_info.show()
            elif child == "Debug Android/Event":
                if hasattr(self, 'debug_event'):
                    self.debug_event.show()
                else:
                    self.debug_event = TableWindow(windowName)
                    self.debug_event.show()
        global openedWindows
        openedWindows.append(self)
        print(openedWindows)
        # elif parent == "Positioning":
        #     if child == "GPS":
        #         print("1")
        #     elif child == "Map":
        #         print("2")
        #     elif child == "Positioning":
        #         print("3")
        # elif parent == "Customized Window":
        #     if child == "Status Window":
        #         print("1")
        #     elif child == "Message Window":
        #         print("2")
        #     elif child == "Line Chart":
        #         print("3")
        # elif parent == "NB-IoT":
        #     if child == "NB-IoT Radio Parameters Window":
        #         print("1")


class TimeSlider(QSlider):
    def __init__(self, parent=None):
        super().__init__(parent)

        # Set integer max and min on parent. These stay constant.
        # self._min_int = minTimeValue
        super().setMinimum(0)
        self._max_int = sliderLength
        super().setMaximum(self._max_int)
        # The "actual" min and max values seen by user.
        self._min_value = 0.0
        self._max_value = self._max_int

    @property
    def _value_range(self):
        return self._max_value - self._min_value

    def value(self):
        thisValue = float(super().value())
        value = thisValue / self._max_int * self._value_range
        return value

    def setValue(self, value):
        resultValue = int(value / self._value_range * self._max_int)
        super().setValue(resultValue)
        super().repaint()

    def setMinimum(self, value):
        self.setRange(value, self._max_value)

    def setMaximum(self, value):
        self.setRange(self._min_value, value)

    def setRange(self, minimum, maximum):
        old_value = self.value()
        self._min_value = minimum
        self._max_value = maximum
        self.setValue(old_value)  # Put slider in correct position

    def proportion(self):
        return (self.value() - self._min_value) / self._value_range


class TableWindow(QDialog):
    def __init__(self, windowName):
        super(TableWindow, self).__init__()
        self.title = windowName
        self.tableHeader = None
        self.left = 10
        self.top = 10
        self.width = 640
        self.height = 480
        self.dataList = []
        self.setupUi()

    def setupUi(self):
        self.setObjectName(self.title)
        self.setWindowTitle(self.title)
        self.tableView = QTableView(self)
        self.tableView.horizontalHeader().setSortIndicator(
            -1, Qt.AscendingOrder)
        self.specifyTablesHeader()
        layout = QVBoxLayout(self)
        layout.addWidget(self.tableView)
        self.setLayout(layout)
        self.raise_()
        self.activateWindow()

    def setTableModel(self, dataList):
        self.tableModel = TableModel(dataList, self.tableHeader, self)
        self.proxyModel = QtCore.QSortFilterProxyModel()
        self.proxyModel.setSourceModel(self.tableModel)
        self.tableView.setModel(self.proxyModel)
        self.tableView.setSortingEnabled(True)
        self.tableView.resizeColumnsToContents()

    def specifyTablesHeader(self):
        if self.title is not None:
            # GSM
            if self.title == 'GSM_Radio Parameters':
                self.tableHeader = ["Element", "Full", "Sub"]
                self.dataList = GsmDataQuery(None).getRadioParameters()
            elif self.title == 'GSM_Serving + Neighbors':
                self.tableHeader = [
                    "Time", "Cellname", "LAC", "BSIC", "ARFCN", "RxLev", "C1",
                    "C2", "C31", "C32"
                ]
                self.dataList = GsmDataQuery().getServingAndNeighbors()
            elif self.title == 'GSM_Current Channel':
                self.tableHeader = ["Element", "Value"]
                self.dataList = GsmDataQuery().getCurrentChannel()
            elif self.title == 'GSM_C/I':
                self.tableHeader = ["Time", "ARFCN", "Value"]
                self.dataList = GsmDataQuery().getCSlashI()
            elif self.title == 'GSM_Line Chart':
                self.tableHeader = ["Element", "Value", "MS", "Color"]
                self.dataList = GsmDataQuery().getGSMLineChart()
            elif self.title == 'GSM_Events Counter':
                self.tableHeader = ["Event", "MS1", "MS2", "MS3", "MS4"]
                self.dataList = GsmDataQuery().getGSMEventsCounter()

            # WCDMA
            elif self.title == 'WCDMA_Active + Monitored Sets':
                self.tableHeader = [
                    "Time", "CellName", "CellType", "SC", "Ec/Io", "RSCP",
                    "Freq", "Event"
                ]
            elif self.title == 'WCDMA_Radio Parameters':
                self.tableHeader = ["Element", "Value"]
            elif self.title == 'WCDMA_Active Set Lists':
                self.tableHeader = [
                    "Time", "Freq", "PSC", "Cell Position", "Cell TPC",
                    "Diversity"
                ]
            elif self.title == 'WCDMA_Monitored Set List':
                self.tableHeader = [
                    "Time", "Freq", "PSC", "Cell Position", "Diversity"
                ]
            elif self.title == 'WCDMA_BLER Summary':
                self.tableHeader = ["Element", "Value"]
            elif self.title == 'WCDMA_BLER / Transport Channel':
                self.tableHeader = [
                    "Transport Channel", "Percent", "Err", "Rcvd"
                ]
            elif self.title == 'WCDMA_Line Chart':
                self.tableHeader = ["Element", "Value", "MS", "Color"]
            elif self.title == 'WCDMA_Bearers':
                self.tableHeader = [
                    "N Bearers", "Bearers ID", "Bearers Rate DL",
                    "Bearers Rate UL"
                ]
            elif self.title == 'WCDMA_Pilot Poluting Cells':
                self.tableHeader = ["Time", "N Cells", "SC", "RSCP", "Ec/Io"]
            elif self.title == 'WCDMA_Active + Monitored Bar':
                self.tableHeader = ["Cell Type", "Ec/Io", "RSCP"]
            elif self.title == 'WCDMA_CM GSM Reports':
                self.tableHeader = ["Time", "", "Eq.", "Name", "Info."]
            elif self.title == 'WCDMA_CM GSM Cells':
                self.tableHeader = [
                    "Time", "ARFCN", "RxLev", "BSIC", "Measure"
                ]
            elif self.title == 'WCDMA_Pilot Analyzer':
                self.tableHeader = ["Element", "Value", "Cell Type", "Color"]

            # LTE
            elif self.title == 'LTE_Radio Parameters':
                self.tableHeader = ["Element", "PCC", "SCC0", "SCC1"]
            elif self.title == 'LTE_Serving + Neighbors':
                self.tableHeader = [
                    "Time", "EARFCN", "Band", "PCI", "RSRP", "RSRQ"
                ]
            elif self.title == 'LTE_PUCCH/PDSCH Parameters':
                self.tableHeader = ["Element", "Value"]
            elif self.title == 'LTE_LTE Line Chart':
                self.tableHeader = ["Element", "Value", "MS", "Color"]
            elif self.title == 'LTE_LTE RLC':
                self.tableHeader = ["Element", "Value", "", "", ""]
            elif self.title == 'LTE_LTE VoLTE':
                self.tableHeader = ["Element", "Value"]

            # CDMA/EVDO
            elif self.title == 'CDMA/EVDO_Radio Parameters':
                self.tableHeader = ["Element", "Value"]
            elif self.title == 'CDMA/EVDO_Serving + Neighbors':
                self.tableHeader = ["Time", "PN", "Ec/Io", "Type"]
            elif self.title == 'CDMA/EVDO_EVDO Parameters':
                self.tableHeader = ["Element", "Value"]

            # Data
            elif self.title == 'Data_GSM Data Line Chart':
                self.tableHeader = ["Element", "Value", "MS", "Color"]
            elif self.title == 'Data_WCDMA Data Line Chart':
                self.tableHeader = ["Element", "Value", "MS", "Color"]
            elif self.title == 'Data_GPRS/EDGE Information':
                self.tableHeader = ["Element", "Value"]
            elif self.title == 'Data_Web Browser':
                self.tableHeader = ["Type", "Object"]
                self.windowHeader = ["ID", "URL", "Type", "State", "Size(%)"]
            elif self.title == 'Data_HSDPA/HSPA + Statistics':
                self.tableHeader = ["Element", "Value"]
            elif self.title == 'Data_HSUPA Statistics':
                self.tableHeader = ["Element", "Value"]
            elif self.title == 'Data_LTE Data Statistics':
                self.tableHeader = ["Element", "Value", "", ""]
            elif self.title == 'Data_LTE Data Line Chart':
                self.tableHeader = ["Element", "Value", "MS", "Color"]
            elif self.title == 'Data_Wifi Connected AP':
                self.tableHeader = ["Element", "Value"]
            elif self.title == 'Data_Wifi Scanned APs':
                self.tableHeader = [
                    "Time", "BSSID", "SSID", "Freq", "Ch.", "Level",
                    "Encryption"
                ]
            elif self.title == 'Data_Wifi Graph':
                return False

            # Signaling
            elif self.title == 'Signaling_Events':
                self.tableHeader = ["Time", "Eq.", "Name", "Info."]
                self.dataList = SignalingDataQuery().getEvents()
            elif self.title == 'Signaling_Layer 1 Messages':
                self.tableHeader = ["Time", "", "Eq.", "Name", "Info."]
                self.dataList = SignalingDataQuery().getLayerOneMessages()
            elif self.title == 'Signaling_Layer 3 Messages':
                self.tableHeader = ["Time", "", "Eq.", "", "Name", "Info."]
                self.dataList = SignalingDataQuery().getLayerThreeMessages()
            elif self.title == 'Signaling_Benchmark':
                self.tableHeader = ["", "MS1", "MS2", "MS3", "MS4"]
                self.dataList = SignalingDataQuery().getBenchmark()
            elif self.title == 'Signaling_MM Reg States':
                self.tableHeader = ["Element", "Value"]
                self.dataList = SignalingDataQuery().getMmRegStates()
            elif self.title == 'Signaling_Serving System Info':
                self.tableHeader = ["Element", "Value"]
                self.dataList = SignalingDataQuery().getServingSystemInfo()
            elif self.title == 'Signaling_Debug Android/Event':
                self.tableHeader = ["Element", "Value"]
                self.dataList = SignalingDataQuery().getDebugAndroidEvent()

            if self.dataList is not None:
                self.setTableModel(self.dataList)

    def reject(self):
        global openedWindows
        openedWindows.remove(self)
        print(openedWindows)
        self.hide()


class TableModel(QAbstractTableModel):
    def __init__(self, inputData, header, parent=None, *args):
        QAbstractTableModel.__init__(self, parent, *args)
        self.headerLabels = header
        self.dataSource = inputData
        # self.testColumnValue()

    def rowCount(self, parent):
        return len(self.dataSource)

    def columnCount(self, parent):
        return len(self.dataSource[0])

    def data(self, index, role):
        if not index.isValid():
            return QVariant()
        elif role != Qt.DisplayRole:
            return QVariant()
        return QVariant(self.dataSource[index.row()][index.column()])

    def headerData(self, section, orientation, role=Qt.DisplayRole):
        if role == Qt.DisplayRole and orientation == Qt.Horizontal:
            return self.headerLabels[section]
        return QAbstractTableModel.headerData(self, section, orientation, role)


class GsmDataQuery:
    def __init__(self):
        self.timeFilter = currentTime

    def getRadioParameters(self):
        if azenqosDatabase is not None:
            azenqosDatabase.open()
        query = QSqlQuery()
        query.exec_("select * from events")
        timeField = query.record().indexOf("time")
        nameField = query.record().indexOf("name")
        detailField = query.record().indexOf("info")
        dataList = []
        while query.next():
            timeValue = query.value(timeField)
            nameValue = query.value(nameField)
            detailStrValue = query.value(detailField)
            dataList.append([timeValue, '', nameValue, detailStrValue])
        azenqosDatabase.close()
        return dataList

    def getServingAndNeighbors(self):
        if azenqosDatabase is not None:
            azenqosDatabase.open()
        query = QSqlQuery()
        query.exec_("select * from events")
        dataList = []
        while query.next():
            dataList.append(None)
        azenqosDatabase.close()
        return dataList

    def getCurrentChannel(self):
        if azenqosDatabase is not None:
            azenqosDatabase.open()
        query = QSqlQuery()
        query.exec_("select * from events")
        dataList = []
        while query.next():
            dataList.append(None)
        azenqosDatabase.close()
        return dataList

    def getCSlashI(self):
        if azenqosDatabase is not None:
            azenqosDatabase.open()
        query = QSqlQuery()
        query.exec_("select * from events")
        dataList = []
        while query.next():
            dataList.append(None)
        azenqosDatabase.close()
        return dataList

    def getGSMLineChart(self):
        if azenqosDatabase is not None:
            azenqosDatabase.open()
        query = QSqlQuery()
        query.exec_("select * from events")
        dataList = []
        while query.next():
            dataList.append(None)
        azenqosDatabase.close()
        return dataList

    def getGSMEventsCounter(self):
        if azenqosDatabase is not None:
            azenqosDatabase.open()
        query = QSqlQuery()
        query.exec_("select * from events")
        dataList = []
        while query.next():
            dataList.append(None)
        azenqosDatabase.close()
        return dataList


class CdmaEvdoQuery:
    def __init__(self):
        self.timeFilter = currentTime

    def getRadioParameters(self):
        if azenqosDatabase is not None:
            azenqosDatabase.open()
        query = QSqlQuery()
        query.exec_("select * from events")
        timeField = query.record().indexOf("time")
        nameField = query.record().indexOf("name")
        detailField = query.record().indexOf("info")
        dataList = []
        while query.next():
            timeValue = query.value(timeField)
            nameValue = query.value(nameField)
            detailStrValue = query.value(detailField)
            dataList.append([timeValue, '', nameValue, detailStrValue])
        azenqosDatabase.close()
        return dataList

    def getServingAndNeighbors(self):
        if azenqosDatabase is not None:
            azenqosDatabase.open()
        query = QSqlQuery()
        query.exec_("select * from events")
        dataList = []
        while query.next():
            dataList.append(None)
        azenqosDatabase.close()
        return dataList

    def getEvdoParameters(self):
        if azenqosDatabase is not None:
            azenqosDatabase.open()
        query = QSqlQuery()
        query.exec_("select * from events")
        dataList = []
        while query.next():
            dataList.append(None)
        azenqosDatabase.close()
        return dataList


class DataQuery:
    def __init__(self, windowName):
        self.windowName = windowName
        self.timeFilter = currentTime

    def getGSMDataLineChart(self):
        if azenqosDatabase is not None:
            azenqosDatabase.open()
        query = QSqlQuery()
        query.exec_("select * from events")
        timeField = query.record().indexOf("time")
        nameField = query.record().indexOf("name")
        detailField = query.record().indexOf("info")
        dataList = []
        while query.next():
            timeValue = query.value(timeField)
            nameValue = query.value(nameField)
            detailStrValue = query.value(detailField)
            dataList.append([timeValue, '', nameValue, detailStrValue])
        azenqosDatabase.close()
        return dataList

    def getWcdmaDataLineChart(self):
        if azenqosDatabase is not None:
            azenqosDatabase.open()
        query = QSqlQuery()
        query.exec_("select * from events")
        timeField = query.record().indexOf("time")
        nameField = query.record().indexOf("name")
        detailField = query.record().indexOf("info")
        dataList = []
        while query.next():
            timeValue = query.value(timeField)
            nameValue = query.value(nameField)
            detailStrValue = query.value(detailField)
            dataList.append([timeValue, '', nameValue, detailStrValue])
        azenqosDatabase.close()
        return dataList

    def getGprsEdgeInformation(self):
        if azenqosDatabase is not None:
            azenqosDatabase.open()
        query = QSqlQuery()
        query.exec_("select * from events")
        timeField = query.record().indexOf("time")
        nameField = query.record().indexOf("name")
        detailField = query.record().indexOf("info")
        dataList = []
        while query.next():
            timeValue = query.value(timeField)
            nameValue = query.value(nameField)
            detailStrValue = query.value(detailField)
            dataList.append([timeValue, '', nameValue, detailStrValue])
        azenqosDatabase.close()
        return dataList

    def getHsdpaHspaStatistics(self):
        if azenqosDatabase is not None:
            azenqosDatabase.open()
        query = QSqlQuery()
        query.exec_("select * from events")
        timeField = query.record().indexOf("time")
        nameField = query.record().indexOf("name")
        detailField = query.record().indexOf("info")
        dataList = []
        while query.next():
            timeValue = query.value(timeField)
            nameValue = query.value(nameField)
            detailStrValue = query.value(detailField)
            dataList.append([timeValue, '', nameValue, detailStrValue])
        azenqosDatabase.close()
        return dataList

    def getHsupaStatistics(self):
        if azenqosDatabase is not None:
            azenqosDatabase.open()
        query = QSqlQuery()
        query.exec_("select * from events")
        timeField = query.record().indexOf("time")
        nameField = query.record().indexOf("name")
        detailField = query.record().indexOf("info")
        dataList = []
        while query.next():
            timeValue = query.value(timeField)
            nameValue = query.value(nameField)
            detailStrValue = query.value(detailField)
            dataList.append([timeValue, '', nameValue, detailStrValue])
        azenqosDatabase.close()
        return dataList

    def getLteDataStatistics(self):
        if azenqosDatabase is not None:
            azenqosDatabase.open()
        query = QSqlQuery()
        query.exec_("select * from events")
        timeField = query.record().indexOf("time")
        nameField = query.record().indexOf("name")
        detailField = query.record().indexOf("info")
        dataList = []
        while query.next():
            timeValue = query.value(timeField)
            nameValue = query.value(nameField)
            detailStrValue = query.value(detailField)
            dataList.append([timeValue, '', nameValue, detailStrValue])
        azenqosDatabase.close()
        return dataList

    def getLteDataLineChart(self):
        if azenqosDatabase is not None:
            azenqosDatabase.open()
        query = QSqlQuery()
        query.exec_("select * from events")
        timeField = query.record().indexOf("time")
        nameField = query.record().indexOf("name")
        detailField = query.record().indexOf("info")
        dataList = []
        while query.next():
            timeValue = query.value(timeField)
            nameValue = query.value(nameField)
            detailStrValue = query.value(detailField)
            dataList.append([timeValue, '', nameValue, detailStrValue])
        azenqosDatabase.close()
        return dataList

    def getWifiConnectedAp(self):
        if azenqosDatabase is not None:
            azenqosDatabase.open()
        query = QSqlQuery()
        query.exec_("select * from events")
        timeField = query.record().indexOf("time")
        nameField = query.record().indexOf("name")
        detailField = query.record().indexOf("info")
        dataList = []
        while query.next():
            timeValue = query.value(timeField)
            nameValue = query.value(nameField)
            detailStrValue = query.value(detailField)
            dataList.append([timeValue, '', nameValue, detailStrValue])
        azenqosDatabase.close()
        return dataList

    def getWifiScannedAps(self):
        if azenqosDatabase is not None:
            azenqosDatabase.open()
        query = QSqlQuery()
        query.exec_("select * from events")
        timeField = query.record().indexOf("time")
        nameField = query.record().indexOf("name")
        detailField = query.record().indexOf("info")
        dataList = []
        while query.next():
            timeValue = query.value(timeField)
            nameValue = query.value(nameField)
            detailStrValue = query.value(detailField)
            dataList.append([timeValue, '', nameValue, detailStrValue])
        azenqosDatabase.close()
        return dataList

    def getWifiGraph(self):
        if azenqosDatabase is not None:
            azenqosDatabase.open()
        query = QSqlQuery()
        query.exec_("select * from events")
        timeField = query.record().indexOf("time")
        nameField = query.record().indexOf("name")
        detailField = query.record().indexOf("info")
        dataList = []
        while query.next():
            timeValue = query.value(timeField)
            nameValue = query.value(nameField)
            detailStrValue = query.value(detailField)
            dataList.append([timeValue, '', nameValue, detailStrValue])
        azenqosDatabase.close()
        return dataList


class SignalingDataQuery:
    def __init__(self):
        self.timeFilter = currentTime

    def getEvents(self):
        if azenqosDatabase is not None:
            azenqosDatabase.open()
        query = QSqlQuery()
        if self.timeFilter != None:
            queryString = 'select * from events where time <= %s' % (
                self.timeFilter)
        else:
            queryString = 'select * from events'
        query.exec_(queryString)
        timeField = query.record().indexOf("time")
        nameField = query.record().indexOf("name")
        detailField = query.record().indexOf("info")
        dataList = []
        while query.next():
            timeValue = query.value(timeField)
            nameValue = query.value(nameField)
            detailStrValue = query.value(detailField)
            dataList.append([timeValue, '', nameValue, detailStrValue])
        azenqosDatabase.close()
        return dataList

    def getLayerOneMessages(self):
        if azenqosDatabase is not None:
            azenqosDatabase.open()
        query = QSqlQuery()
        query.exec_("select * from events")
        timeField = query.record().indexOf("time")
        nameField = query.record().indexOf("name")
        detailField = query.record().indexOf("info")
        dataList = []
        while query.next():
            timeValue = query.value(timeField)
            nameValue = query.value(nameField)
            detailStrValue = query.value(detailField)
            dataList.append([timeValue, '', 'MS1', nameValue, detailStrValue])
        azenqosDatabase.close()
        return dataList

    def getLayerThreeMessages(self):
        if azenqosDatabase is not None:
            azenqosDatabase.open()
        query = QSqlQuery()
        query.exec_("select * from signalling")
        timeField = query.record().indexOf("time")
        nameField = query.record().indexOf("name")
        symbolField = query.record().indexOf("symbol")
        detailField = query.record().indexOf("detail_str")
        dataList = []
        while query.next():
            timeValue = query.value(timeField)
            nameValue = query.value(nameField)
            symbolValue = query.value(symbolField)
            detailStrValue = query.value(detailField).split(',')
            if detailStrValue[0].startswith('LTE') == True:
                detailStrValue = 'LTE RRC'
            else:
                detailStrValue = ''
            if detailStrValue != '':
                dataList.append([
                    timeValue, symbolValue, 'MS1', detailStrValue, nameValue,
                    ''
                ])
        azenqosDatabase.close()
        return dataList

    def getBenchmark(self):
        if azenqosDatabase is not None:
            azenqosDatabase.open()
        query = QSqlQuery()
        query.exec_("select * from events")
        timeField = query.record().indexOf("time")
        nameField = query.record().indexOf("name")
        detailField = query.record().indexOf("info")
        dataList = []
        while query.next():
            timeValue = query.value(timeField)
            nameValue = query.value(nameField)
            detailStrValue = query.value(detailField)
            dataList.append([timeValue, '', 'MS1', nameValue, detailStrValue])
        azenqosDatabase.close()
        return dataList

    def getMmRegStates(self):
        if azenqosDatabase is not None:
            azenqosDatabase.open()
        dataList = []
        selectedColumns = 'time,mm_state_state,mm_state_substate,mm_state_update_status,mm_characteristics_network_operation_mode,mm_characteristics_service_type,mm_characteristics_mcc,mm_characteristics_mnc,mm_characteristics_lac,mm_characteristics_rai'
        queryString = 'select %s from mm_state order by time desc limit 1' % (
            selectedColumns)
        query = QSqlQuery()
        query.exec_(queryString)
        selectedColumns = selectedColumns.split(",")
        fieldCount = len(selectedColumns)
        while query.next():
            for index in range(fieldCount):
                columnName = selectedColumns[index]
                value = query.value(index)
                dataList.append([columnName, value])
        azenqosDatabase.close()
        return dataList

    def getServingSystemInfo(self):
        if azenqosDatabase is not None:
            azenqosDatabase.open()
        dataList = []
        fieldsList = [
            'Time', 'mcc', 'mnc', 'lac', 'service status', 'service domain',
            'service capability', 'system mode', 'roaming status',
            'system id type'
        ]
        selectedColumns = 'time,serving_system_mcc,serving_system_mnc,serving_system_lac,cm_service_status,cm_service_domain,cm_service_capability,cm_system_mode,cm_roaming_status,cm_system_id_type'
        queryString = 'select %s from serving_system order by time desc limit 1' % (
            selectedColumns)
        query = QSqlQuery()
        query.exec_(queryString)
        fieldCount = len(selectedColumns.split(","))
        while query.next():
            for index in range(fieldCount):
                columnName = fieldsList[index]
                value = query.value(index)
                dataList.append([columnName, value])
        azenqosDatabase.close()
        return dataList

    def getDebugAndroidEvent(self):
        if azenqosDatabase is not None:
            azenqosDatabase.open()
        query = QSqlQuery()
        query.exec_("select * from events")
        timeField = query.record().indexOf("time")
        nameField = query.record().indexOf("name")
        detailField = query.record().indexOf("info")
        dataList = []
        while query.next():
            timeValue = query.value(timeField)
            nameValue = query.value(nameField)
            detailStrValue = query.value(detailField)
            dataList.append([timeValue, '', 'MS1', nameValue, detailStrValue])
        azenqosDatabase.close()
        return dataList


# LTE Line Chart UI


class Ui_LTE_LCwidget(QWidget):
    def __init__(self, windowName):
        super(Ui_LTE_LCwidget, self).__init__()
        self.title = windowName
        self.setupUi(self)

    def setupUi(self, LTE_LCwidget):
        LTE_LCwidget.setObjectName("LTE_LCwidget")
        LTE_LCwidget.resize(841, 586)
        self.lte_GArea = QtWidgets.QScrollArea(LTE_LCwidget)
        self.lte_GArea.setGeometry(QtCore.QRect(20, 10, 801, 371))
        self.lte_GArea.setWidgetResizable(True)
        self.lte_GArea.setObjectName("lte_GArea")
        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 799, 369))
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        self.lte_widget = Line_Chart(self.scrollAreaWidgetContents, self.title)
        self.lte_widget.setGeometry(QtCore.QRect(10, 9, 781, 351))
        self.lte_widget.setObjectName("lte_widget")
        self.lte_GArea.setWidget(self.scrollAreaWidgetContents)
        self.lte_tableWidget = QtWidgets.QTableWidget(LTE_LCwidget)
        self.lte_tableWidget.setGeometry(QtCore.QRect(20, 390, 421, 171))
        self.lte_tableWidget.setObjectName("lte_tableWidget")
        self.lte_tableWidget.setColumnCount(4)
        self.lte_tableWidget.setRowCount(5)
        item = QtWidgets.QTableWidgetItem()
        self.lte_tableWidget.setVerticalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.lte_tableWidget.setVerticalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.lte_tableWidget.setVerticalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.lte_tableWidget.setVerticalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.lte_tableWidget.setVerticalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.lte_tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.lte_tableWidget.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.lte_tableWidget.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.lte_tableWidget.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.lte_tableWidget.setItem(0, 0, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.lte_tableWidget.setItem(0, 2, item)
        item = QtWidgets.QTableWidgetItem()
        brush = QtGui.QBrush(QtGui.QColor(255, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        item.setBackground(brush)
        self.lte_tableWidget.setItem(0, 3, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.lte_tableWidget.setItem(1, 0, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.lte_tableWidget.setItem(1, 2, item)
        item = QtWidgets.QTableWidgetItem()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        item.setBackground(brush)
        self.lte_tableWidget.setItem(1, 3, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.lte_tableWidget.setItem(2, 0, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.lte_tableWidget.setItem(2, 2, item)
        item = QtWidgets.QTableWidgetItem()
        brush = QtGui.QBrush(QtGui.QColor(0, 124, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        item.setBackground(brush)
        self.lte_tableWidget.setItem(2, 3, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.lte_tableWidget.setItem(3, 0, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.lte_tableWidget.setItem(3, 2, item)
        item = QtWidgets.QTableWidgetItem()
        brush = QtGui.QBrush(QtGui.QColor(255, 119, 171))
        brush.setStyle(QtCore.Qt.SolidPattern)
        item.setBackground(brush)
        self.lte_tableWidget.setItem(3, 3, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.lte_tableWidget.setItem(4, 0, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.lte_tableWidget.setItem(4, 2, item)
        item = QtWidgets.QTableWidgetItem()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        item.setBackground(brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        item.setForeground(brush)
        self.lte_tableWidget.setItem(4, 3, item)
        self.lte_tableWidget.horizontalHeader().setVisible(True)
        self.lte_tableWidget.horizontalHeader().setHighlightSections(True)
        self.lte_tableWidget.verticalHeader().setVisible(False)

        self.retranslateUi(LTE_LCwidget)
        QtCore.QMetaObject.connectSlotsByName(LTE_LCwidget)

    def retranslateUi(self, LTE_LCwidget):
        _translate = QtCore.QCoreApplication.translate
        LTE_LCwidget.setWindowTitle(
            _translate("LTE_LCwidget", "LTE Line Chart [MS1]"))
        item = self.lte_tableWidget.verticalHeaderItem(0)
        item.setText(_translate("LTE_LCwidget", "1"))
        item = self.lte_tableWidget.verticalHeaderItem(1)
        item.setText(_translate("LTE_LCwidget", "2"))
        item = self.lte_tableWidget.verticalHeaderItem(2)
        item.setText(_translate("LTE_LCwidget", "3"))
        item = self.lte_tableWidget.verticalHeaderItem(3)
        item.setText(_translate("LTE_LCwidget", "4"))
        item = self.lte_tableWidget.verticalHeaderItem(4)
        item.setText(_translate("LTE_LCwidget", "5"))
        item = self.lte_tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("LTE_LCwidget", "Element"))
        item = self.lte_tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("LTE_LCwidget", "Value"))
        item = self.lte_tableWidget.horizontalHeaderItem(2)
        item.setText(_translate("LTE_LCwidget", "MS"))
        item = self.lte_tableWidget.horizontalHeaderItem(3)
        item.setText(_translate("LTE_LCwidget", "Color"))
        __sortingEnabled = self.lte_tableWidget.isSortingEnabled()
        self.lte_tableWidget.setSortingEnabled(False)
        item = self.lte_tableWidget.item(0, 0)
        item.setText(_translate("LTE_LCwidget", "SINR Rx[0][1]"))
        item = self.lte_tableWidget.item(0, 2)
        item.setText(_translate("LTE_LCwidget", "MS1"))
        item = self.lte_tableWidget.item(1, 0)
        item.setText(_translate("LTE_LCwidget", "SINR Rx[1][1]"))
        item = self.lte_tableWidget.item(1, 2)
        item.setText(_translate("LTE_LCwidget", "MS1"))
        item = self.lte_tableWidget.item(2, 0)
        item.setText(_translate("LTE_LCwidget", "Inst RSRP[1]"))
        item = self.lte_tableWidget.item(2, 2)
        item.setText(_translate("LTE_LCwidget", "MS1"))
        item = self.lte_tableWidget.item(3, 0)
        item.setText(_translate("LTE_LCwidget", "Inst RSRQ[1]"))
        item = self.lte_tableWidget.item(3, 2)
        item.setText(_translate("LTE_LCwidget", "MS1"))
        item = self.lte_tableWidget.item(4, 0)
        item.setText(_translate("LTE_LCwidget", "Inst RSSI[1]"))
        item = self.lte_tableWidget.item(4, 2)
        item.setText(_translate("LTE_LCwidget", "MS1"))
        self.lte_tableWidget.setSortingEnabled(__sortingEnabled)


# For Line Chart


class Line_Chart(QWidget):
    def __init__(self, parent, windowName):
        super().__init__(parent)
        self.title = windowName
        self.canvas = FigureCanvas(Figure(figsize=(4, 4)))
        vertical_layout = QVBoxLayout()
        vertical_layout.addWidget(self.canvas)
        self.canvas.axes = self.canvas.figure.add_subplot()
        self.setLayout(vertical_layout)

        # Toolbar
        toolbar = NavigationToolbar(self.canvas, self)
        vertical_layout.addWidget(toolbar)

        # Choose Line Chart
        if self.title is not None:
            # LTE Line Chart
            if self.title == 'LTE_LTE Line Chart':
                self.LTE()

    def LTE(self):
        self.canvas.axes.set_title('LTE Line Chart')
        Time = []
        SINR_Rx0_1 = []
        SINR_Rx1_1 = []
        Inst_RSRP_1 = []
        Inst_RSRQ_1 = []
        Inst_RSSI_1 = []

        azenqosDatabase.open()
        query = QSqlQuery()
        query.exec_(
            "SELECT time ,lte_sinr_rx0_1 ,lte_sinr_rx1_1 ,lte_inst_rsrp_1 ,lte_inst_rsrq_1 ,lte_inst_rssi_1 FROM lte_cell_meas"
        )
        # Query
        time = (query.record().indexOf("time"))
        lte_sinr_rx0_1 = query.record().indexOf("lte_sinr_rx0_1")
        lte_sinr_rx1_1 = query.record().indexOf("lte_sinr_rx1_1")
        lte_inst_rsrp_1 = query.record().indexOf("lte_inst_rsrp_1")
        lte_inst_rsrq_1 = query.record().indexOf("lte_inst_rsrq_1")
        lte_inst_rssi_1 = query.record().indexOf("lte_inst_rssi_1")

        while c.next():
            timeValue = query.value(time).split(' ')[1]
            Time.append(timeValue)
            sig1Value = query.value(lte_sinr_rx0_1)
            sig2Value = query.value(lte_sinr_rx1_1)
            sig3Value = query.value(lte_inst_rsrp_1)
            sig4Value = query.value(lte_inst_rsrq_1)
            sig5Value = query.value(lte_inst_rssi_1)

            if not (type(sig1Value) == float):
                SINR_Rx0_1.append(0)
            else:
                SINR_Rx0_1.append(sig1Value)

            if not (type(sig2Value) == float):
                SINR_Rx1_1.append(0)
            else:
                SINR_Rx1_1.append(sig2Value)

            if not (type(sig3Value) == float):
                Inst_RSRP_1.append(0)
            else:
                Inst_RSRP_1.append(sig3Value)

            if not (type(sig4Value) == float):
                Inst_RSRQ_1.append(0)
            else:
                Inst_RSRQ_1.append(sig4Value)

            if not (type(sig5Value) == float):
                Inst_RSSI_1.append(0)
            else:
                Inst_RSSI_1.append(sig5Value)

        self.canvas.axes.set_facecolor('#fef8e7')
        self.canvas.axes.autoscale(False)
        self.canvas.axes.xaxis.grid(True)
        self.canvas.axes.yaxis.grid(True)
        self.canvas.axes.set_xticklabels(Time)
        self.canvas.axes.yaxis.set_major_locator(plt.MaxNLocator(10))
        self.canvas.axes.yaxis.set_major_formatter(plt.ScalarFormatter())
        # print(SINR_Rx0_1)
        line1, = self.canvas.axes.plot(Time,
                                       SINR_Rx0_1,
                                       c='#ff0000',
                                       label='SINR Rx[0][1]',
                                       picker=5,
                                       linewidth=1)
        line2, = self.canvas.axes.plot(Time,
                                       SINR_Rx1_1,
                                       '#0000ff',
                                       label='SINR Rx[1][1]',
                                       picker=5,
                                       linewidth=1)
        line3, = self.canvas.axes.plot(Time,
                                       Inst_RSRP_1,
                                       '#007c00',
                                       label='Inst RSRP[1]',
                                       picker=5,
                                       linewidth=1)
        line4, = self.canvas.axes.plot(Time,
                                       Inst_RSRQ_1,
                                       '#ff77ab',
                                       label='Inst RSRQ[1]',
                                       picker=5,
                                       linewidth=1)
        line5, = self.canvas.axes.plot(Time,
                                       Inst_RSSI_1,
                                       '#000000',
                                       label='Inst RSSI[1]',
                                       picker=5,
                                       linewidth=1)
        # self.canvas.draw()
        self.canvas.axes.set_ylim(-120, 35)
        self.canvas.axes.set_xlim(Time[0], Time[3])
        azenqosDatabase.close()

        lines = [line1, line2, line3, line4, line5]

        def on_pick(event):
            for L in lines:
                L.set_linewidth(1)
            event.artist.set_linewidth(2.5)
            self.canvas.draw()

        pick = self.canvas.mpl_connect('pick_event', on_pick)


class setInterval:
    def __init__(self, value, interval, action):
        self.interval = interval
        self.action = action
        self.stopEvent = threading.Event()
        thread = threading.Thread(target=self.__setInterval)
        thread.start()

    def __setInterval(self):
        nextTime = time.time() + self.interval
        while not self.stopEvent.wait(nextTime - time.time()):
            nextTime += self.interval
            self.action()

    def cancel(self):
        self.stopEvent.set()


if __name__ == '__main__':
    app = QApplication(sys.argv)
    dialog = Ui_DatabaseDialog()
    dialog.show()
    sys.exit(app.exec_())
