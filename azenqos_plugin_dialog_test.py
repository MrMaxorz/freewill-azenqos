# -*- coding: utf-8 -*-
"""
/***************************************************************************
 AzenqosDialog
                                 A QGIS plugin
 Azenqos Plugin
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2019-03-18
        git sha              : $Format:%H$
        copyright            : (C) 2019 by Metamedia Techonology Co.,Ltd
        email                : gritmanoch@longdo.com
 ***************************************************************************/

/***************************************************************************
 *                                                                        *
 *  This program is free software; you can redistribute it and/or modify  *
 *  it under the terms of the GNU General Public License as published by  *
 *  the Free Software Foundation; either version 2 of the License, or     *
 *  (at your option) any later version.                                   *
 *                                                                        *
 ***************************************************************************/
"""
import os
import sys
import datetime
import time
import threading
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import *
from PyQt5.QtCore import QAbstractTableModel, QVariant, Qt, QByteArray
from PyQt5.QtSql import QSqlQuery, QSqlDatabase
from matplotlib.figure import Figure
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.backends.backend_qt4agg import NavigationToolbar2QT as NavigationToolbar
from matplotlib.lines import Line2D
import sqlite3
import matplotlib.pyplot as plt
from matplotlib.ticker import StrMethodFormatter
import numpy as np
# from qgis.core import *
# from qgis.utils import *

azenqosDatabase = None
minTimeValue = None
maxTimeValue = None
currentTimestamp = None
currentDateTimeString = None
tableNotUsed = [
    'android_metadata', 'sqlite_sequence', 'spatialite_history',
    'idx_signalling_geom_parent', 'idx_signalling_geom_node',
    'idx_signalling_geom_rowid', 'idx_signalling_geom',
    'views_layer_statistics', 'geometry_columns', 'spatial_ref_sys',
    'layer_statistics'
]
clickedLatLon = {"lat": 0, "lon": 0}
sliderLength = None
openedWindows = []
timeSlider = None
isSliderPlay = False

# Database select window


class Ui_DatabaseDialog(QDialog):
    def __init__(self):
        super(Ui_DatabaseDialog, self).__init__()
        self.setupUi(self)

    def setupUi(self, DatabaseDialog):
        DatabaseDialog.setObjectName("DatabaseDialog")
        DatabaseDialog.setWindowModality(QtCore.Qt.ApplicationModal)
        DatabaseDialog.resize(540, 90)
        DatabaseDialog.setMaximumSize(QtCore.QSize(540, 90))
        self.browseButton = QtWidgets.QPushButton(DatabaseDialog)
        self.browseButton.setGeometry(QtCore.QRect(420, 25, 113, 31))
        self.browseButton.setObjectName("browseButton")
        self.dbPath = QtWidgets.QTextEdit(DatabaseDialog)
        self.dbPath.setGeometry(QtCore.QRect(10, 30, 400, 21))
        self.dbPath.setObjectName("dbPath")
        self.buttonBox = QtWidgets.QDialogButtonBox(DatabaseDialog)
        self.buttonBox.setGeometry(QtCore.QRect(370, 56, 164, 32))
        self.buttonBox.setStandardButtons(QtWidgets.QDialogButtonBox.Cancel
                                          | QtWidgets.QDialogButtonBox.Ok)
        self.buttonBox.setObjectName("buttonBox")
        self.dbPathLabel = QtWidgets.QLabel(DatabaseDialog)
        self.dbPathLabel.setGeometry(QtCore.QRect(10, 10, 181, 16))
        self.dbPathLabel.setObjectName("dbPathLabel")

        self.retranslateUi(DatabaseDialog)
        QtCore.QMetaObject.connectSlotsByName(DatabaseDialog)

        self.browseButton.clicked.connect(self.getfiles)
        self.buttonBox.button(QtWidgets.QDialogButtonBox.Ok).clicked.connect(
            self.checkDatabase)
        self.buttonBox.button(
            QtWidgets.QDialogButtonBox.Cancel).clicked.connect(self.close)

    def retranslateUi(self, DatabaseDialog):
        _translate = QtCore.QCoreApplication.translate
        DatabaseDialog.setWindowTitle(_translate("DatabaseDialog", "Azenqos"))
        self.browseButton.setText(_translate("DatabaseDialog", "Browse.."))
        self.dbPathLabel.setText(
            _translate("DatabaseDialog", "Database path: ( .db, .sqlite )"))

    def getfiles(self):
        fileName, _ = QFileDialog.getOpenFileName(self, 'Single File',
                                                  QtCore.QDir.rootPath(),
                                                  '*.db *.sqlite')
        if fileName != "":
            baseFileName = os.path.basename(str(fileName))
            self.dbPath.setText(fileName)
            self.databasePath = fileName
        else:
            if self.dbPath.toPlainText() != "":
                self.databasePath = self.dbPath.toPlainText()

    def checkDatabase(self):
        self.addDatabase()
        if not azenqosDatabase.open():
            QtWidgets.QMessageBox.critical(
                None, "Cannot open database",
                "Unable to establish a database connection.\n"
                "This example needs SQLite support. Please read "
                "the Qt SQL driver documentation for information how "
                "to build it.\n\n"
                "Click Cancel to exit.", QtWidgets.QMessageBox.Cancel)
            return False
        else:
            # self.addLayerToQgis()
            self.getTimeForSlider()
            self.setCenterMap()
            QMessageBox.about(self, 'Connection result',
                              'Database is Connected, Enter the main menu')
            #getList()
            self.hide()
            self.azenqosMainMenu = AzenqosDialog()
            self.azenqosMainMenu.show()
            self.azenqosMainMenu.raise_()
            self.azenqosMainMenu.activateWindow()

    def getTimeForSlider(self):
        if azenqosDatabase is not None:
            azenqosDatabase.open()
        query = QSqlQuery()
        query.exec_(
            "SELECT MIN(time) as mintime, MAX(time) as maxtime FROM signalling"
        )
        while query.next():
            global minTimeValue
            global maxTimeValue
            global currentDateTimeString

            mintime = query.value(0)
            maxtime = query.value(1)

            minTimeValue = datetime.datetime.strptime(
                mintime, '%Y-%m-%d %H:%M:%S.%f').timestamp()

            maxTimeValue = datetime.datetime.strptime(
                maxtime, '%Y-%m-%d %H:%M:%S.%f').timestamp()

            currentDateTimeString = '%s' % (
                datetime.datetime.fromtimestamp(minTimeValue))

        azenqosDatabase.close()

        self.setIncrementValue()

    def addDatabase(self):
        global azenqosDatabase
        azenqosDatabase = QSqlDatabase.addDatabase("QSQLITE")
        azenqosDatabase.setDatabaseName(self.databasePath)

    # def addLayerToQgis(self):
    #     QgsProject.removeAllMapLayers(QgsProject.instance())
    #     # urlWithParams = 'type=xyz&url=http://a.tile.openstreetmap.org/%7Bz%7D/%7Bx%7D/%7By%7D.png&zmax=19&zmin=0&crs=EPSG3857'
    #     urlWithParams = 'contextualWMSLegend=0&crs=EPSG:4326&dpiMode=7&featureCount=10&format=image/tiff&layers=longdo_icons&styles&url=http://ms.longdo.com/mapproxy/service'
    #     rlayer = QgsRasterLayer(urlWithParams, 'Longdo Map Icons', 'wms')
    #     if rlayer.isValid():
    #         QgsProject.instance().addMapLayer(rlayer)
    #     else:
    #         print('invalid layer')
    #     uri =QgsDataSourceUri()
    #     uri.setDatabase(self.databasePath)
    #     azenqosDatabase.open()
    #     query = QSqlQuery()
    #     query.exec_("SELECT table_name FROM layer_statistic")
    #     while query.next():
    #         if query.value(0) not in tableNotUsed:
    #             uri.setDataSource('', query.value(0), 'geom')
    #             vlayer = QgsVectorLayer(uri.uri(), query.value(0), 'spatialite')
    #             QgsProject.instance().addMapLayer(vlayer)
    #     azenqosDatabase.close()

    def setIncrementValue(self):
        if azenqosDatabase is not None:
            azenqosDatabase.open()
        query = QSqlQuery()
        query.exec_("SELECT count(distinct time) FROM signalling")
        while query.next():
            timeCount = query.value(0)
        global sliderLength
        sliderLength = maxTimeValue - minTimeValue      
        azenqosDatabase.close()

    def setCenterMap(self):
        if azenqosDatabase is not None:
            azenqosDatabase.open()
        query = QSqlQuery()
        query.exec_(
            "SELECT positioning_lat as lat, positioning_lon as lon FROM location limit 1"
        )
        while query.next():
            lat = float(query.value(0))
            lon = float(query.value(1))
        azenqosDatabase.close()
        # canvas = iface.mapCanvas()
        # canvas.zoomScale(100000)
        # canvas.zoomWithCenter(lon, lat, False)


class AzenqosDialog(QDialog):
    def __init__(self):
        """Constructor."""
        super(AzenqosDialog, self).__init__(None)
        self.setupUi(self)
        self.raise_()
        self.activateWindow()

    def setupUi(self, AzenqosDialog):
        global timeSlider
        AzenqosDialog.setObjectName("AzenqosDialog")
        AzenqosDialog.resize(640, 480)

        self.setupTreeWidget(AzenqosDialog)

        # Time Slider
        timeSlider = TimeSlider(AzenqosDialog)
        timeSlider.setGeometry(QtCore.QRect(300, 56, 150, 22))
        sizePolicy = QSizePolicy(QSizePolicy.Expanding, QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(
            timeSlider.sizePolicy().hasHeightForWidth())
        timeSlider.setSizePolicy(sizePolicy)
        timeSlider.setBaseSize(QtCore.QSize(500, 0))
        timeSlider.setPageStep(1)
        timeSlider.setSliderPosition(0)
        timeSlider.setOrientation(QtCore.Qt.Horizontal)
        timeSlider.setObjectName("timeSlider")
        timeSlider.setTracking(True)
        timeSlider.setRange(0,int(sliderLength))

        # Datetime Textbox
        self.timeEdit = QDateTimeEdit(AzenqosDialog)
        self.timeEdit.setGeometry(QtCore.QRect(480, 56, 140, 22))
        self.timeEdit.setObjectName("timeEdit")
        self.timeEdit.setDisplayFormat("hh:mm:ss")
        self.timeEdit.setDateTime(
            datetime.datetime.fromtimestamp(minTimeValue))

        # Time label
        self.timeSliderLabel = QLabel(AzenqosDialog)
        self.timeSliderLabel.setGeometry(QtCore.QRect(300, 30, 100, 16))
        self.timeSliderLabel.setObjectName("timeSliderLabel")

        self.setupPlayStopButton(AzenqosDialog)

        # Import Database Button
        self.importDatabaseBtn = QPushButton(AzenqosDialog)
        self.importDatabaseBtn.setGeometry(QtCore.QRect(300, 140, 181, 32))
        self.importDatabaseBtn.setObjectName("importDatabaseBtn")

        # Filter Button
        self.filterBtn = QPushButton(AzenqosDialog)
        self.filterBtn.setGeometry(QtCore.QRect(300, 190, 181, 32))
        self.filterBtn.setObjectName("filterBtn")

        self.retranslateUi(AzenqosDialog)
        QtCore.QMetaObject.connectSlotsByName(AzenqosDialog)

        timeSlider.valueChanged.connect(self.timeChange)
        self.importDatabaseBtn.clicked.connect(self.importDatabase)
        # self.filterBtn.clicked.connect(self.playTime)

    def retranslateUi(self, AzenqosDialog):
        _translate = QtCore.QCoreApplication.translate
        AzenqosDialog.setWindowTitle(
            _translate("AzenqosDialog", "Azenqos Main Menu"))
        self.presentationTreeWidget.headerItem().setText(
            0, _translate("AzenqosDialog", "Presentation"))
        __sortingEnabled = self.presentationTreeWidget.isSortingEnabled()
        self.presentationTreeWidget.setSortingEnabled(False)
        self.presentationTreeWidget.setSortingEnabled(__sortingEnabled)
        self.configurationTreeWidget.headerItem().setText(
            0, _translate("AzenqosDialog", "Configuration"))
        self.configurationTreeWidget.setSortingEnabled(False)
        self.configurationTreeWidget.setSortingEnabled(__sortingEnabled)
        self.importDatabaseBtn.setText(
            _translate("AzenqosDialog", "Import Database"))
        self.filterBtn.setText(_translate("AzenqosDialog", "Filter"))
        self.timeSliderLabel.setText(_translate("AzenqosDialog", "Time:"))

    def setupTreeWidget(self, AzenqosDialog):
        # Presentation Tree Widget
        self.presentationTreeWidget = QTreeWidget(AzenqosDialog)
        self.presentationTreeWidget.setGeometry(QtCore.QRect(20, 20, 260, 300))
        self.presentationTreeWidget.setFrameShape(QFrame.StyledPanel)
        self.presentationTreeWidget.setAllColumnsShowFocus(True)
        self.presentationTreeWidget.setObjectName("presentationTreeWidget")
        self.presentationTreeWidget.itemDoubleClicked.connect(
            self.loadAllMessages)

        # WCDMA Section
        wcdma = QTreeWidgetItem(self.presentationTreeWidget, ['WCDMA'])
        wcdmaActiveMonitoredSets = QTreeWidgetItem(wcdma,
                                                   ['Active + Monitored Sets'])
        wcdmaRadioParams = QTreeWidgetItem(wcdma, ['Radio Parameters'])
        wcdmaASL = QTreeWidgetItem(wcdma, ['Active Set List'])
        wcdmaMonitoredSet = QTreeWidgetItem(wcdma, ['Monitored Set List'])
        wcdmaSummary = QTreeWidgetItem(wcdma, ['BLER Summary'])
        wcdmaTransportChannel = QTreeWidgetItem(wcdma,
                                                ['BLER / Transport Channel'])
        wcdmaLineChart = QTreeWidgetItem(wcdma, ['Line Chart'])
        wcdmaBearers = QTreeWidgetItem(wcdma, ['Bearers'])
        wcdmaPilotPoluting = QTreeWidgetItem(wcdma, ['Pilot Poluting Cells'])
        wcdmaActiveMonitoredBar = QTreeWidgetItem(wcdma,
                                                  ['Active + Monitored Bar'])
        wcdmaReports = QTreeWidgetItem(wcdma, ['CM GSM Reports'])
        wcdmaCells = QTreeWidgetItem(wcdma, ['CM GSM Cells'])
        wcdmaPilotAnalyzer = QTreeWidgetItem(wcdma, ['Pilot Analyzer'])

        # LTE Section
        lte = QTreeWidgetItem(self.presentationTreeWidget, ['LTE'])
        lteRadioParams = QTreeWidgetItem(lte, ['Radio Parameters'])
        lteServingNeighbors = QTreeWidgetItem(lte, ['Serving + Neighbors'])
        ltePPParams = QTreeWidgetItem(lte, ['PUCCH/PDSCH Parameters'])
        lteLineChart = QTreeWidgetItem(lte, ['LTE Line Chart'])
        lteRlc = QTreeWidgetItem(lte, ['LTE RLC'])
        lteVo = QTreeWidgetItem(lte, ['LTE VoLTE'])

        # CDMA/EVDO Section
        cdmaEvdo = QTreeWidgetItem(self.presentationTreeWidget, ['CDMA/EVDO'])
        cdmaEvdoRadioParams = QTreeWidgetItem(cdmaEvdo, ['Radio Parameters'])
        cdmaEvdoServingNeighbors = QTreeWidgetItem(cdmaEvdo,
                                                   ['Serving + Neighbors'])
        cdmaEvdoParams = QTreeWidgetItem(cdmaEvdo, ['EVDO Parameters'])

        # Data Section
        data = QTreeWidgetItem(self.presentationTreeWidget, ['Data'])
        # dataGsmLineChart = QTreeWidgetItem(data, ['GSM Data Line Chart'])
        dataWcdmaLineChart = QTreeWidgetItem(data, ['WCDMA Data Line Chart'])
        dataEdgeInfo = QTreeWidgetItem(data, ['GPRS/EDGE Information'])
        dataWebBrowser = QTreeWidgetItem(data, ['Web Browser'])
        dataStats = QTreeWidgetItem(data, ['HSDPA/HSPA + Statistics'])
        dataHsupaStats = QTreeWidgetItem(data, ['HSUPA Statistics'])
        dataLteStats = QTreeWidgetItem(data, ['LTE Data Statistics'])
        dataLteLineChart = QTreeWidgetItem(data, ['LTE Data Line Chart'])
        dataWifiConnectedAp = QTreeWidgetItem(data, ['Wifi Connected AP'])
        dataWifiScannedAp = QTreeWidgetItem(data, ['Wifi Scanned APs'])
        dataWifiGraph = QTreeWidgetItem(data, ['Wifi Graph'])

        # Signaling Section
        signaling = QTreeWidgetItem(self.presentationTreeWidget, ['Signaling'])
        signalingEvents = QTreeWidgetItem(signaling, ['Events'])
        signalingLayerOne = QTreeWidgetItem(signaling, ['Layer 1 Messages'])
        signalingLayerThree = QTreeWidgetItem(signaling, ['Layer 3 Messages'])
        signalingBenchmark = QTreeWidgetItem(signaling, ['Benchmark'])
        signalingMM = QTreeWidgetItem(signaling, ['MM Reg States'])
        signalingSystemInfo = QTreeWidgetItem(signaling,
                                              ['Serving System Info'])
        signalingDebug = QTreeWidgetItem(signaling, ['Debug Android/Event'])

        # Positioning Section
        positioning = QTreeWidgetItem(self.presentationTreeWidget,
                                      ['Positioning'])
        positioningGps = QTreeWidgetItem(positioning, ['GPS'])
        positioningMap = QTreeWidgetItem(positioning, ['Map'])
        positioningPositioning = QTreeWidgetItem(positioning, ['Positioning'])

        # Customized Window Section
        customizedWindow = QTreeWidgetItem(self.presentationTreeWidget,
                                           ['Customized Window'])
        customizedWindowStatus = QTreeWidgetItem(customizedWindow,
                                                 ['Status Window'])
        customizedWindowMessage = QTreeWidgetItem(customizedWindow,
                                                  ['Message Window'])
        customizedWindowChart = QTreeWidgetItem(customizedWindow,
                                                ['Line Chart'])
        #
        # # NB-IoT Section
        nBIoT = QTreeWidgetItem(self.presentationTreeWidget, ['NB-IoT'])
        nBIoTParams = QTreeWidgetItem(nBIoT,
                                      ['NB-IoT Radio Parameters Window'])

        self.presentationTreeWidget.header().setCascadingSectionResizes(True)
        self.presentationTreeWidget.header().setHighlightSections(True)

        # Configuration
        self.configurationTreeWidget = QTreeWidget(AzenqosDialog)
        self.configurationTreeWidget.setGeometry(
            QtCore.QRect(20, 320, 260, 100))
        self.configurationTreeWidget.setFrameShape(QFrame.StyledPanel)
        self.configurationTreeWidget.setAllColumnsShowFocus(True)
        self.configurationTreeWidget.setObjectName("configurationTreeWidget")
        cellInformation = QTreeWidgetItem(self.configurationTreeWidget,
                                          ['Cell Information'])
        equipmentConfiguration = QTreeWidgetItem(self.configurationTreeWidget,
                                                 ['Equipment Configuration'])
        self.configurationTreeWidget.itemDoubleClicked.connect(
            self.selectConfiguration)

    def setupPlayStopButton(self, AzenqosDialog):
        # todo ยังไม่เสร็จ
        self.horizontalLayout = QWidget(AzenqosDialog)
        self.horizontalLayout.setGeometry(QtCore.QRect(290, 70, 90, 48))
        self.playButton = QToolButton()
        self.playButton.setIcon(self.style().standardIcon(QStyle.SP_MediaPlay))
        self.pauseButton = QToolButton()
        self.pauseButton.setIcon(self.style().standardIcon(
            QStyle.SP_MediaPause))
        layout = QHBoxLayout(self.horizontalLayout)
        layout.addStretch(1)
        layout.addWidget(self.playButton)
        layout.addWidget(self.pauseButton)
        self.playButton.clicked.connect(self.playTime)
        self.pauseButton.clicked.connect(self.pauseTime)

    def playTime(self):
        # todo ยังไม่เสร็จ
        #timeSlider.setRange(timeSlider.value(),int(sliderLength))
        global isSliderPlay
        isSliderPlay = True
        if isSliderPlay:        
            for x in range(int(sliderLength)):                         
                if not isSliderPlay:
                    #QApplication.exec_()
                    break         
                else:
                    time.sleep(0.5)          
                    value = timeSlider.value() + 1  
                    self.addTime(value) 
                    QApplication.processEvents()                
        isSliderPlay = False  

    def pauseTime(self):
        global isSliderPlay
        isSliderPlay = False
        QApplication.exec_()       

    def addTime(self, value):
        #self.timeChange()
        timeSlider.setValue(value)
        timeSlider.repaint()

    def loadAllMessages(self):
        getSelected = self.presentationTreeWidget.selectedItems()
        if getSelected:
            baseNode = getSelected[0]
            if baseNode.text(0) is not None:
                getChildNode = baseNode.text(0)
                getParentNode = baseNode.parent().text(0)
                self.classifySelectedItems(getParentNode, getChildNode)

    def importDatabase(self):
        self.databaseDialog = Ui_DatabaseDialog()
        self.databaseDialog.show()
        self.hide()

    def timeChange(self):
        global currentTimestamp
        global timeSlider
        global currentDateTimeString
        value = timeSlider.value()
        timestampValue = minTimeValue + value
        sampledate = datetime.datetime.fromtimestamp(timestampValue)
        self.timeEdit.setDateTime(sampledate)
        currentTimestamp = timestampValue
        timeSlider.update()
        linechartWindowname = ['WCDMA_Line Chart','LTE_LTE Line Chart','Data_WCDMA Data Line Chart','Data_LTE Data Line Chart']
        for window in openedWindows:
            if not window.title in linechartWindowname:
                window.hilightRow(sampledate)
            else:      
                window.moveChart(sampledate)    
        currentDateTimeString = '%s' % (
            datetime.datetime.fromtimestamp(currentTimestamp))

    def classifySelectedItems(self, parent, child):
        global openedWindows
        windowName = parent + "_" + child
        if parent == "WCDMA":
            if child == "Active + Monitored Sets":
                if hasattr(self, 'wcdma_ams_window'):
                    self.wcdma_ams_window.show()
                else:
                    self.wcdma_ams_window = TableWindow(windowName)
                    openedWindows.append(self.wcdma_ams_window)
                    self.wcdma_ams_window.show()
            elif child == "Radio Parameters":
                if hasattr(self, 'wcdma_rp_window'):
                    self.wcdma_rp_window.show()
                else:
                    self.wcdma_rp_window = TableWindow(windowName)
                    openedWindows.append(self.wcdma_rp_window)
                    self.wcdma_rp_window.show()
            elif child == "Active Set List":
                if hasattr(self, 'wcdma_asl_window'):
                    self.wcdma_asl_window.show()
                else:
                    self.wcdma_asl_window = TableWindow(windowName)
                    openedWindows.append(self.wcdma_asl_window)
                    self.wcdma_asl_window.show()
            elif child == "Monitored Set List":
                if hasattr(self, 'wcdma_msl_window'):
                    self.wcdma_msl_window.show()
                else:
                    self.wcdma_msl_window = TableWindow(windowName)
                    openedWindows.append(self.wcdma_msl_window)
                    self.wcdma_msl_window.show()
            elif child == "BLER Summary":
                if hasattr(self, 'wcdma_bler_window'):
                    self.wcdma_bler_window.show()
                else:
                    self.wcdma_bler_window = TableWindow(windowName)
                    openedWindows.append(self.wcdma_bler_window)
                    self.wcdma_bler_window.show()
            elif child == "BLER / Transport Channel":
                if hasattr(self, 'wcdma_blertc_window'):
                    self.wcdma_blertc_window.show()
                else:
                    self.wcdma_blertc_window = TableWindow(windowName)
                    openedWindows.append(self.wcdma_blertc_window)
                    self.wcdma_blertc_window.show()
            elif child == "Line Chart":
                if hasattr(self, 'wcdma_lc_window'):
                    self.wcdma_lc_window.show()
                else:
                    self.wcdma_lc_window = Ui_WCDMA_LCwidget(windowName)
                    openedWindows.append(self.wcdma_lc_window)
                    self.wcdma_lc_window.show()
            elif child == "Bearers":
                if hasattr(self, 'wcdma_bearer_window'):
                    self.wcdma_bearer_window.show()
                else:
                    self.wcdma_bearer_window = TableWindow(windowName)
                    openedWindows.append(self.wcdma_bearer_window)
                    self.wcdma_bearer_window.show()
            elif child == "Pilot Poluting Cells":
                if hasattr(self, 'wcdma_ppc_window'):
                    self.wcdma_ppc_window.show()
                else:
                    self.wcdma_ppc_window = TableWindow(windowName)
                    openedWindows.append(self.wcdma_ppc_window)
                    self.wcdma_ppc_window.show()
            elif child == "Active + Monitored Bar":
                if hasattr(self, 'wcdma_amb_window'):
                    self.wcdma_amb_window.show()
                else:
                    self.wcdma_amb_window = TableWindow(windowName)
                    openedWindows.append(self.wcdma_amb_window)
                    self.wcdma_amb_window.show()
            elif child == "CM GSM Reports":
                if hasattr(self, 'wcdma_report_window'):
                    self.wcdma_report_window.show()
                else:
                    self.wcdma_report_window = TableWindow(windowName)
                    openedWindows.append(self.wcdma_report_window)
                    self.wcdma_report_window.show()
            elif child == "CM GSM Cells":
                if hasattr(self, 'wcdma_cells_window'):
                    self.wcdma_cells_window.show()
                else:
                    self.wcdma_cells_window = TableWindow(windowName)
                    openedWindows.append(self.wcdma_cells_window)
                    self.wcdma_cells_window.show()
            elif child == "Pilot Analyzer":
                if hasattr(self, 'wcdma_analyzer_window'):
                    self.wcdma_analyzer_window.show()
                else:
                    self.wcdma_analyzer_window = TableWindow(windowName)
                    openedWindows.append(self.wcdma_analyzer_window)
                    self.wcdma_analyzer_window.show()
        elif parent == "LTE":
            if child == "Radio Parameters":
                if hasattr(self, 'lte_param_window'):
                    self.lte_param_window.show()
                else:
                    self.lte_param_window = TableWindow(windowName)
                    openedWindows.append(self.lte_param_window)
                    self.lte_param_window.show()
            elif child == "Serving + Neighbors":
                if hasattr(self, 'lte_sn_window'):
                    self.lte_sn_window.show()
                else:
                    self.lte_sn_window = TableWindow(windowName)
                    openedWindows.append(self.lte_sn_window)
                    self.lte_sn_window.show()
            elif child == "PUCCH/PDSCH Parameters":
                if hasattr(self, 'lte_ppparam_window'):
                    self.lte_ppparam_window.show()
                else:
                    self.lte_ppparam_window = TableWindow(windowName)
                    openedWindows.append(self.lte_ppparam_window)
                    self.lte_ppparam_window.show()
            elif child == "LTE Line Chart":
                if hasattr(self, 'lte_lc_window'):
                    self.lte_lc_window.show()
                else:
                    self.lte_lc_window = Ui_LTE_LCwidget(windowName)
                    openedWindows.append(self.lte_lc_window)
                    self.lte_lc_window.show()
            elif child == "LTE RLC":
                if hasattr(self, 'lte_rlc_window'):
                    self.lte_rlc_window.show()
                else:
                    self.lte_rlc_window = TableWindow(windowName)
                    openedWindows.append(self.lte_rlc_window)
                    self.lte_rlc_window.show()
            elif child == "LTE VoLTE":
                if hasattr(self, 'lte_volte_window'):
                    self.lte_volte_window.show()
                else:
                    self.lte_volte_window = TableWindow(windowName)
                    openedWindows.append(self.lte_volte_window)
                    self.lte_volte_window.show()
        elif parent == "CDMA/EVDO":
            if child == "Radio Parameters":
                if hasattr(self, 'cdma_rp_window'):
                    self.cdma_rp_window.show()
                else:
                    self.cdma_rp_window = TableWindow(windowName)
                    openedWindows.append(self.cdma_rp_window)
                    self.cdma_rp_window.show()
            elif child == "Serving + Neighbors":
                if hasattr(self, 'cdma_sn_window'):
                    self.cdma_sn_window.show()
                else:
                    self.cdma_sn_window = TableWindow(windowName)
                    openedWindows.append(self.cdma_sn_window)
                    self.cdma_sn_window.show()
            elif child == "EVDO Parameters":
                if hasattr(self, 'cdma_evdo_window'):
                    self.cdma_evdo_window.show()
                else:
                    self.cdma_evdo_window = TableWindow(windowName)
                    openedWindows.append(self.cdma_evdo_window)
                    self.cdma_evdo_window.show()
        elif parent == "Data":
            if child == "WCDMA Data Line Chart":
                if hasattr(self, 'wcdma_data_lc'):
                    self.wcdma_data_lc.show()
                else:
                    self.wcdma_data_lc = Ui_WCDMA_Data_LCwidget(windowName)
                    openedWindows.append(self.wcdma_data_lc)
                    self.wcdma_data_lc.show()
            elif child == "GPRS/EDGE Information":
                if hasattr(self, 'gprs_info'):
                    self.gprs_info.show()
                else:
                    self.gprs_info = TableWindow(windowName)
                    openedWindows.append(self.gprs_info)
                    self.gprs_info.show()
            elif child == "Web Browser":
                if hasattr(self, 'web_browser'):
                    self.web_browser.show()
                else:
                    self.web_browser = TableWindow(windowName)
                    openedWindows.append(self.web_browser)
                    self.web_browser.show()
            elif child == "HSDPA/HSPA + Statistics":
                if hasattr(self, 'hsdpa_stat'):
                    self.hsdpa_stat.show()
                else:
                    self.hsdpa_stat = TableWindow(windowName)
                    openedWindows.append(self.hsdpa_stat)
                    self.hsdpa_stat.show()
            elif child == "HSUPA Statistics":
                if hasattr(self, 'hsupa_stat'):
                    self.hsupa_stat.show()
                else:
                    self.hsupa_stat = TableWindow(windowName)
                    openedWindows.append(self.hsupa_stat)
                    self.hsupa_stat.show()
            elif child == "LTE Data Statistics":
                if hasattr(self, 'lte_data_stat'):
                    self.lte_data_stat.show()
                else:
                    self.lte_data_stat = TableWindow(windowName)
                    openedWindows.append(self.lte_data_stat)
                    self.lte_data_stat.show()
            elif child == "LTE Data Line Chart":
                if hasattr(self, 'lte_data_lc'):
                    self.lte_data_lc.show()
                else:
                    self.lte_data_lc = Ui_LTE_Data_LCwidget(windowName)
                    openedWindows.append(self.lte_data_lc)
                    self.lte_data_lc.show()
            elif child == "Wifi Connected AP":
                if hasattr(self, 'wifi_connected_ap'):
                    self.wifi_connected_ap.show()
                else:
                    self.wifi_connected_ap = TableWindow(windowName)
                    openedWindows.append(self.wifi_connected_ap)
                    self.wifi_connected_ap.show()
            elif child == "Wifi Scanned APs":
                if hasattr(self, 'wifi_scanned_ap'):
                    self.wifi_scanned_ap.show()
                else:
                    self.wifi_scanned_ap = TableWindow(windowName)
                    openedWindows.append(self.wifi_scanned_ap)
                    self.wifi_scanned_ap.show()
            elif child == "Wifi Graph":
                if hasattr(self, 'wifi_graph'):
                    self.wifi_graph.show()
                else:
                    self.wifi_graph = TableWindow(windowName)
                    openedWindows.append(self.wifi_graph)
                    self.wifi_graph.show()
        elif parent == "Signaling":
            if child == "Events":
                if hasattr(self, 'events_window'):
                    self.events_window.show()
                else:
                    self.events_window = TableWindow(windowName)
                    openedWindows.append(self.events_window)
                    self.events_window.show()
            elif child == "Layer 1 Messages":
                if hasattr(self, 'layer_one_messages'):
                    self.layer_one_messages.show()
                else:
                    self.layer_one_messages = TableWindow(windowName)
                    openedWindows.append(self.layer_one_messages)
                    self.layer_one_messages.show()
            elif child == "Layer 3 Messages":
                if hasattr(self, 'layer_three_messages'):
                    self.layer_three_messages.show()
                else:
                    self.layer_three_messages = TableWindow(windowName)
                    openedWindows.append(self.layer_three_messages)
                    self.layer_three_messages.show()
            elif child == "Benchmark":
                if hasattr(self, 'benchmark'):
                    self.benchmark.show()
                else:
                    self.benchmark = TableWindow(windowName)
                    openedWindows.append(self.benchmark)
                    self.benchmark.show()
            elif child == "MM Reg States":
                if hasattr(self, 'mm_reg_states'):
                    self.mm_reg_states.show()
                else:
                    self.mm_reg_states = TableWindow(windowName)
                    openedWindows.append(self.mm_reg_states)
                    self.mm_reg_states.show()
            elif child == "Serving System Info":
                if hasattr(self, 'serving_system_info'):
                    self.serving_system_info.show()
                else:
                    self.serving_system_info = TableWindow(windowName)
                    openedWindows.append(self.serving_system_info)
                    self.serving_system_info.show()
            elif child == "Debug Android/Event":
                if hasattr(self, 'debug_event'):
                    self.debug_event.show()
                else:
                    self.debug_event = TableWindow(windowName)
                    openedWindows.append(self.debug_event)
                    self.debug_event.show()
        # if parent == ''
        # elif parent == "Positioning":
        #     if child == "GPS":
        #         print("1")
        #     elif child == "Map":
        #         print("2")
        #     elif child == "Positioning":
        #         print("3")
        # elif parent == "Customized Window":
        #     if child == "Status Window":
        #         print("1")
        #     elif child == "Message Window":
        #         print("2")
        #     elif child == "Line Chart":
        #         print("3")
        # elif parent == "NB-IoT":
        #     if child == "NB-IoT Radio Parameters Window":
        #         print("1")

    def selectConfiguration(self):
        getSelected = self.configurationTreeWidget.selectedItems()
        if getSelected:
            baseNode = getSelected[0]
            print(baseNode)
            if baseNode.text(0) is not None:
                getChildNode = baseNode.text(0)
                if getChildNode == 'Cell Information':
                    self.cell_information = CellInformation(self)
                    self.cell_information.show()
                elif getChildNode == 'Equipment Configuration':
                    pass


class TimeSlider(QSlider): ##
    def __init__(self, parent=None):
        super().__init__(parent)

        # Set integer max and min on parent. These stay constant.
        # self._min_int = minTimeValue
        super().setMinimum(0)
        self._max_int = sliderLength
        super().setMaximum(self._max_int)
        # The "actual" min and max values seen by user.
        self._min_value = 0.0
        self._max_value = self._max_int

    @property
    def _value_range(self):
        return self._max_value - self._min_value

    def value(self):
        thisValue = float(super().value())
        value = thisValue / self._max_int * self._value_range
        return value

    def setValue(self, value):
        resultValue = int(value / self._value_range * self._max_int)
        super().setValue(resultValue)
        super().repaint()

    def setMinimum(self, value):
        self.setRange(value, self._max_value)

    def setMaximum(self, value):
        self.setRange(self._min_value, value)

    def setRange(self, minimum, maximum):
        old_value = self.value()
        self._min_value = minimum
        self._max_value = maximum
        self.setValue(old_value)  # Put slider in correct position

    def proportion(self):
        return (self.value() - self._min_value) / self._value_range


class TableWindow(QDialog):
    def __init__(self, windowName):
        super(TableWindow, self).__init__()
        self.title = windowName
        self.tableHeader = None
        self.left = 10
        self.top = 10
        self.width = 640
        self.height = 480
        self.dataList = []
        self.setupUi()

    def setupUi(self):
        self.setObjectName(self.title)
        self.setWindowTitle(self.title)
        self.tableView = QTableView(self)
        self.tableView.horizontalHeader().setSortIndicator(
            -1, Qt.AscendingOrder)
        self.specifyTablesHeader()
        layout = QVBoxLayout(self)
        layout.addWidget(self.tableView)
        self.setLayout(layout)
        self.raise_()
        self.activateWindow()

    def setTableModel(self, dataList):
        self.tableModel = TableModel(dataList, self.tableHeader, self)
        self.proxyModel = QtCore.QSortFilterProxyModel()
        self.proxyModel.setSourceModel(self.tableModel)
        self.tableView.setModel(self.proxyModel)
        self.tableView.setSortingEnabled(True)
        self.tableView.resizeColumnsToContents()

    def specifyTablesHeader(self):
        if self.title is not None:
            # WCDMA
            if self.title == 'WCDMA_Active + Monitored Sets':
                self.tableHeader = [
                    "Time", "CellName", "CellType", "SC", "Ec/Io", "RSCP",
                    "Freq", "Event"
                ]
                self.dataList = WcdmaDataQuery().getActiveMonitoredSets()
            elif self.title == 'WCDMA_Radio Parameters':
                self.tableHeader = ["Element", "Value"]
                self.dataList = WcdmaDataQuery().getRadioParameters()
            elif self.title == 'WCDMA_Active Set List':
                self.tableHeader = [
                    "Time", "Freq", "PSC", "Cell Position", "Cell TPC",
                    "Diversity"
                ]
                self.dataList = WcdmaDataQuery().getActiveSetList()
            elif self.title == 'WCDMA_Monitored Set List':
                self.tableHeader = [
                    "Time", "Freq", "PSC", "Cell Position", "Diversity"
                ]
                self.dataList = WcdmaDataQuery().getMonitoredSetList()
            elif self.title == 'WCDMA_BLER Summary':
                self.tableHeader = ["Element", "Value"]
                self.dataList = WcdmaDataQuery().getBlerSummary()
            elif self.title == 'WCDMA_BLER / Transport Channel':
                self.tableHeader = [
                    "Transport Channel", "Percent", "Err", "Rcvd"
                ]
                self.dataList = WcdmaDataQuery().getBLER_TransportChannel()
            elif self.title == 'WCDMA_Line Chart':
                self.tableHeader = ["Element", "Value", "MS", "Color"]
            elif self.title == 'WCDMA_Bearers':
                self.tableHeader = [
                    "N Bearers", "Bearers ID", "Bearers Rate DL",
                    "Bearers Rate UL"
                ]
                self.dataList = WcdmaDataQuery().getBearers()
            elif self.title == 'WCDMA_Pilot Poluting Cells':
                self.tableHeader = ["Time", "N Cells", "SC", "RSCP", "Ec/Io"]
                self.dataList = WcdmaDataQuery().getPilotPolutingCells()
            elif self.title == 'WCDMA_Active + Monitored Bar':
                self.tableHeader = ["Cell Type", "Ec/Io", "RSCP"]
                self.dataList = WcdmaDataQuery().getActiveMonitoredBar()
            elif self.title == 'WCDMA_CM GSM Reports':
                self.tableHeader = ["Time", "", "Eq.", "Name", "Info."]

            elif self.title == 'WCDMA_CM GSM Cells':
                self.tableHeader = [
                    "Time", "ARFCN", "RxLev", "BSIC", "Measure"
                ]
                self.dataList = WcdmaDataQuery().getCmGsmCells()
            elif self.title == 'WCDMA_Pilot Analyzer':
                self.tableHeader = ["Element", "Value", "Cell Type", "Color"]

            # LTE
            elif self.title == 'LTE_Radio Parameters':
                self.tableHeader = ["Element", "PCC", "SCC0", "SCC1"]
                self.dataList = LteDataQuery().getRadioParameters()
            elif self.title == 'LTE_Serving + Neighbors':
                self.tableHeader = [
                    "Time", "EARFCN", "Band", "PCI", "RSRP", "RSRQ"
                ]
                self.dataList = LteDataQuery().getServingAndNeighbors()
            elif self.title == 'LTE_PUCCH/PDSCH Parameters':
                self.tableHeader = ["Element", "Value"]
                self.dataList = LteDataQuery().getPucchPdschParameters()
            elif self.title == 'LTE_LTE Line Chart':
                self.tableHeader = ["Element", "Value", "MS", "Color"]
            elif self.title == 'LTE_LTE RLC':
                self.tableHeader = ["Element", "Value", "", "", ""]
                self.dataList = LteDataQuery().getRlc()
            elif self.title == 'LTE_LTE VoLTE':
                self.tableHeader = ["Element", "Value"]
                self.dataList = LteDataQuery().getVolte()

            # CDMA/EVDO
            elif self.title == 'CDMA/EVDO_Radio Parameters':
                self.tableHeader = ["Element", "Value"]
            elif self.title == 'CDMA/EVDO_Serving + Neighbors':
                self.tableHeader = ["Time", "PN", "Ec/Io", "Type"]
            elif self.title == 'CDMA/EVDO_EVDO Parameters':
                self.tableHeader = ["Element", "Value"]

            # Data
            elif self.title == 'Data_GSM Data Line Chart':
                self.tableHeader = ["Element", "Value", "MS", "Color"]
            elif self.title == 'Data_WCDMA Data Line Chart':
                self.tableHeader = ["Element", "Value", "MS", "Color"]
            elif self.title == 'Data_GPRS/EDGE Information':
                self.tableHeader = ["Element", "Value"]
            elif self.title == 'Data_Web Browser':
                self.tableHeader = ["Type", "Object"]
                self.windowHeader = ["ID", "URL", "Type", "State", "Size(%)"]
            elif self.title == 'Data_HSDPA/HSPA + Statistics':
                self.tableHeader = ["Element", "Value"]
            elif self.title == 'Data_HSUPA Statistics':
                self.tableHeader = ["Element", "Value"]
            elif self.title == 'Data_LTE Data Statistics':
                self.tableHeader = ["Element", "Value", "", ""]
            elif self.title == 'Data_LTE Data Line Chart':
                self.tableHeader = ["Element", "Value", "MS", "Color"]
            elif self.title == 'Data_Wifi Connected AP':
                self.tableHeader = ["Element", "Value"]
            elif self.title == 'Data_Wifi Scanned APs':
                self.tableHeader = [
                    "Time", "BSSID", "SSID", "Freq", "Ch.", "Level",
                    "Encryption"
                ]
            elif self.title == 'Data_Wifi Graph':
                return False

            # Signaling
            elif self.title == 'Signaling_Events':
                self.tableHeader = ["Time", "", "Eq.", "Name", "Info."]
                self.dataList = SignalingDataQuery().getEvents()
            elif self.title == 'Signaling_Layer 1 Messages':
                self.tableHeader = ["Time", "", "Eq.", "Name", "Info."]
                self.dataList = SignalingDataQuery().getLayerOneMessages()
            elif self.title == 'Signaling_Layer 3 Messages':
                self.tableHeader = ["Time", "", "Eq.", "", "Name", "Info."]

                self.dataList = SignalingDataQuery().getLayerThreeMessages()
            elif self.title == 'Signaling_Benchmark':
                self.tableHeader = ["", "MS1", "MS2", "MS3", "MS4"]
                self.dataList = SignalingDataQuery().getBenchmark()
            elif self.title == 'Signaling_MM Reg States':
                self.tableHeader = ["Element", "Value"]
                self.dataList = SignalingDataQuery().getMmRegStates()
            elif self.title == 'Signaling_Serving System Info':
                self.tableHeader = ["Element", "Value"]
                self.dataList = SignalingDataQuery().getServingSystemInfo()
            elif self.title == 'Signaling_Debug Android/Event':
                self.tableHeader = ["Element", "Value"]
                self.dataList = SignalingDataQuery().getDebugAndroidEvent()

            if self.dataList is not None:
                self.setTableModel(self.dataList)

    def hilightRow(self, sampledate):
        dateString = str(sampledate)
        model = self.tableView.model()
        self.specifyTablesHeader()
        data = []
        for row in range(model.rowCount()):
            index = model.index(row, 0)
            value = model.data(index)
            if value > dateString:
                self.tableView.selectRow(row - 1)
                break

    def reject(self):
        global openedWindows
        openedWindows.remove(self)
        self.hide()
        del self


class TableModel(QAbstractTableModel):
    def __init__(self, inputData, header, parent=None, *args):
        QAbstractTableModel.__init__(self, parent, *args)
        self.headerLabels = header
        self.dataSource = inputData
        # self.testColumnValue()

    def rowCount(self, parent):
        rows = 0
        if self.dataSource:
            rows = len(self.dataSource)
        return rows

    def columnCount(self, parent):
        columns = 0
        if self.headerLabels:
            columns = len(self.headerLabels)
        return columns

    def data(self, index, role):
        if not index.isValid():
            return QVariant()
        elif role != Qt.DisplayRole:
            return QVariant()
        return QVariant(self.dataSource[index.row()][index.column()])

    def headerData(self, section, orientation, role=Qt.DisplayRole):
        if role == Qt.DisplayRole and orientation == Qt.Horizontal:
            return self.headerLabels[section]
        return QAbstractTableModel.headerData(self, section, orientation, role)


class WcdmaDataQuery:  
    def __init__(self):
        self.timeFilter = ''
        if currentDateTimeString:
            self.timeFilter = currentDateTimeString

    def getActiveMonitoredSets(self):
        if azenqosDatabase is not None:
            azenqosDatabase.open()
        dataList = []
        condition = ''
        if self.timeFilter:
            condition = "WHERE time <= '%s'" % (self.timeFilter)
        selectedColumns = """time,wcdma_cellfile_matched_cellname_1,
                             wcdma_celltype_1,wcdma_sc_1,wcdma_ecio_1,wcdma_rscp_1,
	                         wcdma_cellfreq_1"""
        #ขาด Column Event
        queryString = """SELECT %s FROM wcdma_cells_combined %s ORDER BY time""" % (
            selectedColumns, condition)
        query = QSqlQuery()
        query.exec_(queryString)

        # Real Query Code (รันไม่ได้เพราะ no data in DB)
        #-----------------------------------------------
        # while query.next():
        #     timeValue = query.value(0)
        #     nameValue = query.value(1)
        #     typeValue = query.value(2)
        #     scValue = query.value(3)
        #     ecioValue = query.value(4)
        #     rscpValue = query.value(5)
        #     freqValue = query.value(6)
        #     #eventValue = query.value(eventField)
        #     dataList.append([timeValue, nameValue, typeValue, scValue, ecioValue, rscpValue,''])

        #Table Ui Test
        dataList.append([self.timeFilter, '', '', '', '', '', '', ''])
        azenqosDatabase.close()
        return dataList

    def getRadioParameters(self):
        if azenqosDatabase is not None:
            azenqosDatabase.open()
        dataList = []
        fieldsList = [
            'Time', 'Tx Power', 'Max Tx Power', 'RSSI', 'SIR', 'RRC State',
            'Cell ID', 'RNC ID'
        ]
        selectedColumns = """wtp.time,wtp.wcdma_txagc,wtp.wcdma_maxtxpwr,wrp.wcdma_rssi,sir.wcdma_sir,
                            rrc.wcdma_rrc_state,cel.wcdma_cellid,cel.wcdma_rnc_id"""
        condition = ''
        if self.timeFilter:
            condition = "WHERE wtp.time <= '%s'" % (self.timeFilter)
        queryString = """SELECT %s
                        FROM wcdma_tx_power wtp
                        LEFT JOIN wcdma_rx_power wrp ON wtp.time = wrp.time
                        LEFT JOIN wcdma_sir sir ON wtp.time = sir.time
                        LEFT JOIN wcdma_rrc_state rrc ON wtp.time = rrc.time
                        LEFT JOIN wcdma_idle_cell_info cel ON wtp.time = cel.time
                        %s
                        ORDER BY wtp.time DESC LIMIT 1""" % (selectedColumns,
                                                             condition)

        # Real Query Code (รันไม่ได้เพราะ no data in DB)
        #-----------------------------------------------
        # query = QSqlQuery()
        # query.exec_(queryString)
        # while query.next():
        #     for field in range(len(fieldsList)):
        #         if query.value(fieldsList):
        #             dataList.append([fieldsList[field],query.value(field)])
        #         else:
        #             dataList.append([fieldsList[field],''])

        #Table Ui Test
        dataList.append(['Time', self.timeFilter])
        for field in range(1, len(fieldsList)):
            dataList.append([fieldsList[field], ''])
        azenqosDatabase.close()
        return dataList

    def getMonitoredSetList(self):
        if azenqosDatabase is not None:
            azenqosDatabase.open()
        dataList = []
        condition = ''
        if self.timeFilter:
            condition = "WHERE time <= '%s'" % (self.timeFilter)

        selectedColumns = """time,wcdma_mset_cellfreq_1,wcdma_mset_sc_1"""
        #ขาด Column Cell Position และ Diversity
        queryString = """SELECT %s FROM wcdma_cell_meas %s ORDER BY time""" % (
            selectedColumns, condition)

        # Real Query Code (รันไม่ได้เพราะ no data in DB)
        #-----------------------------------------------
        # query = QSqlQuery()
        # query.exec_(queryString)
        # while query.next():
        #     timeValue = query.value(0)
        #     freqValue = query.value(1)
        #     pscValue = query.value(2)
        #     # celposValue = query.value(3)
        #     # diverValue = query.value(4)
        #     dataList.append([timeValue,freqValue,pscValue,'',''])

        #Table Ui Test
        dataList.append([self.timeFilter, '', '', '', '', ''])

        azenqosDatabase.close()
        return dataList

    def getActiveSetList(self):
        if azenqosDatabase is not None:
            azenqosDatabase.open()
        dataList = []
        condition = ''
        if self.timeFilter:
            condition = "WHERE wcm.time <= '%s'" % (self.timeFilter)

        selectedColumns = """wcm.time,wcm.wcdma_aset_cellfreq_1,wafl.wcdma_activeset_psc_1,
                            wafl.wcdma_activeset_cellposition_1,wafl.wcdma_activeset_celltpc_1,
                            wafl.wcdma_activeset_diversity_1"""
        queryString = """SELECT %s
                        FROM wcdma_cell_meas wcm
                        LEFT JOIN wcdma_aset_full_list wafl ON wcm.time = wafl.time
                        %s
                        ORDER BY wcm.time DESC""" % (selectedColumns,
                                                     condition)

        # Real Query Code (รันไม่ได้เพราะ no data in DB)
        #-----------------------------------------------
        # query = QSqlQuery()
        # query.exec_(queryString)
        # while query.next():
        #     timeValue = query.value(0)
        #     freqValue = query.value(1)
        #     pscValue = query.value(2)
        #     celposValue = query.value(3)
        #     tpcValue = query.value(4)
        #     diverValue = query.value(5)
        #     dataList.append([timeValue,freqValue,pscValue,celposValue,tpcValue,diverValue])

        #Table Ui Test
        dataList.append([self.timeFilter, '', '', '', '', ''])

        azenqosDatabase.close()
        return dataList

    def getBlerSummary(self):
        if azenqosDatabase is not None:
            azenqosDatabase.open()
        dataList = []
        fieldsList = [
            'Time', 'BLER Average Percent', 'BLER Calculation Window Size',
            'BLER N Transport Channels'
        ]
        condition = ''
        if self.timeFilter:
            condition = "WHERE wcm.time <= '%s'" % (self.timeFilter)

        queryString = """Select time,wcdma_bler_average_percent_all_channels,wcdma_bler_calculation_window_size,
                        wcdma_bler_n_transport_channels
                        FROM wcdma_bler
                        %s
                        ORDER BY time DESC LIMIT 1""" % (condition)

        # Real Query Code (รันไม่ได้เพราะ no data in DB)
        #-----------------------------------------------
        # query = QSqlQuery()
        # query.exec_(queryString)
        # while query.next():
        #     for field in range(len(fieldsList)):
        #         if query.value(fieldsList):
        #             dataList.append([fieldsList[field],query.value(field)])
        #         else:
        #             dataList.append([fieldsList[field],''])

        #Table Ui Test
        dataList.append(['Time', self.timeFilter])
        for field in range(1, len(fieldsList)):
            dataList.append([fieldsList[field], ''])
        azenqosDatabase.close()
        return dataList

    def getBLER_TransportChannel(self):
        if azenqosDatabase is not None:
            azenqosDatabase.open()
        dataList = []
        condition = ''
        maxChannel = 16

        if self.timeFilter:
            condition = "WHERE time <= '%s'" % (self.timeFilter)
        for channel in range(1, maxChannel):
            queryString = """SELECT wcdma_bler_channel_%d,wcdma_bler_percent_%d,
                            wcdma_bler_err_%d,wcdma_bler_rcvd_%d
                            FROM wcdma_bler
                            %s
                            ORDER BY time DESC LIMIT 1""" % (
                channel, channel, channel, channel, condition)
            query = QSqlQuery()
            query.exec_(queryString)
            rowCount = query.record().count()
            if rowCount > 0:
                while query.next():
                    if query.value(0):
                        dataList.append([
                            query.value(0),
                            query.value(1),
                            query.value(2),
                            query.value(3)
                        ])
        azenqosDatabase.close()
        return dataList

    def getBearers(self):
        if azenqosDatabase is not None:
            azenqosDatabase.open()
        dataList = []
        condition = ''
        if self.timeFilter:
            condition = "WHERE time <= '%s'" % (self.timeFilter)
        row = ['', '', '', '']
        maxBearers = 10
        for bearers in range(1, maxBearers):
            queryString = """SELECT data_wcdma_n_bearers,data_wcdma_bearer_id_%d,data_wcdma_bearer_rate_dl_%d,
                             data_wcdma_bearer_rate_ul_%d 
                             FROM wcdma_bearers %s 
                             ORDER BY time DESC LIMIT 1""" % (bearers,bearers,bearers,condition)
                             
            query = QSqlQuery()
            query.exec_(queryString)
            rowCount = query.record().count()
            if rowCount > 0:
                while query.next():
                    if query.value(0):
                        row[0] = query.value(0)
                        for index in range(1, len(row)):
                            row[index] = query.value(index)
                        dataList.append(row)
        azenqosDatabase.close()
        return dataList

    def getPilotPolutingCells(self):
        if azenqosDatabase is not None:
            azenqosDatabase.open()
        dataList = []
        condition = ''
        if self.timeFilter:
            condition = "WHERE time <= '%s'" % (self.timeFilter)
        row = ['', '', '', '', '']
        maxPollution = 32
        for pollution in range(1, maxPollution):
            queryString = """SELECT time,wcdma_n_pilot_polluting_cells,wcdma_pilot_polluting_cell_sc_%d,
                             wcdma_pilot_polluting_cell_rscp_%d,wcdma_pilot_polluting_cell_ecio_%d
                             FROM wcdma_pilot_pollution
                             %s
                             ORDER BY time DESC LIMIT 1""" % (pollution,pollution,pollution,condition)
   
            query = QSqlQuery()
            query.exec_(queryString)
            rowCount = query.record().count()
            if rowCount > 0:
                while query.next():
                    if query.value(0):             
                        #row[0] = query.value(0)
                        row[0] = self.timeFilter
                        row[1] = query.value(1)
                        for index in range(2, len(row)):
                            row[index] = query.value(index)
                        dataList.append(row)

        azenqosDatabase.close()
        return dataList

    def getActiveMonitoredBar(self):
        if azenqosDatabase is not None:
            azenqosDatabase.open()
        dataList = []
        condition = ''
        maxItem = 27

        if self.timeFilter:
            condition = "WHERE time <= '%s'" % (self.timeFilter)

        for item in range(1, maxItem):
            queryString = """SELECT wcdma_celltype_%d,wcdma_ecio_%d,wcdma_rscp_%d
                            FROM wcdma_cells_combined
                            %s
                            ORDER BY time DESC""" % (item, item, item,
                                                     condition)
            query = QSqlQuery()
            query.exec_(queryString)
            rowCount = query.record().count()
            if rowCount > 0:
                while query.next():
                    if query.value(0):
                        dataList.append(
                            [query.value(0),
                             query.value(1),
                             query.value(2)])

        azenqosDatabase.close()
        return dataList

    def getCmGsmCells(self):
        if azenqosDatabase is not None:
            azenqosDatabase.open()
        dataList = []
        condition = ''

        queryString = """Select time,wcdma_cm_gsm_meas_arfcn,wcdma_cm_gsm_meas_rxlev,
                        wcdma_cm_gsm_meas_bsic,wcdma_cm_gsm_meas_cell_measure_state
                        FROM wcdma_cm_gsm_meas
                        %s
                        ORDER BY time DESC""" % (condition)

        # Real Query Code (รันไม่ได้เพราะ no data in DB)
        # -----------------------------------------------
        # query = QSqlQuery()
        # query.exec_(queryString)
        # while query.next():
        #     if query.value(0):
        #         dataList.append([query.value(0),
        #                           query.value(1),
        #                           query.value(2),
        #                           query.value(3),
        #                           query.value(4)])
        #     else:
        #         dataList.append([self.timeFilter,'','','',''])

        #Table Ui Test
        dataList.append([self.timeFilter, '', '', '', ''])
        azenqosDatabase.close()
        return dataList


class LteDataQuery:
    def __init__(self):
        self.timeFilter = ''
        if currentDateTimeString:
            self.timeFilter = currentDateTimeString

    def getRadioParameters(self):
        if azenqosDatabase is not None:
            azenqosDatabase.open()
        dataList = []
        condition = ''
        fieldsList = [
            'Time', 'Band', 'E-ARFCN', 'Serving PCI', 'Serving RSRP[0]',
            'Serving RSRP[1]', 'Serving RSRP', 'Serving RSRQ[0]',
            'Serving RSRQ[1]', 'Serving RSRQ', 'SINR Rx[0]', 'SINR Rx[1]',
            'SINR', 'RSSI Rx[0]', 'RSSI Rx[1]', 'RSSI', 'BLER', 'CQI CW[0]',
            'CQI CW[1]', 'Tx Power', 'PUCCH TxPower (dBm)',
            'PUSCH TxPower (dBm)', 'TimingAdvance',
            'Transmission Mode (RRC-tm)', 'LTE RRC State', 'LTE EMM State',
            'LTE RRC Substate', 'Modern ServCellInfo', 'Allowed Access', 'MCC',
            'MNC', 'TAC', 'Cell ID (ECI)', 'eNodeB ID', 'LCI', 'PCI',
            'Derived SCC ECI', 'Derived SCC eNodeB ID', 'Derived SCC LCI',
            'DL EARFCN', 'UL EARFCN', 'DL Bandwidth (Mhz)',
            'UL Bandwidth (Mhz)', 'SCC DL Bandwidth (Mhz)', 'SIB1 info:',
            'sib1 MCC', 'sib1 MNC', 'sib1 TAC', 'sib1 ECI', 'sib1 eNBid',
            'sib1 LCI', 'TDD Config:', 'SubframeAssignment',
            'SpclSubframePattern', 'DedBearer QCI'
        ]
        selectedColumns = """lcm.time as Time, lcm.lte_band_1 as Band, lcm.lte_earfcn_1 as 'E-ARFCN', lsci.lte_serv_cell_info_pci as 'Serving PCI',
                                lcm.lte_inst_rsrp_rx0_1 as 'Serving RSRP[0]', lcm.lte_inst_rsrp_rx1_1 as 'Serving RSRP[1]', lcm.lte_inst_rsrp_1 as 'Serving RSRP', lcm.lte_inst_rsrq_rx0_1 as 'Serving RSRQ[0]', lcm.lte_inst_rsrq_rx1_1 as 'Serving RSRP[1]', lcm.lte_inst_rsrq_1 as 'Serving RSRQ', lcm.lte_sinr_rx0_1 as 'SINR Rx[0]', lcm.lte_sinr_rx1_1 as 'SINR Rx[1]', lcm.lte_sinr_1 as 'SINR', lcm.lte_inst_rssi_rx0_1 as 'RSSI Rx[0]', lcm.lte_inst_rssi_rx1_1 as 'RSSI Rx[1]', lcm.lte_inst_rssi_1 as 'RSSI', lldt.lte_bler_1 as 'BLER', lc.lte_cqi_cw0_1 as 'CQI CW[0]', lc.lte_cqi_cw1_1 as 'CQI CW[1]', ltp.lte_tx_power as 'Tx Power', lpcti.lte_pucch_tx_power as 'PUCCH TxPower (dBm)', lpsti.lte_pusch_tx_power as 'PUSCH TxPower (dBm)', lft.lte_ta as 'TimingAdvance', lrti.lte_transmission_mode_l3 as 'Transmission Mode (RRC-tm)', lrs.lte_rrc_state as 'LTE RRC State', les.lte_emm_state as 'LTE EMM State', les.lte_emm_substate as 'LTE EMM Substate', '____' as 'Modem ServCellInfo', lsci.lte_serv_cell_info_allowed_access as 'Allowed Access', lsci.lte_serv_cell_info_mcc as 'MCC', lsci.lte_serv_cell_info_mnc as 'MNC',
                                lsci.lte_serv_cell_info_tac as 'TAC', lsci.lte_serv_cell_info_eci as 'Cell ID (ECI)', lsci.lte_serv_cell_info_enb_id as 'eNodeB ID', lsci.lte_scc_derived_lci as 'LCI', lsci.lte_serv_cell_info_pci as 'PCI', lsci.lte_scc_derived_eci as 'Derviced SCC ECI', lsci.lte_scc_derived_enb_id as 'Derived SCC eNodeB ID', lsci.lte_scc_derived_lci as 'Derived SCC LCI', lsci.lte_serv_cell_info_dl_freq as 'DL EARFCN', lsci.lte_serv_cell_info_ul_freq as 'UL EARFCN',
                                lsci.lte_serv_cell_info_dl_bandwidth_mhz as 'DL Bandwidth (Mhz)', lsci.lte_serv_cell_info_ul_bandwidth_mhz as 'UL Bandwidth (Mhz)', '' as 'SCC DL Bandwidth (Mhz)', '____' as 'SIB1 info:', lsoi.lte_sib1_mcc as 'sib1 MCC', lsoi.lte_sib1_mnc as 'sib1 MNC', lsoi.lte_sib1_tac as 'sib1 TAC', lsoi.lte_sib1_eci as 'sib ECI', lsoi.lte_sib1_enb_id as 'sib1 eNBid', lsoi.lte_sib1_local_cell_id as 'sib1 LCI', '____' as 'TDD Config:', ltc.lte_tdd_config_subframe_assignment as 'SubframeAssignment', ltc.lte_tdd_config_special_subframe_pattern as 'SpclSubframePattern', '' as 'DedBearer QCI'"""

        if self.timeFilter:
            condition = "WHERE lcm.time <= '%s'" % (self.timeFilter)

        queryString = """SELECT %s
                        FROM lte_cell_meas lcm
                        LEFT JOIN lte_serv_cell_info lsci ON lcm.time = lsci.time
                        LEFT JOIN lte_l1_dl_tp lldt ON lcm.time = lldt.time
                        LEFT JOIN lte_cqi lc ON lcm.time = lc.time
                        LEFT JOIN lte_tx_power ltp ON lcm.time = ltp.time
                        LEFT JOIN lte_pucch_tx_info lpcti ON lcm.time = lpcti.time
                        LEFT JOIN lte_pusch_tx_info lpsti ON lcm.time = lpsti.time
                        LEFT JOIN lte_frame_timing lft ON lcm.time = lft.time
                        LEFT JOIN lte_rrc_transmode_info lrti ON lcm.time = lrti.time
                        LEFT JOIN lte_rrc_state lrs ON lcm.time = lrs.time
                        LEFT JOIN lte_emm_state les ON lcm.time = les.time
                        LEFT JOIN lte_sib1_info lsoi ON lcm.time = lsoi.time
                        LEFT JOIN lte_tdd_config ltc ON lcm.time = ltc.time
                        %s
                        ORDER BY lcm.time DESC LIMIT 1""" % (selectedColumns,
                                                             condition)
        query = QSqlQuery()
        query.exec_(queryString)
        fieldCount = len(selectedColumns.split(","))
        queryRowCount = query.record().count()
        if queryRowCount > 0:
            while query.next():
                for index in range(fieldCount):
                    columnName = fieldsList[index]
                    value = ''
                    if query.value(index) != '':
                        value = query.value(index)
                    dataList.append([columnName, value, '', ''])
        else:
            for index in range(fieldCount):
                columnName = fieldsList[index]
                value = ''
                dataList.append([columnName, value, '', ''])
        azenqosDatabase.close()
        return dataList

    def getServingAndNeighbors(self):
        if azenqosDatabase is not None:
            azenqosDatabase.open()
        MAX_NEIGHBORS = 16
        dataList = []
        typeHeader = {
            'serving': ['dateString', 'Serving cell:', '', '', '', ''],
            'neigh': ['', 'Neighbor cells:', '', '', '', '']
        }
        emptyRow = ['', '', '', '', '', '']
        condition = ''

        # Set query condition for serving cell
        if self.timeFilter:
            condition = "WHERE lcm.time <= '%s'" % (self.timeFilter)

        typeHeader['serving'][0] = self.timeFilter
        dataList.append(typeHeader['serving'])

        queryString = """SELECT lcm.lte_earfcn_1, lsci.lte_serv_cell_info_band, lsci.lte_serv_cell_info_pci, lcm.lte_inst_rsrp_1,
                        lcm.lte_inst_rsrq_1
                        FROM lte_cell_meas as lcm
                        LEFT JOIN lte_serv_cell_info lsci ON lcm.time = lsci.time
                        %s
                        ORDER BY lcm.time DESC
                        LIMIT 1""" % (condition)
        query = QSqlQuery()
        query.exec_(queryString)
        while query.next():
            servingCell = [
                '',
                query.value(0),
                query.value(1),
                query.value(2),
                query.value(3),
                query.value(4)
            ]
            dataList.append(servingCell)

        # Set query condition for neigh cell
        if self.timeFilter:
            condition = "WHERE lnm.time <= '%s'" % (self.timeFilter)

        for neighbor in range(1, MAX_NEIGHBORS):
            queryString = """SELECT lnm.lte_neigh_earfcn_%d, lnm.lte_neigh_band_%d, lnm.lte_neigh_physical_cell_id_%d, lnm.lte_neigh_rsrp_%d,
                            lnm.lte_neigh_rsrq_%d
                            FROM lte_neigh_meas as lnm
                            %s
                            ORDER BY lnm.time DESC
                            LIMIT 1""" % (neighbor, neighbor, neighbor,
                                          neighbor, neighbor, condition)
            query = QSqlQuery()
            query.exec_(queryString)
            rowCount = query.record().count()
            if rowCount > 0:
                while query.next():
                    if query.value(0):
                        if neighbor == 1:
                            dataList.append(typeHeader['neigh'])
                        neighCell = [
                            '',
                            query.value(0),
                            query.value(1),
                            query.value(2),
                            query.value(3),
                            query.value(4)
                        ]
                        dataList.append(neighCell)
                    else:
                        break
            else:
                dataList.append(emptyRow)
        azenqosDatabase.close()
        return dataList

    def getPucchPdschParameters(self):
        if azenqosDatabase is not None:
            azenqosDatabase.open()

        dataList = []
        condition = ""
        maxBearers = 8
        pucchFields = [
            '---- PUCCH ----', 'CQI CW 0', 'CQI CW 1', 'CQI N Sub-bands',
            'Rank Indicator'
        ]
        pdschFields = [
            '---- PDSCH ----', 'PDSCH Serving Cell ID', 'PDSCH RNTI ID',
            'PDSCH RNTI Type', 'PDSCH Serving N Tx Antennas',
            'PDSCH Serving N Rx Antennas', 'PDSCH Transmission Mode Current',
            'PDSCH Spatial Rank', 'PDSCH Rb Allocation Slot 0',
            'PDSCH Rb Allocation Slot 1', 'PDSCH PMI Type', 'PDSCH PMI Index',
            'PDSCH Stream[0] Block Size', 'PDSCH Stream[0] Modulation',
            'PDSCH Traffic To Pilot Ratio', 'PDSCH Stream[1] Block Size',
            'PDSCH Stream[1] Modulation'
        ]

        if self.timeFilter:
            condition = "WHERE time <= '%s'" % (self.timeFilter)
            dateString = '%s' % (self.timeFilter)

        dataList.append(['Time', self.timeFilter])

        queryString = """SELECT '' as header, lte_cqi_cw0_1, lte_cqi_cw1_1, lte_cqi_n_subbands_1, lte_rank_indication_1
                        FROM lte_cqi
                        %s
                        ORDER BY time DESC
                        LIMIT 1""" % (condition)
        query = QSqlQuery()
        query.exec_(queryString)
        while query.next():
            for field in range(len(pucchFields)):
                if query.value(field):
                    dataList.append([pucchFields[field], query.value(field)])
                else:
                    dataList.append([pucchFields[field], ''])

        queryString = """SELECT '' as pdsch, lte_pdsch_serving_cell_id_1, lte_pdsch_rnti_id_1, lte_pdsch_rnti_type_1,
                        lte_pdsch_serving_n_tx_antennas_1, lte_pdsch_serving_n_rx_antennas_1,
                        lte_pdsch_transmission_mode_current_1, lte_pdsch_spatial_rank_1,
                        lte_pdsch_rb_allocation_slot0_1, lte_pdsch_rb_allocation_slot1_1,
                        lte_pdsch_pmi_type_1, lte_pdsch_pmi_index_1,lte_pdsch_stream0_transport_block_size_bits_1,
                        lte_pdsch_stream0_modulation_1, lte_pdsch_traffic_to_pilot_ratio_1,lte_pdsch_stream1_transport_block_size_bits_1,
                        lte_pdsch_stream1_modulation_1
                        FROM lte_pdsch_meas
                        %s
                        ORDER BY time DESC
                        LIMIT 1""" % (condition)
        query = QSqlQuery()
        query.exec_(queryString)
        rowCount = query.record().count()
        if rowCount > 0:

            while query.next():
                for field in range(len(pdschFields)):
                    if query.value(field):
                        dataList.append(
                            [pdschFields[field],
                             query.value(field)])
                    else:
                        dataList.append([pdschFields[field], ''])
        azenqosDatabase.close()
        return dataList

    def getRlc(self):
        if azenqosDatabase is not None:
            azenqosDatabase.open()

        dataList = []
        condition = ""
        maxBearers = 8

        if self.timeFilter:
            condition = "WHERE time <= '%s'" % (self.timeFilter)

        queryString = """SELECT time, lte_rlc_dl_tp_mbps, lte_rlc_dl_tp, lte_rlc_n_bearers
                        FROM lte_rlc_stats
                        %s
                        ORDER BY time DESC
                        LIMIT 1""" % (condition)
        query = QSqlQuery()
        query.exec_(queryString)
        while query.next():
            dataList.append(['Time', self.timeFilter, '', '', ''])
            dataList.append(
                ['DL TP(Mbps)',
                 query.value('lte_rlc_dl_tp_mbps'), '', '', ''])
            dataList.append(
                ['DL TP(Kbps)',
                 query.value('lte_rlc_dl_tp'), '', '', ''])
            dataList.append(['Bearers:', '', '', '', ''])
            dataList.append(
                ['N Bearers',
                 query.value('lte_rlc_n_bearers'), '', '', ''])
        for bearer in range(1, maxBearers):
            queryString = """SELECT lte_rlc_per_rb_dl_rb_mode_%d, lte_rlc_per_rb_dl_rb_type_%d, lte_rlc_per_rb_dl_rb_id_%d, lte_rlc_per_rb_cfg_index_%d,
                            lte_rlc_per_rb_dl_tp_%d
                            FROM lte_rlc_stats
                            %s
                            ORDER BY time DESC
                            LIMIT 1""" % (bearer, bearer, bearer, bearer,
                                          bearer, condition)
            query = QSqlQuery()
            query.exec_(queryString)
            rowCount = query.record().count()
            if rowCount > 0:
                while query.next():
                    if query.value(0):
                        if bearer == 1:
                            dataList.append(
                                ['Mode', 'Type', 'RB-ID', 'Index', 'TP Mbps'])
                        dataList.append([
                            query.value(0),
                            query.value(1),
                            query.value(2),
                            query.value(3),
                            query.value(4)
                        ])
        azenqosDatabase.close()
        return dataList

    def getVolte(self):
        if azenqosDatabase is not None:
            azenqosDatabase.open()
        dataList = []
        condition = ""
        volteFields = [
            'Time', 'Codec:', 'AMR SpeechCodec-RX', 'AMR SpeechCodec-TX',
            'Delay interval avg:', 'Audio Packet delay (ms.)',
            'RTP Packet delay (ms.)', 'RTCP SR Params:',
            'RTCP Round trip time (ms.)', 'RTCP SR Params - Jitter DL:',
            'RTCP SR Jitter DL (ts unit)', 'RTCP SR Jitter DL (ms.)',
            'RTCP SR Params - Jitter UL:', 'RTCP SR Jitter UL (ts unit)',
            'RTCP SR Jitter UL (ms.)', 'RTCP SR Params - Packet loss rate:',
            'RTCP SR Packet loss DL (%)', 'RTCP SR Packet loss UL (%)'
        ]

        if self.timeFilter:
            condition = "WHERE lvs.time <= '%s'" % (self.timeFilter)

        queryString = """SELECT lvs.time, '' as codec, vi.gsm_speechcodecrx, vi.gsm_speechcodectx, '' as delay_interval,
                        vi.vocoder_amr_audio_packet_delay_avg, lvs.lte_volte_rtp_pkt_delay_avg, '' as rtcp_sr_params,
                        lvs.lte_volte_rtp_round_trip_time, '' as rtcp_jitter_dl, lvs.lte_volte_rtp_jitter_dl,
                        lvs.lte_volte_rtp_jitter_dl_millis, '' as rtcp_jitter_ul, lte_volte_rtp_jitter_ul, lte_volte_rtp_jitter_ul_millis,
                        '' as rtcp_sr_packet_loss, lte_volte_rtp_packet_loss_rate_dl, lte_volte_rtp_packet_loss_rate_ul
                        FROM lte_volte_stats as lvs
                        LEFT JOIN vocoder_info vi ON lvs.time = vi.time
                        %s
                        ORDER BY lvs.time DESC
                        LIMIT 1""" % (condition)
        query = QSqlQuery()
        query.exec_(queryString)
        rowCount = query.record().count()
        if rowCount > 0:
            while query.next():
                for field in range(len(volteFields)):
                    if field == 0:
                        dataList.append([volteFields[field], self.timeFilter])
                    else:
                        if query.value(field):
                            dataList.append(
                                [volteFields[field],
                                 query.value(field)])
                        else:
                            dataList.append([volteFields[field], ''])
            if len(dataList) == 0:
                for field in range(len(volteFields)):
                    if field == 0:
                        dataList.append([volteFields[field], self.timeFilter])
                    else:
                        dataList.append([volteFields[field], ''])
        azenqosDatabase.close()
        return dataList


class CdmaEvdoQuery:
    def __init__(self):
        self.timeFilter = currentTimestamp

    def getRadioParameters(self):
        if azenqosDatabase is not None:
            azenqosDatabase.open()
        dataList = []
        cdmaFields = [
            'Time', 'Active PN (Best)', 'Ec/Io', 'RX Power', 'TX Power', 'FER',
            'Channel', 'Band class', 'N Active Set Cells'
        ]

        if self.timeFilter:
            condition = "WHERE time <= '%s'" % (self.timeFilter)

        query = QSqlQuery()
        queryString = """SELECT time, cdma_cell_pn, cdma_ecio, cdma_rx_power, cdma_tx_power, cdma_fer, cdma_channel, cdma_band_class, cdma_n_aset_cells                   FROM cdma
                        %s
                        ORDER BY time DESC
                        LIMIT 1""" % (condition)
        query.exec_(queryString)
        while query.next():
            for field in range(len(cdmaFields)):
                if query.value(field):
                    dataList.append([cdmaFields[field], query.value(field)])
                else:
                    dataList.append([cdmaFields[field], ''])
        azenqosDatabase.close()
        return dataList

    def getServingAndNeighbors(self):
        if azenqosDatabase is not None:
            azenqosDatabase.open()
        MAX_NEIGHBORS = 32
        dataList = []
        condition = ''

        # Set query condition for serving cell
        if self.timeFilter:
            condition = "WHERE time <= '%s'" % (self.timeFilter)

        dataList.append([self.timeFilter, '', '', ''])

        for neighbor in range(1, MAX_NEIGHBORS):
            queryString = """SELECT cdma_cell_pn_%d, cdma_cell_ecio_%d, cdma_cell_type_%d
                            FROM cdma
                            %s
                            ORDER BY time DESC
                            LIMIT 1""" % (neighbor, neighbor, neighbor,
                                          condition)
            query = QSqlQuery()
            query.exec_(queryString)
            rowCount = query.record().count()
            if rowCount > 0:
                while query.next():
                    if query.value(0):
                        neighCell = [
                            '',
                            query.value(0),
                            query.value(1),
                            query.value(2)
                        ]
                        dataList.append(neighCell)
                    else:
                        break
            else:
                dataList.append(['', '', '', ''])
        azenqosDatabase.close()
        return dataList

    def getEvdoParameters(self):
        if azenqosDatabase is not None:
            azenqosDatabase.open()
        dataList = []
        evdoFields = ['Time', 'DRC', 'PER', '', 'SINR Per PN:', 'PN', 'SINR']

        if self.timeFilter:
            condition = "WHERE time <= '%s'" % (self.timeFilter)

        query = QSqlQuery()
        queryString = """SELECT time, cdma_evdo_drc, cdma_evdo_per, '' as empty1, '' as empty2, cdma_evdo_pn, cdma_evdo_sinr
                        FROM cdma
                        %s
                        ORDER BY time DESC
                        LIMIT 1""" % (condition)
        query.exec_(queryString)
        while query.next():
            for field in range(len(evdoFields)):
                if query.value(field):
                    dataList.append([evdoFields[field], query.value(field)])
                else:
                    dataList.append([evdoFields[field], ''])
        azenqosDatabase.close()
        return dataList


class DataQuery:
    def __init__(self, windowName):
        self.windowName = windowName
        self.timeFilter = currentTimestamp

    def getGprsEdgeInformation(self):
        if azenqosDatabase is not None:
            azenqosDatabase.open()
        query = QSqlQuery()
        query.exec_("SELECT * FROM events")
        timeField = query.record().indexOf("time")
        nameField = query.record().indexOf("name")
        detailField = query.record().indexOf("info")
        dataList = []
        while query.next():
            timeValue = query.value(timeField)
            nameValue = query.value(nameField)
            detailStrValue = query.value(detailField)
            dataList.append([timeValue, '', nameValue, detailStrValue])
        azenqosDatabase.close()
        return dataList

    def getHsdpaHspaStatistics(self):
        if azenqosDatabase is not None:
            azenqosDatabase.open()
        query = QSqlQuery()
        query.exec_("SELECT * FROM events")
        timeField = query.record().indexOf("time")
        nameField = query.record().indexOf("name")
        detailField = query.record().indexOf("info")
        dataList = []
        while query.next():
            timeValue = query.value(timeField)
            nameValue = query.value(nameField)
            detailStrValue = query.value(detailField)
            dataList.append([timeValue, '', nameValue, detailStrValue])
        azenqosDatabase.close()
        return dataList

    def getHsupaStatistics(self):
        if azenqosDatabase is not None:
            azenqosDatabase.open()
        query = QSqlQuery()
        query.exec_("SELECT * FROM events")
        timeField = query.record().indexOf("time")
        nameField = query.record().indexOf("name")
        detailField = query.record().indexOf("info")
        dataList = []
        while query.next():
            timeValue = query.value(timeField)
            nameValue = query.value(nameField)
            detailStrValue = query.value(detailField)
            dataList.append([timeValue, '', nameValue, detailStrValue])
        azenqosDatabase.close()
        return dataList

    def getLteDataStatistics(self):
        if azenqosDatabase is not None:
            azenqosDatabase.open()
        query = QSqlQuery()
        query.exec_("SELECT * FROM events")
        timeField = query.record().indexOf("time")
        nameField = query.record().indexOf("name")
        detailField = query.record().indexOf("info")
        dataList = []
        while query.next():
            timeValue = query.value(timeField)
            nameValue = query.value(nameField)
            detailStrValue = query.value(detailField)
            dataList.append([timeValue, '', nameValue, detailStrValue])
        azenqosDatabase.close()
        return dataList

    def getWifiConnectedAp(self):
        if azenqosDatabase is not None:
            azenqosDatabase.open()
        query = QSqlQuery()
        query.exec_("SELECT * FROM events")
        timeField = query.record().indexOf("time")
        nameField = query.record().indexOf("name")
        detailField = query.record().indexOf("info")
        dataList = []
        while query.next():
            timeValue = query.value(timeField)
            nameValue = query.value(nameField)
            detailStrValue = query.value(detailField)
            dataList.append([timeValue, '', nameValue, detailStrValue])
        azenqosDatabase.close()
        return dataList

    def getWifiScannedAps(self):
        if azenqosDatabase is not None:
            azenqosDatabase.open()
        query = QSqlQuery()
        query.exec_("SELECT * FROM events")
        timeField = query.record().indexOf("time")
        nameField = query.record().indexOf("name")
        detailField = query.record().indexOf("info")
        dataList = []
        while query.next():
            timeValue = query.value(timeField)
            nameValue = query.value(nameField)
            detailStrValue = query.value(detailField)
            dataList.append([timeValue, '', nameValue, detailStrValue])
        azenqosDatabase.close()
        return dataList

    def getWifiGraph(self):
        if azenqosDatabase is not None:
            azenqosDatabase.open()
        query = QSqlQuery()
        query.exec_("SELECT * FROM events")
        timeField = query.record().indexOf("time")
        nameField = query.record().indexOf("name")
        detailField = query.record().indexOf("info")
        dataList = []
        while query.next():
            timeValue = query.value(timeField)
            nameValue = query.value(nameField)
            detailStrValue = query.value(detailField)
            dataList.append([timeValue, '', nameValue, detailStrValue])
        azenqosDatabase.close()
        return dataList


class SignalingDataQuery:
    def __init__(self):
        self.timeFilter = ''
        if currentDateTimeString:
            self.timeFilter = currentDateTimeString

    def getEvents(self):
        if azenqosDatabase is not None:
            azenqosDatabase.open()
        queryString = 'SELECT time, name, info FROM events'
        query = QSqlQuery()
        query.exec_(queryString)
        timeField = query.record().indexOf("time")
        nameField = query.record().indexOf("name")
        detailField = query.record().indexOf("info")
        dataList = []
        while query.next():
            timeValue = query.value(timeField)
            nameValue = query.value(nameField)
            detailStrValue = query.value(detailField)
            dataList.append([timeValue, '', 'MS1', nameValue, detailStrValue])
        azenqosDatabase.close()
        return dataList

    def getLayerOneMessages(self):  ##ต้องแก้ query
        if azenqosDatabase is not None:
            azenqosDatabase.open()
        query = QSqlQuery()
        query.exec_("SELECT * FROM events")
        timeField = query.record().indexOf("time")
        nameField = query.record().indexOf("name")
        detailField = query.record().indexOf("info")
        dataList = []
        while query.next():
            timeValue = query.value(timeField)
            nameValue = query.value(nameField)
            detailStrValue = query.value(detailField)
            dataList.append([timeValue, '', 'MS1', nameValue, detailStrValue])
        azenqosDatabase.close()
        return dataList

    def getLayerThreeMessages(self):
        if azenqosDatabase is not None:
            azenqosDatabase.open()
        query = QSqlQuery()
        query.exec_("SELECT time, name, symbol, detail_str FROM signalling")
        timeField = query.record().indexOf("time")
        nameField = query.record().indexOf("name")
        symbolField = query.record().indexOf("symbol")
        detailField = query.record().indexOf("detail_str")
        dataList = []
        while query.next():
            timeValue = query.value(timeField)
            nameValue = query.value(nameField)
            symbolValue = query.value(symbolField)
            detailStrValue = query.value(detailField).split(',')
            if detailStrValue[0].startswith('LTE') == True:
                detailStrValue = 'LTE RRC'
            else:
                detailStrValue = ''
            if detailStrValue != '':
                dataList.append([
                    timeValue, symbolValue, 'MS1', detailStrValue, nameValue,
                    ''
                ])
        azenqosDatabase.close()
        return dataList

    def getBenchmark(self):  #ยังไม่เสร็จ
        if azenqosDatabase is not None:
            azenqosDatabase.open()
        dataList = []
        condition = ""

        #Voice section (ยังไม่มีข้อมูลใน database)
        dataList.append(['---- Voice ----', '', '', '', ''])
        dataList.append(['Call Count', 0, 0, 0, 0])
        dataList.append(['Drop Count', 0, 0, 0, 0])
        dataList.append(['Block Count', 0, 0, 0, 0])
        dataList.append(['Handover Fail Count', 0, 0, 0, 0])

        #LTE section
        lteField = [
            '---- LTE ----', 'SINR Rx[0][1]', 'SINR RX[1][1]', 'Inst RSRP[1]',
            'Inst RSRQ[1]', 'Inst RSSI', 'Cell ID', 'Cell Name'
        ]
        if self.timeFilter:
            condition = "WHERE lcm.time <= '%s'" % (self.timeFilter)
        queryString = """SELECT '' as header,lcm.lte_sinr_rx0_1,lcm.lte_sinr_rx1_1,lcm.lte_inst_rsrp_1,lcm.lte_inst_rsrq_1,
                         lcm.lte_inst_rssi_1,lsci.lte_serv_cell_info_eci,lsci.lte_serv_cell_info_cellname
                         FROM lte_cell_meas lcm
                         LEFT JOIN lte_serv_cell_info lsci ON lcm.time = lsci.time
                         %s
                         ORDER BY lcm.time DESC LIMIT 1""" % (condition)
        query = QSqlQuery()
        query.exec_(queryString)
        while query.next():
            for field in range(len(lteField)):
                if query.value(field):
                    dataList.append(
                        [lteField[field],
                         query.value(field), '', '', ''])
                else:
                    dataList.append([lteField[field], '', '', '', ''])

        #WCDMA section
        wcdmaField = [
            '---- WCDMA ----', 'ASET Ec/Io Avg.', 'ASET RSCP Avg.', 'RSSI',
            'BLER Avg.', 'Cell ID', 'Cell Name'
        ]
        if self.timeFilter:
            condition = "WHERE wcm.time <= '%s'" % (self.timeFilter)
        queryString = """SELECT '' as header,wcm.wcdma_aset_ecio_avg,wcm.wcdma_aset_rscp_avg,wrp.wcdma_rssi,
                         wb.wcdma_bler_average_percent_all_channels,wici.wcdma_cellid, '' as cellname
                         FROM wcdma_cell_meas wcm
                         LEFT JOIN wcdma_rx_power wrp ON wcm.time = wrp.time
                         LEFT JOIN wcdma_bler wb ON wcm.time = wb.time
                         LEFT JOIN wcdma_idle_cell_info wici ON wcm.time = wici.time
                         %s
                         ORDER BY wcm.time DESC LIMIT 1""" % (condition)
        #ยังหา WCDMA Cellname ไม่เจอ

        # Real Query Code (รันไม่ได้เพราะ no data in DB)
        #-----------------------------------------------
        # query = QSqlQuery()
        # query.exec_(queryString)
        # while query.next():
        #     for field in range(len(wcdmaField)):
        #         if query.value(field):
        #             dataList.append([wcdmaField[field],query.value(field),'','',''])
        #         else:
        #             dataList.append([wcdmaField[field],'','','',''])

        #Table Ui Test for WCDMA section
        for field in range(len(wcdmaField)):
            dataList.append([wcdmaField[field], '', '', '', ''])

        # #Data Section
        dataField = [
            '---- Data ----', 'DL Application Throughput',
            'UL Application Throughput'
        ]
        if self.timeFilter:
            condition = "WHERE time <= '%s'" % (self.timeFilter)
        queryString = """SELECT '' as header,data_app_dl_throughput_1,data_app_ul_throughput_1
                            FROM data_app_throughput
                            %s
                            ORDER BY time DESC LIMIT 1""" % (condition)

        # Real Query Code (รันไม่ได้เพราะ no data in DB)
        #-----------------------------------------------
        # query = QSqlQuery()
        # query.exec_(queryString)
        # while query.next():
        #     for field in range(len(dataField)):
        #         if query.value(field):
        #             dataList.append([dataField[field],query.value(field),'','',''])
        #         else:
        #             dataList.append([dataField[field],'','','',''])

        #Table Ui Test for Data section
        for field in range(len(dataField)):
            dataList.append([dataField[field], '', '', '', ''])
        #'Data Connect Fail Count','Download Timeout'
        dataList.append(['Data Connect Fail Count', 0, 0, 0, 0])
        dataList.append(['Download Timeout', 0, 0, 0, 0])

        #LTE RLC section
        lte_rlcField = [
            '---- LTE ----', 'RLC DL Thoughput', 'RLC UL Thoughput'
        ]
        if self.timeFilter:
            condition = "WHERE time <= '%s'" % (self.timeFilter)
        queryString = """SELECT '' as header,lte_rlc_dl_tp,lte_rlc_ul_tp
                         FROM lte_rlc_stats
                         %s
                         ORDER BY time DESC LIMIT 1""" % (condition)

        query = QSqlQuery()
        query.exec_(queryString)
        while query.next():
            for field in range(len(lte_rlcField)):
                if query.value(field):
                    dataList.append(
                        [lte_rlcField[field],
                         query.value(field), '', '', ''])
                else:
                    dataList.append([lte_rlcField[field], '', '', '', ''])

        #WCDMA RLC section
        wcdma_rlcField = [
            '---- WCDMA ----', 'HS-DSCH Throughput', 'WCDMA RLC DL Thoughput',
            'WCDMA RLC UL Thoughput'
        ]
        if self.timeFilter:
            condition = "WHERE whs.time <= '%s'" % (self.timeFilter)
        queryString = """SELECT '' as header,whs.data_hsdpa_thoughput,dwrs.data_wcdma_rlc_dl_throughput,
                         dwrs.data_wcdma_rlc_ul_throughput
                         FROM wcdma_hsdpa_stats whs
                         LEFT JOIN data_wcdma_rlc_stats dwrs ON whs.time = dwrs.time
                         %s
                         ORDER BY whs.time DESC LIMIT 1""" % (condition)

        # Real Query Code (รันไม่ได้เพราะ no data in DB)
        #-----------------------------------------------
        # query = QSqlQuery()
        # query.exec_(queryString)
        # while query.next():
        #     for field in range(len(wcdma_rlcField)):
        #         if query.value(field):
        #             dataList.append([wcdma_rlcField[field],query.value(field),'','',''])
        #         else:
        #             dataList.append([wcdma_rlcField[field],'','','',''])

        #Table Ui Test for Data section
        for field in range(len(wcdma_rlcField)):
            dataList.append([wcdma_rlcField[field], '', '', '', ''])

        azenqosDatabase.close()
        return dataList

    def getMmRegStates(self):
        if azenqosDatabase is not None:
            azenqosDatabase.open()
        dataList = []
        fieldsList = [
            'Time', 'MM State', 'MM Substate', 'MM Update Status',
            'MM Network Operation Mode', 'MM Service Type', 'MM MCC', 'MM MNC',
            'MM Lac', 'MM Rai', 'REG State', 'REG UE Operation Mode',
            'GMM State', 'GMM Substate', 'GMM Update'
        ]
        selectedColumns = """ms.time,ms.mm_state_state,ms.mm_state_substate,ms.mm_state_update_status,
                             ms.mm_characteristics_network_operation_mode,ms.mm_characteristics_service_type,
                             ms.mm_characteristics_mcc,ms.mm_characteristics_mnc,ms.mm_characteristics_lac,ms.mm_characteristics_rai,
                             rs.reg_state_state,rs.reg_state_ue_operation_mode,gs.gmm_state_state,gs.gmm_state_substate,gs.gmm_state_update"""
        condition = ''
        if self.timeFilter:
            condition = "WHERE ms.time <= '%s'" % (self.timeFilter)
        queryString = """SELECT %s FROM mm_state ms
                        LEFT JOIN reg_state rs ON ms.time = rs.time
                        LEFT JOIN gmm_state gs ON ms.time = gs.time
                        %s
                        ORDER BY ms.time DESC LIMIT 1""" % (selectedColumns,
                                                            condition)
        query = QSqlQuery()
        query.exec_(queryString)
        queryRowCount = query.record().count()
        for field in range(len(fieldsList)):
            dataList.append([fieldsList[field],''])
        while query.next():
            for field in range(len(fieldsList)):
                if query.value(field):
                    dataList[field][1] = query.value(field)         
                    # dataList.append(
                    #     [fieldsList[field],
                    #      query.value(field)])
        azenqosDatabase.close()
        return dataList

    def getServingSystemInfo(self):
        if azenqosDatabase is not None:
            azenqosDatabase.open()
        dataList = []
        fieldsList = [
            'Time', 'mcc', 'mnc', 'lac', 'service status', 'service domain',
            'service capability', 'system mode', 'roaming status',
            'system id type'
        ]
        selectedColumns = 'time,serving_system_mcc,serving_system_mnc,serving_system_lac,cm_service_status,cm_service_domain,cm_service_capability,cm_system_mode,cm_roaming_status,cm_system_id_type'
        condition = ''
        if self.timeFilter:
            condition = "WHERE time <= '%s'" % (self.timeFilter)
        queryString = 'select %s from serving_system %s order by time desc limit 1' % (
            selectedColumns, condition)
        query = QSqlQuery()
        query.exec_(queryString)
        while query.next():
            for field in range(len(fieldsList)):
                if query.value(field):
                    if field == 0:
                        dataList.append([fieldsList[field],self.timeFilter])
                    else:
                        dataList.append([fieldsList[field],query.value(field)])    
                else:
                    dataList.append([fieldsList[field], ''])
        azenqosDatabase.close()
        return dataList

    def getDebugAndroidEvent(self):
        #ยังไม่มีข้อมูลใน database

        if azenqosDatabase is not None:
            azenqosDatabase.open()
        # query = QSqlQuery()
        # query.exec_("select * from events")
        # timeField = query.record().indexOf("time")
        # nameField = query.record().indexOf("name")
        # detailField = query.record().indexOf("info")
        dataList = []
        # while query.next():
        #     timeValue = query.value(timeField)
        #     nameValue = query.value(nameField)
        #     detailStrValue = query.value(detailField)
        #     dataList.append([timeValue, '', 'MS1', nameValue, detailStrValue])
        azenqosDatabase.close()

        fieldsList = [
            'Time', 'Device Time Stamp', 'Raw Layer Message', 'Processed Event'
        ]
        fieldCount = len(fieldsList)
        dataList.append(['Time', self.timeFilter])
        for index in range(1, len(fieldsList)):
            columnName = fieldsList[index]
            dataList.append([columnName, ''])
        return dataList

# LTE Line Chart UI
class Ui_LTE_LCwidget(QWidget):
    def __init__(self, windowName):
        super(Ui_LTE_LCwidget, self).__init__()
        self.title = windowName
        self.setupUi(self)

    def setupUi(self, LTE_LCwidget):
        LTE_LCwidget.setObjectName("LTE_LCwidget")
        LTE_LCwidget.resize(841, 586)

        # Graph Area
        self.lte_GArea = QtWidgets.QScrollArea(LTE_LCwidget)
        self.lte_GArea.setGeometry(QtCore.QRect(20, 10, 801, 371))
        self.lte_GArea.setWidgetResizable(True)
        self.lte_GArea.setObjectName("lte_GArea")

        # Scroll Area
        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 799, 369))
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        self.lte_GArea.setWidget(self.scrollAreaWidgetContents)

        # DataTable
        self.lte_tableWidget = QtWidgets.QTableWidget(LTE_LCwidget)
        self.lte_tableWidget.setGeometry(QtCore.QRect(20, 390, 421, 171))
        self.lte_tableWidget.setObjectName("lte_tableWidget")
        self.lte_tableWidget.setColumnCount(4)
        self.lte_tableWidget.setRowCount(5)
        item = QtWidgets.QTableWidgetItem()
        self.lte_tableWidget.setVerticalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.lte_tableWidget.setVerticalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.lte_tableWidget.setVerticalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.lte_tableWidget.setVerticalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.lte_tableWidget.setVerticalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.lte_tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.lte_tableWidget.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.lte_tableWidget.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.lte_tableWidget.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.lte_tableWidget.setItem(0, 0, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.lte_tableWidget.setItem(0, 1, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.lte_tableWidget.setItem(0, 2, item)
        item = QtWidgets.QTableWidgetItem()
        brush = QtGui.QBrush(QtGui.QColor(255, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        item.setBackground(brush)
        self.lte_tableWidget.setItem(0, 3, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.lte_tableWidget.setItem(1, 0, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.lte_tableWidget.setItem(1, 1, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.lte_tableWidget.setItem(1, 2, item)
        item = QtWidgets.QTableWidgetItem()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        item.setBackground(brush)
        self.lte_tableWidget.setItem(1, 3, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.lte_tableWidget.setItem(2, 0, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.lte_tableWidget.setItem(2, 1, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.lte_tableWidget.setItem(2, 2, item)
        item = QtWidgets.QTableWidgetItem()
        brush = QtGui.QBrush(QtGui.QColor(0, 124, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        item.setBackground(brush)
        self.lte_tableWidget.setItem(2, 3, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.lte_tableWidget.setItem(3, 0, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.lte_tableWidget.setItem(3, 1, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.lte_tableWidget.setItem(3, 2, item)
        item = QtWidgets.QTableWidgetItem()
        brush = QtGui.QBrush(QtGui.QColor(255, 119, 171))
        brush.setStyle(QtCore.Qt.SolidPattern)
        item.setBackground(brush)
        self.lte_tableWidget.setItem(3, 3, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.lte_tableWidget.setItem(4, 0, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.lte_tableWidget.setItem(4, 1, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.lte_tableWidget.setItem(4, 2, item)
        item = QtWidgets.QTableWidgetItem()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        item.setBackground(brush)
        # brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        # brush.setStyle(QtCore.Qt.SolidPattern)
        # item.setForeground(brush)
        self.lte_tableWidget.setItem(4, 3, item)
        self.lte_tableWidget.horizontalHeader().setVisible(True)
        self.lte_tableWidget.horizontalHeader().setHighlightSections(True)
        self.lte_tableWidget.verticalHeader().setVisible(False)

        # DateLabel
        self.datelabel = QtWidgets.QLabel(LTE_LCwidget)
        self.datelabel.setGeometry(QtCore.QRect(655, 38, 47, 13))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.datelabel.setFont(font)
        self.datelabel.setObjectName("datelabel")
        self.lineEdit = QtWidgets.QLineEdit(LTE_LCwidget)
        self.lineEdit.setGeometry(QtCore.QRect(703, 36, 88, 20))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.lineEdit.setFont(font)
        self.lineEdit.setReadOnly(True)
        self.lineEdit.setObjectName("lineEdit")
        self.lineEdit.setAlignment(QtCore.Qt.AlignCenter)

        # Graph's Widget
        self.lte_widget = Line_Chart(self.scrollAreaWidgetContents, self.title,
                                     self.lte_tableWidget, self.lineEdit)
        self.lte_widget.setGeometry(QtCore.QRect(10, 9, 781, 351))
        self.lte_widget.setObjectName("lte_widget")

        self.retranslateUi(LTE_LCwidget)
        QtCore.QMetaObject.connectSlotsByName(LTE_LCwidget)

    def retranslateUi(self, LTE_LCwidget):
        _translate = QtCore.QCoreApplication.translate
        LTE_LCwidget.setWindowTitle(
            _translate("LTE_LCwidget", "LTE Line Chart [MS1]"))
        item = self.lte_tableWidget.verticalHeaderItem(0)
        item.setText(_translate("LTE_LCwidget", "1"))
        item = self.lte_tableWidget.verticalHeaderItem(1)
        item.setText(_translate("LTE_LCwidget", "2"))
        item = self.lte_tableWidget.verticalHeaderItem(2)
        item.setText(_translate("LTE_LCwidget", "3"))
        item = self.lte_tableWidget.verticalHeaderItem(3)
        item.setText(_translate("LTE_LCwidget", "4"))
        item = self.lte_tableWidget.verticalHeaderItem(4)
        item.setText(_translate("LTE_LCwidget", "5"))
        item = self.lte_tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("LTE_LCwidget", "Element"))
        item = self.lte_tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("LTE_LCwidget", "Value"))
        item = self.lte_tableWidget.horizontalHeaderItem(2)
        item.setText(_translate("LTE_LCwidget", "MS"))
        item = self.lte_tableWidget.horizontalHeaderItem(3)
        item.setText(_translate("LTE_LCwidget", "Color"))
        __sortingEnabled = self.lte_tableWidget.isSortingEnabled()
        self.lte_tableWidget.setSortingEnabled(False)
        item = self.lte_tableWidget.item(0, 0)
        item.setText(_translate("LTE_LCwidget", "SINR Rx[0][1]"))
        item = self.lte_tableWidget.item(0, 2)
        item.setText(_translate("LTE_LCwidget", "MS1"))
        item = self.lte_tableWidget.item(1, 0)
        item.setText(_translate("LTE_LCwidget", "SINR Rx[1][1]"))
        item = self.lte_tableWidget.item(1, 2)
        item.setText(_translate("LTE_LCwidget", "MS1"))
        item = self.lte_tableWidget.item(2, 0)
        item.setText(_translate("LTE_LCwidget", "Inst RSRP[1]"))
        item = self.lte_tableWidget.item(2, 2)
        item.setText(_translate("LTE_LCwidget", "MS1"))
        item = self.lte_tableWidget.item(3, 0)
        item.setText(_translate("LTE_LCwidget", "Inst RSRQ[1]"))
        item = self.lte_tableWidget.item(3, 2)
        item.setText(_translate("LTE_LCwidget", "MS1"))
        item = self.lte_tableWidget.item(4, 0)
        item.setText(_translate("LTE_LCwidget", "Inst RSSI[1]"))
        item = self.lte_tableWidget.item(4, 2)
        item.setText(_translate("LTE_LCwidget", "MS1"))
        self.lte_tableWidget.setSortingEnabled(__sortingEnabled)
        self.datelabel.setText(_translate("LTE_LCwidget", "Date :"))

    def moveChart(self,sampledate):      
        self.lte_widget.moveLineChart(sampledate)

# WCDMA Line Chart UI
class Ui_WCDMA_LCwidget(QWidget):
    def __init__(self, windowName):
        super(Ui_WCDMA_LCwidget, self).__init__()
        self.title = windowName
        self.setupUi(self)

    def setupUi(self, WCDMA_LCwidget):
        WCDMA_LCwidget.setObjectName("WCDMA_LCwidget")
        WCDMA_LCwidget.resize(841, 586)

        # Graph Area
        self.wcdma_GArea = QtWidgets.QScrollArea(WCDMA_LCwidget)
        self.wcdma_GArea.setGeometry(QtCore.QRect(20, 10, 801, 371))
        self.wcdma_GArea.setWidgetResizable(True)
        self.wcdma_GArea.setObjectName("wcdma_GArea")

        # Scroll Area
        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 799, 369))
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        self.wcdma_GArea.setWidget(self.scrollAreaWidgetContents)

        # DataTable
        self.wcdma_tableWidget = QtWidgets.QTableWidget(WCDMA_LCwidget)
        self.wcdma_tableWidget.setGeometry(QtCore.QRect(20, 390, 421, 141))
        self.wcdma_tableWidget.setObjectName("wcdma_tableWidget")
        self.wcdma_tableWidget.setColumnCount(4)
        self.wcdma_tableWidget.setRowCount(4)
        item = QtWidgets.QTableWidgetItem()
        self.wcdma_tableWidget.setVerticalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.wcdma_tableWidget.setVerticalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.wcdma_tableWidget.setVerticalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.wcdma_tableWidget.setVerticalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.wcdma_tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.wcdma_tableWidget.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.wcdma_tableWidget.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.wcdma_tableWidget.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.wcdma_tableWidget.setItem(0, 0, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.wcdma_tableWidget.setItem(0, 1, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.wcdma_tableWidget.setItem(0, 2, item)
        item = QtWidgets.QTableWidgetItem()
        brush = QtGui.QBrush(QtGui.QColor(255, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        item.setBackground(brush)
        self.wcdma_tableWidget.setItem(0, 3, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.wcdma_tableWidget.setItem(1, 0, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.wcdma_tableWidget.setItem(1, 1, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.wcdma_tableWidget.setItem(1, 2, item)
        item = QtWidgets.QTableWidgetItem()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        item.setBackground(brush)
        self.wcdma_tableWidget.setItem(1, 3, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.wcdma_tableWidget.setItem(2, 0, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.wcdma_tableWidget.setItem(2, 1, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.wcdma_tableWidget.setItem(2, 2, item)
        item = QtWidgets.QTableWidgetItem()
        brush = QtGui.QBrush(QtGui.QColor(0, 124, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        item.setBackground(brush)
        self.wcdma_tableWidget.setItem(2, 3, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.wcdma_tableWidget.setItem(3, 0, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.wcdma_tableWidget.setItem(3, 1, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.wcdma_tableWidget.setItem(3, 2, item)
        item = QtWidgets.QTableWidgetItem()
        brush = QtGui.QBrush(QtGui.QColor(255, 119, 171))
        brush.setStyle(QtCore.Qt.SolidPattern)
        item.setBackground(brush)
        self.wcdma_tableWidget.setItem(3, 3, item)
        self.wcdma_tableWidget.horizontalHeader().setVisible(True)
        self.wcdma_tableWidget.horizontalHeader().setHighlightSections(True)
        self.wcdma_tableWidget.verticalHeader().setVisible(False)

        # DateLabel
        self.datelabel = QtWidgets.QLabel(WCDMA_LCwidget)
        self.datelabel.setGeometry(QtCore.QRect(655, 38, 47, 13))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.datelabel.setFont(font)
        self.datelabel.setObjectName("datelabel")
        self.lineEdit = QtWidgets.QLineEdit(WCDMA_LCwidget)
        self.lineEdit.setGeometry(QtCore.QRect(703, 36, 88, 20))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.lineEdit.setFont(font)
        self.lineEdit.setReadOnly(True)
        self.lineEdit.setObjectName("lineEdit")
        self.lineEdit.setAlignment(QtCore.Qt.AlignCenter)

        # Graph's Widget
        self.wcdma_widget = Line_Chart(self.scrollAreaWidgetContents,
                                       self.title, self.wcdma_tableWidget,
                                       self.lineEdit)
        self.wcdma_widget.setGeometry(QtCore.QRect(10, 9, 781, 351))
        self.wcdma_widget.setObjectName("wcdma_widget")

        self.retranslateUi(WCDMA_LCwidget)
        QtCore.QMetaObject.connectSlotsByName(WCDMA_LCwidget)

    def retranslateUi(self, WCDMA_LCwidget):
        _translate = QtCore.QCoreApplication.translate
        WCDMA_LCwidget.setWindowTitle(
            _translate("WCDMA_LCwidget", "WCDMA Line Chart [MS1]"))
        item = self.wcdma_tableWidget.verticalHeaderItem(0)
        item.setText(_translate("WCDMA_LCwidget", "1"))
        item = self.wcdma_tableWidget.verticalHeaderItem(1)
        item.setText(_translate("WCDMA_LCwidget", "2"))
        item = self.wcdma_tableWidget.verticalHeaderItem(2)
        item.setText(_translate("WCDMA_LCwidget", "3"))
        item = self.wcdma_tableWidget.verticalHeaderItem(3)
        item.setText(_translate("WCDMA_LCwidget", "4"))
        item = self.wcdma_tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("WCDMA_LCwidget", "Element"))
        item = self.wcdma_tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("WCDMA_LCwidget", "Value"))
        item = self.wcdma_tableWidget.horizontalHeaderItem(2)
        item.setText(_translate("WCDMA_LCwidget", "MS"))
        item = self.wcdma_tableWidget.horizontalHeaderItem(3)
        item.setText(_translate("WCDMA_LCwidget", "Color"))
        __sortingEnabled = self.wcdma_tableWidget.isSortingEnabled()
        self.wcdma_tableWidget.setSortingEnabled(False)
        item = self.wcdma_tableWidget.item(0, 0)
        item.setText(_translate("WCDMA_LCwidget", "ASET Ec/Io Avg."))
        item = self.wcdma_tableWidget.item(0, 2)
        item.setText(_translate("WCDMA_LCwidget", "MS1"))
        item = self.wcdma_tableWidget.item(1, 0)
        item.setText(_translate("WCDMA_LCwidget", "WCDMA RSSI"))
        item = self.wcdma_tableWidget.item(1, 2)
        item.setText(_translate("WCDMA_LCwidget", "MS1"))
        item = self.wcdma_tableWidget.item(2, 0)
        item.setText(_translate("WCDMA_LCwidget", "BLER Average Percent"))
        item = self.wcdma_tableWidget.item(2, 2)
        item.setText(_translate("WCDMA_LCwidget", "MS1"))
        item = self.wcdma_tableWidget.item(3, 0)
        item.setText(_translate("WCDMA_LCwidget", "ASET RSCP Avg."))
        item = self.wcdma_tableWidget.item(3, 2)
        item.setText(_translate("WCDMA_LCwidget", "MS1"))
        self.wcdma_tableWidget.setSortingEnabled(__sortingEnabled)
        self.datelabel.setText(_translate("WCDMA_LCwidget", "Date :"))

    def moveChart(self,sampledate):      
        self.wcdma_widget.moveLineChart(sampledate)

# LTE Data Line Chart UI
class Ui_LTE_Data_LCwidget(QWidget):
    def __init__(self, windowName):
        super(Ui_LTE_Data_LCwidget, self).__init__()
        self.title = windowName
        self.setupUi(self)

    def setupUi(self, LTE_Data_LCwidget):
        LTE_Data_LCwidget.setObjectName("LTE_Data_LCwidget")
        LTE_Data_LCwidget.resize(841, 586)

        # Graph Area
        self.lte_datalc_GArea = QtWidgets.QScrollArea(LTE_Data_LCwidget)
        self.lte_datalc_GArea.setGeometry(QtCore.QRect(20, 10, 801, 371))
        self.lte_datalc_GArea.setWidgetResizable(True)
        self.lte_datalc_GArea.setObjectName("lte_datalc_GArea")

        # Scroll Area
        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 799, 369))
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        self.lte_datalc_GArea.setWidget(self.scrollAreaWidgetContents)

        # DataTable
        self.lte_data_tableWidget = QtWidgets.QTableWidget(LTE_Data_LCwidget)
        self.lte_data_tableWidget.setGeometry(QtCore.QRect(20, 390, 421, 141))
        self.lte_data_tableWidget.setObjectName("lte_data_tableWidget")
        self.lte_data_tableWidget.setColumnCount(4)
        self.lte_data_tableWidget.setRowCount(4)
        item = QtWidgets.QTableWidgetItem()
        self.lte_data_tableWidget.setVerticalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.lte_data_tableWidget.setVerticalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.lte_data_tableWidget.setVerticalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.lte_data_tableWidget.setVerticalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.lte_data_tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.lte_data_tableWidget.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.lte_data_tableWidget.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.lte_data_tableWidget.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.lte_data_tableWidget.setItem(0, 0, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.lte_data_tableWidget.setItem(0, 1, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.lte_data_tableWidget.setItem(0, 2, item)
        item = QtWidgets.QTableWidgetItem()
        brush = QtGui.QBrush(QtGui.QColor(255, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        item.setBackground(brush)
        self.lte_data_tableWidget.setItem(0, 3, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.lte_data_tableWidget.setItem(1, 0, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.lte_data_tableWidget.setItem(1, 1, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.lte_data_tableWidget.setItem(1, 2, item)
        item = QtWidgets.QTableWidgetItem()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        item.setBackground(brush)
        self.lte_data_tableWidget.setItem(1, 3, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.lte_data_tableWidget.setItem(2, 0, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.lte_data_tableWidget.setItem(2, 1, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.lte_data_tableWidget.setItem(2, 2, item)
        item = QtWidgets.QTableWidgetItem()
        brush = QtGui.QBrush(QtGui.QColor(0, 124, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        item.setBackground(brush)
        self.lte_data_tableWidget.setItem(2, 3, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.lte_data_tableWidget.setItem(3, 0, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.lte_data_tableWidget.setItem(3, 1, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.lte_data_tableWidget.setItem(3, 2, item)
        item = QtWidgets.QTableWidgetItem()
        brush = QtGui.QBrush(QtGui.QColor(255, 119, 171))
        brush.setStyle(QtCore.Qt.SolidPattern)
        item.setBackground(brush)
        self.lte_data_tableWidget.setItem(3, 3, item)
        self.lte_data_tableWidget.horizontalHeader().setVisible(True)
        self.lte_data_tableWidget.horizontalHeader().setHighlightSections(True)
        self.lte_data_tableWidget.verticalHeader().setVisible(False)

        # DateLabel
        self.datelabel = QtWidgets.QLabel(LTE_Data_LCwidget)
        self.datelabel.setGeometry(QtCore.QRect(655, 38, 47, 13))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.datelabel.setFont(font)
        self.datelabel.setObjectName("datelabel")
        self.lineEdit = QtWidgets.QLineEdit(LTE_Data_LCwidget)
        self.lineEdit.setGeometry(QtCore.QRect(703, 36, 88, 20))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.lineEdit.setFont(font)
        self.lineEdit.setReadOnly(True)
        self.lineEdit.setObjectName("lineEdit")
        self.lineEdit.setAlignment(QtCore.Qt.AlignCenter)

        # Graph's Widget
        self.lte_data_widget = Line_Chart(self.scrollAreaWidgetContents,
                                          self.title,
                                          self.lte_data_tableWidget,
                                          self.lineEdit)
        self.lte_data_widget.setGeometry(QtCore.QRect(10, 9, 781, 351))
        self.lte_data_widget.setObjectName("lte_data_widget")

        self.retranslateUi(LTE_Data_LCwidget)
        QtCore.QMetaObject.connectSlotsByName(LTE_Data_LCwidget)

    def retranslateUi(self, LTE_Data_LCwidget):
        _translate = QtCore.QCoreApplication.translate
        LTE_Data_LCwidget.setWindowTitle(
            _translate("LTE_Data_LCwidget", "LTE Data Line Chart [MS1]"))
        item = self.lte_data_tableWidget.verticalHeaderItem(0)
        item.setText(_translate("LTE_Data_LCwidget", "1"))
        item = self.lte_data_tableWidget.verticalHeaderItem(1)
        item.setText(_translate("LTE_Data_LCwidget", "2"))
        item = self.lte_data_tableWidget.verticalHeaderItem(2)
        item.setText(_translate("LTE_Data_LCwidget", "3"))
        item = self.lte_data_tableWidget.verticalHeaderItem(3)
        item.setText(_translate("LTE_Data_LCwidget", "4"))
        item = self.lte_data_tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("LTE_Data_LCwidget", "Element"))
        item = self.lte_data_tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("LTE_Data_LCwidget", "Value"))
        item = self.lte_data_tableWidget.horizontalHeaderItem(2)
        item.setText(_translate("LTE_Data_LCwidget", "MS"))
        item = self.lte_data_tableWidget.horizontalHeaderItem(3)
        item.setText(_translate("LTE_Data_LCwidget", "Color"))
        __sortingEnabled = self.lte_data_tableWidget.isSortingEnabled()
        self.lte_data_tableWidget.setSortingEnabled(False)
        item = self.lte_data_tableWidget.item(0, 0)
        item.setText(
            _translate("LTE_Data_LCwidget",
                       "Download Overall Throughput(kbps)"))
        item = self.lte_data_tableWidget.item(0, 2)
        item.setText(_translate("LTE_Data_LCwidget", "MS1"))
        item = self.lte_data_tableWidget.item(1, 0)
        item.setText(
            _translate("LTE_Data_LCwidget", "Upload Overall Throughput(kbps)"))
        item = self.lte_data_tableWidget.item(1, 2)
        item.setText(_translate("LTE_Data_LCwidget", "MS1"))
        item = self.lte_data_tableWidget.item(2, 0)
        item.setText(
            _translate("LTE_Data_LCwidget", "LTE L1 Throughput Mbps[1]"))
        item = self.lte_data_tableWidget.item(2, 2)
        item.setText(_translate("LTE_Data_LCwidget", "MS1"))
        item = self.lte_data_tableWidget.item(3, 0)
        item.setText(_translate("LTE_Data_LCwidget", "LTE BLER[1]"))
        item = self.lte_data_tableWidget.item(3, 2)
        item.setText(_translate("LTE_Data_LCwidget", "MS1"))
        self.lte_data_tableWidget.setSortingEnabled(__sortingEnabled)
        self.datelabel.setText(_translate("LTE_Data_LCwidget", "Date :"))

    def moveChart(self,sampledate):      
        self.lte_data_widget.moveLineChart(sampledate)

# WCDMA Data Line Chart UI
class Ui_WCDMA_Data_LCwidget(QWidget):
    def __init__(self, windowName):
        super(Ui_WCDMA_Data_LCwidget, self).__init__()
        self.title = windowName
        self.setupUi(self)

    def setupUi(self, WCDMA_Data_LCwidget):
        WCDMA_Data_LCwidget.setObjectName("WCDMA_Data_LCwidget")
        WCDMA_Data_LCwidget.resize(841, 586)

        # Graph Area
        self.wcdma_datalc_GArea = QtWidgets.QScrollArea(WCDMA_Data_LCwidget)
        self.wcdma_datalc_GArea.setGeometry(QtCore.QRect(20, 10, 801, 371))
        self.wcdma_datalc_GArea.setWidgetResizable(True)
        self.wcdma_datalc_GArea.setObjectName("wcdma_datalc_GArea")

        # Scroll Area
        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 799, 369))
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        self.wcdma_datalc_GArea.setWidget(self.scrollAreaWidgetContents)

        # DataTable
        self.wcdma_data_tableWidget = QtWidgets.QTableWidget(
            WCDMA_Data_LCwidget)
        self.wcdma_data_tableWidget.setGeometry(QtCore.QRect(
            20, 390, 421, 141))
        self.wcdma_data_tableWidget.setObjectName("wcdma_data_tableWidget")
        self.wcdma_data_tableWidget.setColumnCount(4)
        self.wcdma_data_tableWidget.setRowCount(4)
        item = QtWidgets.QTableWidgetItem()
        self.wcdma_data_tableWidget.setVerticalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.wcdma_data_tableWidget.setVerticalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.wcdma_data_tableWidget.setVerticalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.wcdma_data_tableWidget.setVerticalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.wcdma_data_tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.wcdma_data_tableWidget.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.wcdma_data_tableWidget.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.wcdma_data_tableWidget.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.wcdma_data_tableWidget.setItem(0, 0, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.wcdma_data_tableWidget.setItem(0, 1, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.wcdma_data_tableWidget.setItem(0, 2, item)
        item = QtWidgets.QTableWidgetItem()
        brush = QtGui.QBrush(QtGui.QColor(255, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        item.setBackground(brush)
        self.wcdma_data_tableWidget.setItem(0, 3, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.wcdma_data_tableWidget.setItem(1, 0, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.wcdma_data_tableWidget.setItem(1, 1, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.wcdma_data_tableWidget.setItem(1, 2, item)
        item = QtWidgets.QTableWidgetItem()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        item.setBackground(brush)
        self.wcdma_data_tableWidget.setItem(1, 3, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.wcdma_data_tableWidget.setItem(2, 0, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.wcdma_data_tableWidget.setItem(2, 1, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.wcdma_data_tableWidget.setItem(2, 2, item)
        item = QtWidgets.QTableWidgetItem()
        brush = QtGui.QBrush(QtGui.QColor(0, 124, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        item.setBackground(brush)
        self.wcdma_data_tableWidget.setItem(2, 3, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.wcdma_data_tableWidget.setItem(3, 0, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.wcdma_data_tableWidget.setItem(3, 1, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.wcdma_data_tableWidget.setItem(3, 2, item)
        item = QtWidgets.QTableWidgetItem()
        brush = QtGui.QBrush(QtGui.QColor(255, 119, 171))
        brush.setStyle(QtCore.Qt.SolidPattern)
        item.setBackground(brush)
        self.wcdma_data_tableWidget.setItem(3, 3, item)
        self.wcdma_data_tableWidget.horizontalHeader().setVisible(True)
        self.wcdma_data_tableWidget.horizontalHeader().setHighlightSections(
            True)
        self.wcdma_data_tableWidget.verticalHeader().setVisible(False)

        # DateLabel
        self.datelabel = QtWidgets.QLabel(WCDMA_Data_LCwidget)
        self.datelabel.setGeometry(QtCore.QRect(655, 38, 47, 13))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.datelabel.setFont(font)
        self.datelabel.setObjectName("datelabel")
        self.lineEdit = QtWidgets.QLineEdit(WCDMA_Data_LCwidget)
        self.lineEdit.setGeometry(QtCore.QRect(703, 36, 88, 20))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.lineEdit.setFont(font)
        self.lineEdit.setReadOnly(True)
        self.lineEdit.setObjectName("lineEdit")
        self.lineEdit.setAlignment(QtCore.Qt.AlignCenter)

        # Graph's Widget
        self.wcdma_data_widget = Line_Chart(self.scrollAreaWidgetContents,
                                            self.title,
                                            self.wcdma_data_tableWidget,
                                            self.lineEdit)
        self.wcdma_data_widget.setGeometry(QtCore.QRect(10, 9, 781, 351))
        self.wcdma_data_widget.setObjectName("wcdma_data_widget")

        self.retranslateUi(WCDMA_Data_LCwidget)
        QtCore.QMetaObject.connectSlotsByName(WCDMA_Data_LCwidget)

    def retranslateUi(self, WCDMA_Data_LCwidget):
        _translate = QtCore.QCoreApplication.translate
        WCDMA_Data_LCwidget.setWindowTitle(
            _translate("WCDMA_Data_LCwidget", "WCDMA Data Line Chart [MS1]"))
        item = self.wcdma_data_tableWidget.verticalHeaderItem(0)
        item.setText(_translate("WCDMA_Data_LCwidget", "1"))
        item = self.wcdma_data_tableWidget.verticalHeaderItem(1)
        item.setText(_translate("WCDMA_Data_LCwidget", "2"))
        item = self.wcdma_data_tableWidget.verticalHeaderItem(2)
        item.setText(_translate("WCDMA_Data_LCwidget", "3"))
        item = self.wcdma_data_tableWidget.verticalHeaderItem(3)
        item.setText(_translate("WCDMA_Data_LCwidget", "4"))
        item = self.wcdma_data_tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("WCDMA_Data_LCwidget", "Element"))
        item = self.wcdma_data_tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("WCDMA_Data_LCwidget", "Value"))
        item = self.wcdma_data_tableWidget.horizontalHeaderItem(2)
        item.setText(_translate("WCDMA_Data_LCwidget", "MS"))
        item = self.wcdma_data_tableWidget.horizontalHeaderItem(3)
        item.setText(_translate("WCDMA_Data_LCwidget", "Color"))
        __sortingEnabled = self.wcdma_data_tableWidget.isSortingEnabled()
        self.wcdma_data_tableWidget.setSortingEnabled(False)
        item = self.wcdma_data_tableWidget.item(0, 0)
        item.setText(
            _translate("WCDMA_Data_LCwidget",
                       "WCDMA RLC DL Throughput (kbit/s)"))
        item = self.wcdma_data_tableWidget.item(0, 2)
        item.setText(_translate("WCDMA_Data_LCwidget", "MS1"))
        item = self.wcdma_data_tableWidget.item(1, 0)
        item.setText(
            _translate("WCDMA_Data_LCwidget",
                       "Application DL Throughput(kbps)[1]"))
        item = self.wcdma_data_tableWidget.item(1, 2)
        item.setText(_translate("WCDMA_Data_LCwidget", "MS1"))
        item = self.wcdma_data_tableWidget.item(2, 0)
        item.setText(
            _translate("WCDMA_Data_LCwidget",
                       "Download Session Average Throughput(kbps)"))
        item = self.wcdma_data_tableWidget.item(2, 2)
        item.setText(_translate("WCDMA_Data_LCwidget", "MS1"))
        item = self.wcdma_data_tableWidget.item(3, 0)
        item.setText(_translate("WCDMA_Data_LCwidget",
                                "Data HSDPA Throughput"))
        item = self.wcdma_data_tableWidget.item(3, 2)
        item.setText(_translate("WCDMA_Data_LCwidget", "MS1"))
        self.wcdma_data_tableWidget.setSortingEnabled(__sortingEnabled)
        self.datelabel.setText(_translate("WCDMA_Data_LCwidget", "Date :"))

    def moveChart(self,sampledate):      
        self.wcdma_data_widget.moveLineChart(sampledate)

# Class For Line Chart
class Line_Chart(QWidget):
    def __init__(self, parent, windowName, tablewidget, datelabel):
        super().__init__(parent)
        self.canvas = FigureCanvas(Figure(figsize=(4, 4)))
        vertical_layout = QVBoxLayout()
        vertical_layout.addWidget(self.canvas)
        self.canvas.axes = self.canvas.figure.add_subplot()
        self.setLayout(vertical_layout)
        self.title = windowName
        self.tablewidget = tablewidget
        self.datelabel = datelabel
        self.Date = []
        self.Time = [] 
        self.lines = []   
        self.result = {}
        #print(self.title)

        # Graph Toolbar
        toolbar = NavigationToolbar(self.canvas, self)
        vertical_layout.addWidget(toolbar)

        # Choose Line Chart By WindowName
        if self.title == 'LTE_LTE Line Chart':
            self.LTE()
        elif self.title == 'WCDMA_Line Chart':
            self.WCDMA()
        elif self.title == 'Data_LTE Data Line Chart':
            self.LTE_Data()
        elif self.title == 'Data_WCDMA Data Line Chart':
            self.WCDMA_Data()

    # Event Function
    def on_pick(self,event):
        for Line in self.lines:
            Line.set_linewidth(1)
        event.artist.set_linewidth(2.5)
        self.canvas.draw()

    # Show Data In Table
    def get_table_data(self,event):
        Chart_datalist = []
        x, y = int(event.xdata), event.ydata
        for dict_item in self.result.items():
            if not (dict_item[0] == 'time'):
                Chart_datalist.append(dict_item[1][x])
        for row in range(len(Chart_datalist)):
            Value = round(Chart_datalist[row], 3)
            self.tablewidget.item(row, 1).setText(str(Value))        
       
    # Create LTE Line Chart
    def LTE(self):
        self.canvas.axes.set_title('LTE Line Chart')

        # Open Database And Query
        ChartQuery = LineChartQuery([
            'time', 'lte_sinr_rx0_1', 'lte_sinr_rx1_1', 'lte_inst_rsrp_1',
            'lte_inst_rsrq_1', 'lte_inst_rssi_1'
        ], 'lte_cell_meas','')
        self.result = ChartQuery.getData()
        for index in range(len(self.result['time'])):
            self.Date.append(self.result['time'][index].split(' ')[0])
            self.Time.append(self.result['time'][index].split(' ')[1])

        # Graph setting
        self.datelabel.setText(self.Date[0])
        self.canvas.axes.set_facecolor('#fef8e7')
        self.canvas.axes.autoscale(False)
        self.canvas.axes.xaxis.grid(True)
        self.canvas.axes.yaxis.grid(True)
        self.canvas.axes.set_xticklabels(self.Time)
        self.canvas.axes.yaxis.set_major_locator(plt.MaxNLocator(10))
        self.canvas.axes.yaxis.set_major_formatter(plt.ScalarFormatter())

        # Ploting Graph

        #lines = []
        ColorArr = ['#ff0000', '#0000ff', '#007c00', '#ff77ab', '#000000']
        for data in self.result.items():
            if data[0] != 'time':
                newline, = self.canvas.axes.plot(self.Time,
                                                 data[1],
                                                 picker=5,
                                                 linewidth=1)
                self.lines.append(newline, )
        for colorindex in range(len(self.lines)):
            self.lines[colorindex].set_color(ColorArr[colorindex])

        # Scale Editing
        self.canvas.axes.set_ylim(-120, 20)
        self.canvas.axes.set_xlim(self.Time[0], self.Time[4])

        # Call Event Function
        pick = self.canvas.mpl_connect('pick_event', self.on_pick)
        tabledata = self.canvas.mpl_connect('button_press_event',
                                            self.get_table_data)

    # Create WCDMA Line Chart
    def WCDMA(self):

        #ยังไม่เสร็จ -- No data in Database

        self.canvas.axes.set_title('WCDMA Line Chart')

        # Open Database And Query
        ChartQuery1 = LineChartQuery(
            ['time', 'wcdma_aset_ecio_avg', 'wcdma_aset_rscp_avg'],
            'wcdma_cell_meas', '')
        self.result = ChartQuery1.getData()
        ChartQuery2 = LineChartQuery(['wcdma_rssi'], 'wcdma_rx_power', '')
        result2 = ChartQuery2.getData()
        ChartQuery3 = LineChartQuery(
            ['wcdma_bler_average_percent_all_channels'], 'wcdma_bler', '')
        result3 = ChartQuery3.getData()
        self.result.update(result2)
        self.result.update(result3)
        for index in range(len(self.result['time'])):
            self.Date.append(self.result['time'][index].split(' ')[0])
            self.Time.append(self.result['time'][index].split(' ')[1])

        # Graph setting
        self.datelabel.setText(self.Date[0])
        self.canvas.axes.set_facecolor('#fef8e7')
        self.canvas.axes.autoscale(False)
        self.canvas.axes.xaxis.grid(True)
        self.canvas.axes.yaxis.grid(True)
        self.canvas.axes.set_xticklabels(self.Time)
        self.canvas.axes.yaxis.set_major_locator(plt.MaxNLocator(10))
        self.canvas.axes.yaxis.set_major_formatter(plt.ScalarFormatter())

        # Ploting Graph

        #Array for line's color
        ColorArr = ['#ff0000', '#0000ff', '#007c00', '#ff77ab', '#000000']

        for data in self.result.items():
            if data[0] != 'time':
                newline, = self.canvas.axes.plot(self.Time,
                                                 data[1],
                                                 picker=5,
                                                 linewidth=1)
                self.lines.append(newline, )

        for colorindex in range(len(self.lines)):
            self.lines[colorindex].set_color(ColorArr[colorindex])

        # Scale Editing
        self.canvas.axes.set_ylim(-120, 20)
        self.canvas.axes.set_xlim(self.Time[0], self.Time[4])

        # Call Event Function
        pick = self.canvas.mpl_connect('pick_event', self.on_pick)
        tabledata = self.canvas.mpl_connect('button_press_event',
                                            self.get_table_data)

    # Create WCDMA Data Line Chart
    def WCDMA_Data(self):

        #ยังไม่เสร็จ -- No data in Database

        self.canvas.axes.set_title('WCDMA Data Line Chart')

        # Open Database And Query
        ChartQuery1 = LineChartQuery(['time', 'data_wcdma_rlc_dl_throughput'],
                                     'data_wcdma_rlc_stats', '')
        self.result = ChartQuery1.getData()
        ChartQuery2 = LineChartQuery(
            ['data_app_dl_throughput_1', 'data_download_session_average'],
            'data_app_throughput', '')
        result2 = ChartQuery2.getData()
        ChartQuery3 = LineChartQuery(['data_hsdpa_throughput'],
                                     'wcdma_hsdpa_stats', '')
        result3 = ChartQuery3.getData()
        self.result.update(result2)
        self.result.update(result3)
        for index in range(len(self.result['time'])):
            self.Date.append(self.result['time'][index].split(' ')[0])
            self.Time.append(self.result['time'][index].split(' ')[1])

        # Graph setting
        self.datelabel.setText(self.Date[0])
        self.canvas.axes.set_facecolor('#fef8e7')
        self.canvas.axes.autoscale(False)
        self.canvas.axes.xaxis.grid(True)
        self.canvas.axes.yaxis.grid(True)
        self.canvas.axes.set_xticklabels(self.Time)
        self.canvas.axes.yaxis.set_major_locator(plt.MaxNLocator(10))
        self.canvas.axes.yaxis.set_major_formatter(plt.ScalarFormatter())

        # Ploting Graph

        #Array for line's color
        ColorArr = ['#ff0000', '#0000ff', '#007c00', '#ff77ab', '#000000']

        for data in self.result.items():
            if data[0] != 'time':
                newline, = self.canvas.axes.plot(self.Time,
                                                 data[1],
                                                 picker=5,
                                                 linewidth=1)
                self.lines.append(newline, )

        for colorindex in range(len(self.lines)):
            self.lines[colorindex].set_color(ColorArr[colorindex])

        # Scale Editing
        self.canvas.axes.set_ylim(-120, 20)
        self.canvas.axes.set_xlim(self.Time[0], self.Time[4])

        # Call Event Function
        pick = self.canvas.mpl_connect('pick_event', self.on_pick)
        tabledata = self.canvas.mpl_connect('button_press_event',
                                            self.get_table_data)

    # Create LTE Data Line Chart
    def LTE_Data(self):

        self.canvas.axes.set_title('LTE Data Line Chart')

        # Open Database And Query
        ChartQuery1 = LineChartQuery(
            ['time', 'lte_l1_throughput_mbps_1', 'lte_bler_1'], 'lte_l1_dl_tp',
            '')
        self.result = ChartQuery1.getData()
        ChartQuery2 = LineChartQuery(
            ['data_download_overall', 'data_upload_overall'],
            'data_app_throughput', '')
        result2 = ChartQuery2.getData()
        self.result.update(result2)
        for index in range(len(self.result['time'])):
            self.Date.append(self.result['time'][index].split(' ')[0])
            self.Time.append(self.result['time'][index].split(' ')[1])

        # Graph setting
        self.datelabel.setText(self.Date[0])
        self.canvas.axes.set_facecolor('#fef8e7')
        self.canvas.axes.autoscale(False)
        self.canvas.axes.xaxis.grid(True)
        self.canvas.axes.yaxis.grid(True)
        self.canvas.axes.set_xticklabels(self.Time)
        self.canvas.axes.yaxis.set_major_locator(plt.MaxNLocator(10))
        self.canvas.axes.yaxis.set_major_formatter(plt.ScalarFormatter())

        # Ploting Graph
 
        #Array for line's color
        ColorArr = ['#ff0000', '#0000ff', '#007c00', '#ff77ab', '#000000']

        for data in self.result.items():
            if data[0] != 'time':
                newline, = self.canvas.axes.plot(self.Time,
                                                 data[1],
                                                 picker=5,
                                                 linewidth=1)
                self.lines.append(newline, )

        for colorindex in range(len(self.lines)):
            self.lines[colorindex].set_color(ColorArr[colorindex])

        # Scale Editing
        self.canvas.axes.set_ylim(-20, 35)
        self.canvas.axes.set_xlim(self.Time[0], self.Time[4])

        # Call Event Function
        pick = self.canvas.mpl_connect('pick_event', self.on_pick)
        tabledata = self.canvas.mpl_connect('button_press_event',
                                            self.get_table_data)

    def moveLineChart(self,sampledate):
    # Shift Part
        dateString = str(sampledate)
        timeString = dateString.split(' ')[1][:8]
        currentTimeindex = 0
        for timeItem in self.Time:
            if timeItem[:8] == timeString:
                currentTimeindex = self.Time.index(timeItem)
                self.canvas.axes.set_xlim(self.Time[currentTimeindex], self.Time[currentTimeindex+4]) 
                break
    # Update table part
        Chart_datalist = []
        for dict_item in self.result.items():
            if not (dict_item[0] == 'time'):
                Chart_datalist.append(dict_item[1][currentTimeindex])
        for row in range(len(Chart_datalist)):
            Value = round(Chart_datalist[row], 3)
            self.tablewidget.item(row, 1).setText(str(Value)) 
                   
        self.canvas.draw()
                 
class LineChartQuery:
    def __init__(self, fieldArr, tableName, conditionStr):
        self.fieldArr = fieldArr
        self.tableName = tableName
        self.condition = conditionStr

    def countField(self):
        fieldCount = 0
        if self.fieldArr is not None:
            fieldCount = len(self.fieldArr)
        return fieldCount

    def selectFieldToQuery(self):
        selectField = '*'
        if self.fieldArr is not None:
            selectField = ",".join(self.fieldArr)
        return selectField

    def getData(self):
        result = dict()
        selectField = self.selectFieldToQuery()
        azenqosDatabase.open()
        query = QSqlQuery()
        queryString = 'select %s from %s %s' % (selectField, self.tableName,self.condition)
        query.exec_(queryString)
        while query.next():
            for field in range(len(self.fieldArr)):
                fieldName = self.fieldArr[field]
                validatedValue = self.valueValidation(query.value(field))
                if fieldName in result:
                    if isinstance(result[fieldName], list):
                        result[fieldName].append(validatedValue)
                    else:
                        result[fieldName] = [validatedValue]
                else:
                    result[fieldName] = [validatedValue]
        azenqosDatabase.close()
        return result

    def valueValidation(self, value):
        validatedValue = 0
        if value != '':
            validatedValue = value
        return validatedValue


class DataQuery:
    def __inti__(self, fieldArr, tableName, conditionStr):
        self.fieldArr = fieldArr
        self.tableName = tableName
        self.condition = conditionStr

    def countField(self):
        fieldCount = 0
        if self.fieldArr is not None:
            fieldCount = len(self.fieldArr)
        return fieldCount

    def selectFieldToQuery(self):
        selectField = '*'
        if self.fieldArr is not None:
            selectField = ",".join(self.fieldArr)
        return selectField

    def getData(self):
        result = dict()
        selectField = self.selectFieldToQuery()
        azenqosDatabase.open()
        query = QSqlQuery()
        queryString = 'select %s from %s' % (selectField, self.tableName)
        query.exec_(queryString)
        while query.next():
            for field in range(len(self.fieldArr)):
                fieldName = fieldArr[field]
                validatedValue = self.valueValidation(query.value(field))
                if fieldName in result:
                    if isinstance(result[fieldName], list):
                        result[fieldName].append(validatedValue)
                    else:
                        result[fieldName] = [validatedValue]
                else:
                    result[fieldName] = [validatedValue]
        azenqosDatabase.close()
        return result

    def valueValidation(self, value):
        validatedValue = 0
        if value is not None:
            validatedValue = value
        return validatedValue


class setInterval:
    def __init__(self, value, interval, action):
        self.interval = interval
        self.action = action
        self.stopEvent = threading.Event()
        thread = threading.Thread(target=self.__setInterval)
        thread.start()

    def __setInterval(self):
        nextTime = time.time() + self.interval
        while not self.stopEvent.wait(nextTime - time.time()):
            nextTime += self.interval
            self.action()

    def cancel(self):
        self.stopEvent.set()


class CellInformation(QDialog):
    def __init__(self, parent = None):
        super(CellInformation, self).__init__(parent)
        self.setupUi(self)

    def setupUi(self, CellInformation):
        CellInformation.setObjectName("Cell Information")
        CellInformation.resize(640, 522)
        CellInformation.setGeometry(QtCore.QRect(0, 0, 640, 522))
        CellInformation.setMinimumSize(640,522)
        self.verticalLayoutWidget = QtWidgets.QWidget(CellInformation)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(0, 320, 601, 151))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.SettingLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.SettingLayout.setContentsMargins(10, 10, 10, 10)
        self.SettingLayout.setObjectName("SettingLayout")
        self.Setting = QtWidgets.QGroupBox(self.verticalLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Setting.sizePolicy().hasHeightForWidth())
        self.Setting.setSizePolicy(sizePolicy)
        self.Setting.setMinimumSize(QtCore.QSize(0, 0))
        font = QtGui.QFont()
        font.setPointSize(13)
        self.Setting.setFont(font)
        self.Setting.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignTop)
        self.Setting.setObjectName("Setting")
        self.OpacityCheckbox = QtWidgets.QCheckBox(self.Setting)
        self.OpacityCheckbox.setGeometry(QtCore.QRect(30, 30, 86, 31))
        self.OpacityCheckbox.setObjectName("OpacityCheckbox")
        self.PercentageCombobox = QtWidgets.QComboBox(self.Setting)
        self.PercentageCombobox.setGeometry(QtCore.QRect(100, 30, 71, 31))
        self.PercentageCombobox.setObjectName("PercentageCombobox")
        self.PercentageLabel = QtWidgets.QLabel(self.Setting)
        self.PercentageLabel.setGeometry(QtCore.QRect(170, 30, 21, 31))
        self.PercentageLabel.setObjectName("PercentageLabel")
        self.CellDefinitionLabel = QtWidgets.QLabel(self.Setting)
        self.CellDefinitionLabel.setGeometry(QtCore.QRect(30, 70, 121, 16))
        self.CellDefinitionLabel.setObjectName("CellDefinitionLabel")
        self.CellDefinitionCombobox = QtWidgets.QComboBox(self.Setting)
        self.CellDefinitionCombobox.setGeometry(QtCore.QRect(160, 60, 121, 41))
        self.CellDefinitionCombobox.setObjectName("CellDefinitionCombobox")
        self.SearchCellDistanceLabel = QtWidgets.QLabel(self.Setting)
        self.SearchCellDistanceLabel.setGeometry(QtCore.QRect(30, 100, 131, 16))
        self.SearchCellDistanceLabel.setObjectName("SearchCellDistanceLabel")
        self.KiloAmount = QtWidgets.QLineEdit(self.Setting)
        self.KiloAmount.setGeometry(QtCore.QRect(180, 100, 61, 21))
        self.KiloAmount.setObjectName("KiloAmount")
        self.KilometerLabel = QtWidgets.QLabel(self.Setting)
        self.KilometerLabel.setGeometry(QtCore.QRect(260, 100, 59, 16))
        self.KilometerLabel.setObjectName("KilometerLabel")
        self.SettingLayout.addWidget(self.Setting)
        self.verticalLayoutWidget_2 = QtWidgets.QWidget(CellInformation)
        self.verticalLayoutWidget_2.setGeometry(QtCore.QRect(0, 0, 601, 321))
        self.verticalLayoutWidget_2.setObjectName("verticalLayoutWidget_2")
        self.CellLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_2)
        self.CellLayout.setContentsMargins(10, 20, 10, 10)
        self.CellLayout.setObjectName("CellLayout")
        self.CellDifinitionFile = QtWidgets.QGroupBox(self.verticalLayoutWidget_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.CellDifinitionFile.sizePolicy().hasHeightForWidth())
        self.CellDifinitionFile.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(13)
        self.CellDifinitionFile.setFont(font)
        self.CellDifinitionFile.setObjectName("CellDifinitionFile")
        self.FilePath4 = QtWidgets.QLineEdit(self.CellDifinitionFile)
        self.FilePath4.setGeometry(QtCore.QRect(110, 270, 341, 21))
        self.FilePath4.setObjectName("FilePath4")
        self.CdmaCellFileCheckbox = QtWidgets.QCheckBox(self.CellDifinitionFile)
        self.CdmaCellFileCheckbox.setGeometry(QtCore.QRect(30, 240, 151, 20))
        self.CdmaCellFileCheckbox.setObjectName("CdmaCellFileCheckbox")
        self.LteCellFileCheckbox = QtWidgets.QCheckBox(self.CellDifinitionFile)
        self.LteCellFileCheckbox.setGeometry(QtCore.QRect(30, 170, 131, 20))
        self.LteCellFileCheckbox.setObjectName("LteCellFileCheckbox")
        self.FilePath2 = QtWidgets.QLineEdit(self.CellDifinitionFile)
        self.FilePath2.setGeometry(QtCore.QRect(110, 130, 341, 21))
        self.FilePath2.setObjectName("FilePath2")
        self.FilenameLabel1 = QtWidgets.QLabel(self.CellDifinitionFile)
        self.FilenameLabel1.setGeometry(QtCore.QRect(40, 60, 59, 16))
        self.FilenameLabel1.setObjectName("FilenameLabel1")
        self.FilenameLabel4 = QtWidgets.QLabel(self.CellDifinitionFile)
        self.FilenameLabel4.setGeometry(QtCore.QRect(40, 270, 59, 16))
        self.FilenameLabel4.setObjectName("FilenameLabel4")
        self.WcdmaCellFileCheckbox = QtWidgets.QCheckBox(self.CellDifinitionFile)
        self.WcdmaCellFileCheckbox.setGeometry(QtCore.QRect(30, 100, 161, 20))
        self.WcdmaCellFileCheckbox.setObjectName("WcdmaCellFileCheckbox")
        self.FilePath1 = QtWidgets.QLineEdit(self.CellDifinitionFile)
        self.FilePath1.setGeometry(QtCore.QRect(110, 60, 341, 21))
        self.FilePath1.setObjectName("FilePath1")
        self.FilePath3 = QtWidgets.QLineEdit(self.CellDifinitionFile)
        self.FilePath3.setGeometry(QtCore.QRect(110, 200, 341, 21))
        self.FilePath3.setObjectName("FilePath3")
        self.FilenameLabel3 = QtWidgets.QLabel(self.CellDifinitionFile)
        self.FilenameLabel3.setGeometry(QtCore.QRect(40, 200, 59, 16))
        self.FilenameLabel3.setObjectName("FilenameLabel3")
        self.GsmCellFileCheckbox = QtWidgets.QCheckBox(self.CellDifinitionFile)
        self.GsmCellFileCheckbox.setGeometry(QtCore.QRect(30, 30, 141, 20))
        self.GsmCellFileCheckbox.setObjectName("GsmCellFileCheckbox")
        self.FilenameLabel2 = QtWidgets.QLabel(self.CellDifinitionFile)
        self.FilenameLabel2.setGeometry(QtCore.QRect(40, 130, 59, 16))
        self.FilenameLabel2.setObjectName("FilenameLabel2")
        self.BrowseButton1 = QtWidgets.QToolButton(self.CellDifinitionFile)
        self.BrowseButton1.setGeometry(QtCore.QRect(460, 60, 51, 22))
        self.BrowseButton1.setObjectName("BrowseButton1")
        self.BrowseButton2 = QtWidgets.QToolButton(self.CellDifinitionFile)
        self.BrowseButton2.setGeometry(QtCore.QRect(460, 130, 51, 22))
        self.BrowseButton2.setObjectName("BrowseButton2")
        self.BrowseButton3 = QtWidgets.QToolButton(self.CellDifinitionFile)
        self.BrowseButton3.setGeometry(QtCore.QRect(460, 200, 51, 22))
        self.BrowseButton3.setObjectName("BrowseButton3")
        self.BrowseButton4 = QtWidgets.QToolButton(self.CellDifinitionFile)
        self.BrowseButton4.setGeometry(QtCore.QRect(460, 270, 51, 22))
        self.BrowseButton4.setObjectName("BrowseButton4")
        self.CellLayout.addWidget(self.CellDifinitionFile)
        self.verticalLayoutWidget_3 = QtWidgets.QWidget(CellInformation)
        self.verticalLayoutWidget_3.setGeometry(QtCore.QRect(0, 470, 601, 55))
        self.verticalLayoutWidget_3.setObjectName("verticalLayoutWidget_3")
        self.ButtonLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_3)
        self.ButtonLayout.setContentsMargins(10, 10, 10, 10)
        self.ButtonLayout.setObjectName("ButtonLayout")
        self.buttonBox = QtWidgets.QDialogButtonBox(self.verticalLayoutWidget_3)
        self.buttonBox.setStandardButtons(QtWidgets.QDialogButtonBox.Cancel|QtWidgets.QDialogButtonBox.Ok)
        self.buttonBox.setObjectName("buttonBox")
        self.ButtonLayout.addWidget(self.buttonBox)

        self.retranslateUi(CellInformation)
        QtCore.QMetaObject.connectSlotsByName(CellInformation)

    def retranslateUi(self, CellInformation):
        _translate = QtCore.QCoreApplication.translate
        CellInformation.setWindowTitle(_translate("CellInformation", "CellInformation"))
        self.Setting.setTitle(_translate("CellInformation", "Setting"))
        self.OpacityCheckbox.setText(_translate("CellInformation", "Opacity"))
        self.PercentageLabel.setText(_translate("CellInformation", "%"))
        self.CellDefinitionLabel.setText(_translate("CellInformation", "Cell Definition Text"))
        self.SearchCellDistanceLabel.setText(_translate("CellInformation", "Search Cell Distance"))
        self.KilometerLabel.setText(_translate("CellInformation", "Kilometer"))
        self.CellDifinitionFile.setTitle(_translate("CellInformation", "Cell definition file"))
        self.CdmaCellFileCheckbox.setText(_translate("CellInformation", "Use CDMA cell file"))
        self.LteCellFileCheckbox.setText(_translate("CellInformation", "Use LTE cell file"))
        self.FilenameLabel1.setText(_translate("CellInformation", "Filename"))
        self.FilenameLabel4.setText(_translate("CellInformation", "Filename"))
        self.WcdmaCellFileCheckbox.setText(_translate("CellInformation", "Use WCDMA cell file"))
        self.FilenameLabel3.setText(_translate("CellInformation", "Filename"))
        self.GsmCellFileCheckbox.setText(_translate("CellInformation", "Use GSM cell file"))
        self.FilenameLabel2.setText(_translate("CellInformation", "Filename"))
        self.BrowseButton1.setText(_translate("CellInformation", "Browse"))
        self.BrowseButton2.setText(_translate("CellInformation", "Browse"))
        self.BrowseButton3.setText(_translate("CellInformation", "Browse"))
        self.BrowseButton4.setText(_translate("CellInformation", "Browse"))

    def browseFile(self):
        return False



if __name__ == '__main__':
    app = QApplication(sys.argv)
    dialog = Ui_DatabaseDialog()
    dialog.show()

    sys.exit(app.exec_())
