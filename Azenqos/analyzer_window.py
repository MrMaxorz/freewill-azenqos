# -*- coding: utf-8 -*-
"""
/***************************************************************************
 analyzer_window
                                 A QGIS plugin
 Azenqos Plugin
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2019-03-18
        git sha              : $Format:%H$
        copyright            : Copyright (C) 2019-2020 Freewill FX Co., Ltd. All rights reserved
        email                : gritmanoch@longdo.com
 ***************************************************************************/

/***************************************************************************
 *                                                                        *
 *  This program is free software; you can redistribute it and/or modify  *
 *  it under the terms of the GNU General Public License as published by  *
 *  the Free Software Foundation; either version 2 of the License, or     *
 *  (at your option) any later version.                                   *
 *                                                                        *
 ***************************************************************************/
"""
import datetime
import threading
import sys
import traceback
import os
import csv
# Adding folder path
sys.path.insert(1, os.path.dirname(os.path.realpath(__file__)))
import pyqtgraph as pg
import numpy as np
import analyzer_vars
try:
    import tasks
except:
    pass
import azq_utils
import shutil
from PyQt5.QtWidgets import *
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import *  # QAbstractTableModel, QVariant, Qt, pyqtSignal, QThread
from PyQt5.QtSql import *  # QSqlQuery, QSqlDatabase
from PyQt5.QtGui import *
try:
    from qgis.core import *
    from qgis.utils import *
    from qgis.gui import *
except:
    pass
from cdma_evdo_query import CdmaEvdoQuery
from globalutils import Utils
from linechart import *
from worker import Worker
from timeslider import *
from datatable import *
from atomic_int import atomic_int
import import_db_dialog
GUI_SETTING_NAME_PREFIX = "{}/".format(os.path.basename(__file__))
import signal
signal.signal(signal.SIGINT, signal.SIG_DFL)  # exit upon ctrl-c

class analyzer_window(QMainWindow):

    timechange_service_thread = None
    timechange_to_service_counter = atomic_int(0)
    closed = False
    signal_ui_thread_emit_time_slider_updated = pyqtSignal(float)
    gc = analyzer_vars.analyzer_vars()
    dbfp = None
    

    def __init__(self, options={}):

        self.qgis_iface = None
        if ("qgis_iface" not in options) or (not options["qgis_iface"]):
            print("analyzer_window: standalone mode")
        else:
            print("analyzer_window: qgis mode")
            self.qgis_iface = options["qgis_iface"]
            
        self.settings = QSettings(
            azq_utils.get_local_fp("settings.ini"), QSettings.IniFormat
        )
        super(analyzer_window, self).__init__(None)
        self.signal_ui_thread_emit_time_slider_updated.connect(
            self.ui_thread_emit_time_slider_updated
        )
        self.timeSliderThread = timeSliderThread()
        self.newImport = False
        self.posObjs = []
        self.posIds = []
        self.hilightList = []
        self.maxPosId = 0
        self.currentMaxPosId = 0
        self.setupMenubar(self)
        self.setupUi(self)
        self.initializeSchema()
        self.raise_()
        self.activateWindow()
        if self.qgis_iface:
            self.canvas = qgis_iface.mapCanvas()
            self.clickTool = QgsMapToolEmitPoint(self.canvas)
            self.canvas.setMapTool(self.clickTool)
            self.clickTool.canvasClicked.connect(self.clickCanvas)
            self.canvas.selectionChanged.connect(self.selectChanged)
            QgsProject.instance().layersAdded.connect(self.renamingLayers)
            root = QgsProject.instance().layerTreeRoot()
            root.addedChildren.connect(self.mergeLayerGroup)
            QgsProject.instance().layerWillBeRemoved.connect(self.removingTreeLayer)
        self.timechange_service_thread = Worker(self.timeChangedWorkerFunc)
        self.gc.threadpool.start(self.timechange_service_thread)
        self._gui_restore()

    def ui_thread_emit_time_slider_updated(self, timestamp):
        print("ui_thread_emit_time_slider_updated")
        sampledate = datetime.datetime.fromtimestamp(timestamp)
        self.timeEdit.setDateTime(sampledate)

    def _gui_save(self):
        # mod from https://stackoverflow.com/questions/23279125/python-pyqt4-functions-to-save-and-restore-ui-widget-values
        """
        save "ui" controls and values to registry "setting"
        :return:
        """
        try:
            print("_gui_save() START")
            print("_gui_save() geom")
            self.settings.setValue(
                GUI_SETTING_NAME_PREFIX + "geom", self.saveGeometry()
            )
            print("_gui_save() state")
            self.settings.setValue(GUI_SETTING_NAME_PREFIX + "state", self.saveState())

            swl = self.mdi.subWindowList()
            swl = [w for w in swl if (w is not None and w.widget() is not None)]
            print(
                "_gui_save() len(swl)",
                len(swl),
                "len(gc.openedWindows)",
                len(gc.openedWindows),
            )
            self.settings.setValue(GUI_SETTING_NAME_PREFIX + "n_windows", len(swl))
            if swl:
                self.settings.setValue(GUI_SETTING_NAME_PREFIX + "n_windows", len(swl))
                i = -1
                for window in swl:
                    # window here is a subwindow: class SubWindowArea(QMdiSubWindow)
                    if not window.widget():
                        continue
                    print(
                        "_gui_save() window_{}_title".format(i), window.widget().title
                    )
                    i += 1
                    self.settings.setValue(
                        GUI_SETTING_NAME_PREFIX + "window_{}_title".format(i),
                        window.widget().title,
                    )
                    self.settings.setValue(
                        GUI_SETTING_NAME_PREFIX + "window_{}_geom".format(i),
                        window.saveGeometry(),
                    )
                    # tablewindows dont have saveState() self.settings.setValue(GUI_SETTING_NAME_PREFIX + "window_{}_state".format(i), window.saveState())

            self.settings.sync()  # save to disk
            print("_gui_save() DONE")
        except:
            type_, value_, traceback_ = sys.exc_info()
            exstr = str(traceback.format_exception(type_, value_, traceback_))
            print("WARNING: _gui_save() - exception: {}".format(exstr))

    def _gui_restore(self):
        """
        restore "ui" controls with values stored in registry "settings"
        :return:
        """
        try:
            print("_gui_restore() START")
            self.settings.sync()  # load from disk
            window_geom = self.settings.value(GUI_SETTING_NAME_PREFIX + "geom")
            if window_geom:
                print("_gui_restore() geom")
                self.restoreGeometry(window_geom)
            """
            state_value = self.settings.value(GUI_SETTING_NAME_PREFIX + "state")
            if state_value:
                print("_gui_restore() state")
                self.restoreState(state_value)
            """
            n_windows = self.settings.value(GUI_SETTING_NAME_PREFIX + "n_windows")
            if n_windows:
                n_windows = int(n_windows)
                for i in range(n_windows):
                    title = self.settings.value(
                        GUI_SETTING_NAME_PREFIX + "window_{}_title".format(i)
                    )
                    geom = self.settings.value(
                        GUI_SETTING_NAME_PREFIX + "window_{}_geom".format(i)
                    )
                    print("_gui_restore() window i {} title {}".format(i, title))
                    if title and "_" in title:
                        parts = title.split("_", 1)
                        if len(parts) == 2:
                            print("")
                            print(
                                "_gui_restore() window i {} title {} openwindow".format(
                                    i, title
                                )
                            )
                            self.classifySelectedItems(parts[0], parts[1])
                    if geom:
                        for window in self.mdi.subWindowList():
                            if not window.widget():
                                continue
                            if window.widget().title == title:
                                print(
                                    "_gui_restore() window i {} title {} setgeom".format(
                                        i, title
                                    )
                                )
                                window.restoreGeometry(geom)
                                break

            print("_gui_restore() DONE")
        except:
            type_, value_, traceback_ = sys.exc_info()
            exstr = str(traceback.format_exception(type_, value_, traceback_))
            print("WARNING: _gui_restore() - exception: {}".format(exstr))
            try:
                print("doing qsettings clear()")
                self.settings.clear()
            except:
                type_, value_, traceback_ = sys.exc_info()
                exstr = str(traceback.format_exception(type_, value_, traceback_))
                print("WARNING: qsettings clear() - exception: {}".format(exstr))

    def initializeSchema(self):
        dirname = os.path.dirname(__file__)
        fileDir = os.path.join(dirname, "element_info_list.csv")
        with open(fileDir, "r") as f:
            reader = csv.reader(f)
            for row in reader:
                self.gc.schemaList.append(
                    {
                        "name": row[9],
                        "column": row[1],
                        "table": row[3],
                        "max_args": row[8],
                    }
                )

    def renamingLayers(self, layers):

        # Configure layers data source + rename layers
        # uri = QgsDataSourceUri()
        # uri.setDatabase(self.databaseUi.databasePath)
        root = QgsProject.instance().layerTreeRoot()
        treeGroups = root.findGroups()
        geom_column = "geom"
        for layer in layers:
            print("renamingLayers: ", layer.name())
            name = layer.name().split(" ")
            if name[0] == "azqdata":

                # Handle duplicate layers
                if " ".join(name[1:]) in self.gc.activeLayers:
                    toBeRemoved = QgsProject.instance().mapLayersByName(
                        " ".join(name[1:])
                    )
                    if len(toBeRemoved) > 0:
                        QgsProject.instance().removeMapLayer(toBeRemoved[0])
                        self.gc.activeLayers.remove(" ".join(name[1:]))

                # Setting up layer data source
                layer.setName(" ".join(name[1:]))
                self.gc.activeLayers.append(" ".join(name[1:]))
                # uri.setDataSource("", " ".join(name[1:]), geom_column)
                # layer.setDataSource(uri.uri(), " ".join(name[1:]), "spatialite")

                # Force adding layer to root node
                # cloneLayer = layer.clone()
                # root.insertChildNode(0, cloneLayer)
        pass

        # self.zoomToActiveLayer()

    def mergeLayerGroup(self, node, iFrom=None, iTo=None):
        if type(node) is QgsLayerTreeGroup:
            rootNode = QgsProject.instance().layerTreeRoot()
            treeGroups = rootNode.findGroups()
            layerOrder = rootNode.customLayerOrder()
            if len(treeGroups) > 0:
                for group in treeGroups:
                    groupLayers = group.findLayers()
                    for gl in groupLayers:
                        cloneLayer = gl.clone()
                        rootNode.insertChildNode(0, cloneLayer)
                    group.removeAllChildren()
            if len(self.gc.activeLayers) + 1 == len(layerOrder):
                rootNode.removeChildrenGroupWithoutLayers()

        pass

    def removingTreeLayer(self, id):
        try:
            layer = QgsProject.instance().mapLayer(id)
            self.gc.activeLayers.remove(layer.name())
        except:
            pass

    def selectChanged(self):
        if self.gc.h_list:
            for hi in self.gc.h_list:
                hi.hide()
        self.gc.h_list = []
        layer = iface.activeLayer()

        # layer = QgsProject.instance().mapLayersByName(layerName)[0]
        if not layer:
            return False
        if layer.type() == layer.VectorLayer:
            for i in layer.selectedFeatures():
                h = QgsHighlight(iface.mapCanvas(), i.geometry(), layer)

                # set highlight symbol properties
                h.setColor(QColor(255, 0, 0, 255))
                h.setWidth(2)
                h.setFillColor(QColor(255, 255, 255, 0))

                # write the object to the list
                self.gc.h_list.append(h)

        iface.mapCanvas().refresh()

    def setupToolBar(self):
        self.toolbar.setFloatable(False)
        self.toolbar.setMovable(False)
        self.toolbar.addWidget(self.importDatabaseBtn)
        self.toolbar.addWidget(self.loadBtn)
        self.toolbar.addWidget(self.saveBtn)        
        self.toolbar.addWidget(self.maptool)
        self.toolbar.addSeparator()
        self.toolbar.addWidget(self.layerSelect)
        self.toolbar.addSeparator()
        self.toolbar.addWidget(self.timeSliderLabel)
        self.toolbar.addWidget(self.playButton)
        self.toolbar.addWidget(self.pauseButton)
        self.toolbar.addWidget(self.gc.timeSlider)
        self.toolbar.addWidget(self.timeEdit)
        self.toolbar.addSeparator()
        self.toolbar.addWidget(self.speedLabel)
        self.toolbar.addWidget(self.playSpeed)

    
    def setupMenubar(self, analyzer_window):

        self.menubar = QMenuBar(analyzer_window)

        ######### file menu
        self.menuFile = QMenu(self.menubar)
        self.menubar.addAction(self.menuFile.menuAction())
        self.menuFile.setTitle("File")        
        ### file > open logs
        actionOpen = QAction(analyzer_window)
        actionOpen.setText("Open logs")
        actionOpen.triggered.connect(self.open_logs)
        self.menuFile.addAction(actionOpen)
        actionExit = QAction(analyzer_window)
        ### file > exit
        actionExit.setText("Exit")
        actionExit.triggered.connect(self.close)
        self.menuFile.addAction(actionExit)        

        
        
        self.menuPresentation = QMenu(self.menubar)
        self.menuPresentation.setObjectName("menuPresentation")
        self.menuWindows = QMenu(self.menubar)
        self.menuWindows.setObjectName("menuWindows")
        self.menuGSM = QMenu(self.menuPresentation)
        self.menuGSM.setObjectName("menuGSM")
        self.menuWCDMA = QMenu(self.menuPresentation)
        self.menuWCDMA.setObjectName("menuWCDMA")
        self.menuLTE = QMenu(self.menuPresentation)
        self.menuLTE.setObjectName("menuLTE")
        self.menuNR = QMenu(self.menuPresentation)
        self.menuNR.setObjectName("menuNR")
        self.menuCDMA_EVDO = QMenu(self.menuPresentation)
        self.menuCDMA_EVDO.setObjectName("menuCDMA_EVDO")
        self.menuData = QMenu(self.menuPresentation)
        self.menuData.setObjectName("menuData")
        self.menuSignaling = QMenu(self.menuPresentation)
        self.menuSignaling.setObjectName("menuSignaling")
        self.setMenuBar(self.menubar)
        self.statusbar = QStatusBar(analyzer_window)
        self.statusbar.setObjectName("statusbar")
        self.setStatusBar(self.statusbar)

        self.actionRadio_Parameters = QAction(analyzer_window)
        self.actionRadio_Parameters.setObjectName("actionRadio_Parameters")
        self.actionServing_Neighbors = QAction(analyzer_window)
        self.actionServing_Neighbors.setObjectName("actionServing_Neighbors")
        self.actionCurrent_Channel = QAction(analyzer_window)
        self.actionCurrent_Channel.setObjectName("actionCurrent_Channel")
        self.actionC_I = QAction(analyzer_window)
        self.actionC_I.setObjectName("actionC_I")
        self.actionGSM_Line_Chart = QAction(analyzer_window)
        self.actionGSM_Line_Chart.setObjectName("actionGSM_Line_Chart")
        self.actionActive_Monitored_Sets = QAction(analyzer_window)
        self.actionActive_Monitored_Sets.setObjectName("actionActive_Monitored_Sets")
        self.actionRadio_Parameters_2 = QAction(analyzer_window)
        self.actionRadio_Parameters_2.setObjectName("actionRadio_Parameters_2")
        self.actionBLER_Summary = QAction(analyzer_window)
        self.actionBLER_Summary.setObjectName("actionBLER_Summary")
        self.actionLine_Chart = QAction(analyzer_window)
        self.actionLine_Chart.setObjectName("actionLine_Chart")
        self.actionBearers = QAction(analyzer_window)
        self.actionBearers.setObjectName("actionBearers")
        self.actionPilot_Poluting_Cells = QAction(analyzer_window)
        self.actionPilot_Poluting_Cells.setObjectName("actionPilot_Poluting_Cells")
        self.actionActive_Monitored_Bar = QAction(analyzer_window)
        self.actionActive_Monitored_Bar.setObjectName("actionActive_Monitored_Bar")
        self.actionPilot_Analyzer = QAction(analyzer_window)
        self.actionPilot_Analyzer.setObjectName("actionPilot_Analyzer")
        self.actionRadio_Parameters_3 = QAction(analyzer_window)
        self.actionRadio_Parameters_3.setObjectName("actionRadio_Parameters_3")
        self.actionNR_Radio_Parameters = QAction(analyzer_window)
        self.actionNR_Radio_Parameters.setObjectName("actionNR_Radio_Parameters")
        self.actionServing_Neighbors_2 = QAction(analyzer_window)
        self.actionServing_Neighbors_2.setObjectName("actionServing_Neighbors_2")
        self.actionPUCCH_PDSCH_Parameters = QAction(analyzer_window)
        self.actionPUCCH_PDSCH_Parameters.setObjectName("actionPUCCH_PDSCH_Parameters")
        self.actionData = QAction(analyzer_window)
        self.actionData.setObjectName("actionData")
        self.actionLTE_Line_Chart = QAction(analyzer_window)
        self.actionLTE_Line_Chart.setObjectName("actionLTE_Line_Chart")
        self.actionLTE_RLC = QAction(analyzer_window)
        self.actionLTE_RLC.setObjectName("actionLTE_RLC")
        self.actionLTE_VoLTE = QAction(analyzer_window)
        self.actionLTE_VoLTE.setObjectName("actionLTE_VoLTE")

        self.actionlte_rrc_sib_states = QAction(analyzer_window)
        self.actionlte_rrc_sib_states.setObjectName("actionlte_rrc_sib_states")

        self.actionRadio_Parameters_4 = QAction(analyzer_window)
        self.actionRadio_Parameters_4.setObjectName("actionRadio_Parameters_4")
        self.actionServing_Neighbors_3 = QAction(analyzer_window)
        self.actionServing_Neighbors_3.setObjectName("actionServing_Neighbors_3")
        self.actionEVDO_Parameters = QAction(analyzer_window)
        self.actionEVDO_Parameters.setObjectName("actionEVDO_Parameters")
        self.actionGSM_Data_Line_Chart = QAction(analyzer_window)
        self.actionGSM_Data_Line_Chart.setObjectName("actionGSM_Data_Line_Chart")
        self.actionWCDMA_Data_Line_Chart = QAction(analyzer_window)
        self.actionWCDMA_Data_Line_Chart.setObjectName("actionWCDMA_Data_Line_Chart")
        self.actionGPRS_EDGE_Information = QAction(analyzer_window)
        self.actionGPRS_EDGE_Information.setObjectName("actionGPRS_EDGE_Information")
        self.actionWeb_Browser = QAction(analyzer_window)
        self.actionWeb_Browser.setObjectName("actionWeb_Browser")
        self.actionHSDPA_HSPA_Statistics = QAction(analyzer_window)
        self.actionHSDPA_HSPA_Statistics.setObjectName("actionHSDPA_HSPA_Statistics")
        self.actionHSUPA_Statistics = QAction(analyzer_window)
        self.actionHSUPA_Statistics.setObjectName("actionHSUPA_Statistics")
        self.actionLTE_Data_Statistics = QAction(analyzer_window)
        self.actionLTE_Data_Statistics.setObjectName("actionLTE_Data_Statistics")
        self.actionLTE_Data_Line_Chart = QAction(analyzer_window)
        self.actionLTE_Data_Line_Chart.setObjectName("actionLTE_Data_Line_Chart")
        self.actionWifi_Connected_AP = QAction(analyzer_window)
        self.actionWifi_Connected_AP.setObjectName("actionWifi_Connected_AP")
        self.actionWifi_Scanned_APs = QAction(analyzer_window)
        self.actionWifi_Scanned_APs.setObjectName("actionWifi_Scanned_APs")
        self.actionWifi_Graph = QAction(analyzer_window)
        self.actionWifi_Graph.setObjectName("actionWifi_Graph")
        self.actionEvents = QAction(analyzer_window)
        self.actionEvents.setObjectName("actionEvents")
        self.actionLayer_3_Messages = QAction(analyzer_window)
        self.actionLayer_3_Messages.setObjectName("actionLayer_3_Messages")
        self.actionBenchmark = QAction(analyzer_window)
        self.actionBenchmark.setObjectName("actionBenchmark")
        self.actionMM_Reg_States = QAction(analyzer_window)
        self.actionMM_Reg_States.setObjectName("actionMM_Reg_States")
        self.actionServing_System_Info = QAction(analyzer_window)
        self.actionServing_System_Info.setObjectName("actionServing_System_Info")
        self.actionNR_Data_Line_Chart = QAction(analyzer_window)
        self.actionNR_Data_Line_Chart.setObjectName("actionNR_Data_Line_Chart")
        self.actionNR_Serving_Neighbors = QAction(analyzer_window)
        self.actionNR_Serving_Neighbors.setObjectName("actionNR_Serving_Neighbors")

        self.actionCascadeWindow = QAction(analyzer_window)
        self.actionCascadeWindow.setObjectName("cascadeWindow")
        self.actionTileHorizontal = QAction(analyzer_window)
        self.actionTileHorizontal.setObjectName("tileHorizontal")
        self.actionTileVertical = QAction(analyzer_window)
        self.actionTileVertical.setObjectName("tileVertical")
        self.actionCloseAll = QAction(analyzer_window)
        self.actionCloseAll.setObjectName("closeAll")

        self.menuGSM.addAction(self.actionRadio_Parameters)
        self.menuGSM.addAction(self.actionServing_Neighbors)
        self.menuGSM.addAction(self.actionCurrent_Channel)
        self.menuGSM.addAction(self.actionC_I)
        self.menuGSM.addAction(self.actionGSM_Line_Chart)
        self.menuWCDMA.addAction(self.actionActive_Monitored_Sets)
        self.menuWCDMA.addAction(self.actionRadio_Parameters_2)
        self.menuWCDMA.addAction(self.actionBLER_Summary)
        self.menuWCDMA.addAction(self.actionLine_Chart)
        self.menuWCDMA.addAction(self.actionBearers)
        self.menuWCDMA.addAction(self.actionPilot_Poluting_Cells)
        self.menuWCDMA.addAction(self.actionActive_Monitored_Bar)
        self.menuWCDMA.addAction(self.actionPilot_Analyzer)

        self.menuLTE.addAction(self.actionRadio_Parameters_3)
        self.menuLTE.addAction(self.actionServing_Neighbors_2)
        self.menuLTE.addAction(self.actionlte_rrc_sib_states)
        self.menuLTE.addAction(self.actionPUCCH_PDSCH_Parameters)
        self.menuLTE.addAction(self.actionLTE_RLC)
        self.menuLTE.addAction(self.actionLTE_VoLTE)
        self.menuLTE.addAction(self.actionData)
        self.menuLTE.addAction(self.actionLTE_Line_Chart)

        self.menuNR.addAction(self.actionNR_Radio_Parameters)
        self.menuNR.addAction(self.actionNR_Serving_Neighbors)
        self.menuCDMA_EVDO.addAction(self.actionRadio_Parameters_4)
        self.menuCDMA_EVDO.addAction(self.actionServing_Neighbors_3)
        self.menuCDMA_EVDO.addAction(self.actionEVDO_Parameters)
        self.menuData.addAction(self.actionGSM_Data_Line_Chart)
        self.menuData.addAction(self.actionWCDMA_Data_Line_Chart)
        self.menuData.addAction(self.actionGPRS_EDGE_Information)
        self.menuData.addAction(self.actionWeb_Browser)
        self.menuData.addAction(self.actionHSDPA_HSPA_Statistics)
        self.menuData.addAction(self.actionHSUPA_Statistics)
        self.menuData.addAction(self.actionLTE_Data_Statistics)
        self.menuData.addAction(self.actionLTE_Data_Line_Chart)
        self.menuData.addAction(self.actionWifi_Connected_AP)
        self.menuData.addAction(self.actionWifi_Scanned_APs)
        self.menuData.addAction(self.actionWifi_Graph)
        self.menuData.addAction(self.actionNR_Data_Line_Chart)
        self.menuSignaling.addAction(self.actionEvents)
        self.menuSignaling.addAction(self.actionLayer_3_Messages)
        self.menuSignaling.addAction(self.actionBenchmark)
        self.menuSignaling.addAction(self.actionMM_Reg_States)
        self.menuSignaling.addAction(self.actionServing_System_Info)
        self.menuPresentation.addAction(self.menuGSM.menuAction())
        self.menuPresentation.addAction(self.menuWCDMA.menuAction())
        self.menuPresentation.addAction(self.menuLTE.menuAction())
        self.menuPresentation.addAction(self.menuNR.menuAction())
        self.menuPresentation.addAction(self.menuCDMA_EVDO.menuAction())
        self.menuPresentation.addAction(self.menuData.menuAction())
        self.menuPresentation.addAction(self.menuSignaling.menuAction())
        self.menuWindows.addAction(self.actionCascadeWindow)
        self.menuWindows.addAction(self.actionTileHorizontal)
        self.menuWindows.addAction(self.actionTileVertical)
        self.menuWindows.addAction(self.actionCloseAll)

        self.menubar.addAction(self.menuPresentation.menuAction())
        self.menubar.addAction(self.menuWindows.menuAction())
        self.menuPresentation.triggered.connect(self.selectPresentation)
        
        self.menuWindows.triggered.connect(self.selectWindowAction)

        # translate for menubar
        _translate = QtCore.QCoreApplication.translate
        
        self.menuPresentation.setTitle(_translate("analyzer_window", "Presentation"))
        self.menuWindows.setTitle(_translate("analyzer_window", "Windows"))
        self.menuGSM.setTitle(_translate("analyzer_window", "GSM"))
        self.menuWCDMA.setTitle(_translate("analyzer_window", "WCDMA"))
        self.menuLTE.setTitle(_translate("analyzer_window", "LTE"))
        self.menuNR.setTitle(_translate("analyzer_window", "5G NR"))
        self.menuCDMA_EVDO.setTitle(_translate("analyzer_window", "CDMA/EVDO"))
        self.menuData.setTitle(_translate("analyzer_window", "Data"))
        self.menuSignaling.setTitle(_translate("analyzer_window", "Signaling"))
        self.actionRadio_Parameters.setText(
            _translate("analyzer_window", "Radio Parameters")
        )
        self.actionServing_Neighbors.setText(
            _translate("analyzer_window", "Serving + Neighbors")
        )
        self.actionCurrent_Channel.setText(
            _translate("analyzer_window", "Current Channel")
        )
        self.actionC_I.setText(_translate("analyzer_window", "C/I"))
        self.actionGSM_Line_Chart.setText(_translate("analyzer_window", "GSM Line Chart"))
        self.actionActive_Monitored_Sets.setText(
            _translate("analyzer_window", "Active + Monitored Sets")
        )
        self.actionRadio_Parameters_2.setText(
            _translate("analyzer_window", "Radio Parameters")
        )
        self.actionBLER_Summary.setText(_translate("analyzer_window", "BLER Summary"))
        self.actionLine_Chart.setText(_translate("analyzer_window", "Line Chart"))
        self.actionBearers.setText(_translate("analyzer_window", "Bearers"))
        self.actionPilot_Poluting_Cells.setText(
            _translate("analyzer_window", "Pilot Poluting Cells")
        )
        self.actionActive_Monitored_Bar.setText(
            _translate("analyzer_window", "Active + Monitored Bar")
        )
        self.actionPilot_Analyzer.setText(_translate("analyzer_window", "Pilot Analyzer"))
        self.actionRadio_Parameters_3.setText(
            _translate("analyzer_window", "Radio Parameters")
        )
        self.actionServing_Neighbors_2.setText(
            _translate("analyzer_window", "Serving + Neighbors")
        )
        self.actionPUCCH_PDSCH_Parameters.setText(
            _translate("analyzer_window", "PUCCH/PDSCH Parameters")
        )
        self.actionData.setText(_translate("analyzer_window", "Data"))
        self.actionLTE_Line_Chart.setText(_translate("analyzer_window", "LTE Line Chart"))
        self.actionLTE_RLC.setText(_translate("analyzer_window", "LTE RLC"))
        self.actionLTE_VoLTE.setText(_translate("analyzer_window", "LTE VoLTE"))

        self.actionlte_rrc_sib_states.setText(
            _translate("analyzer_window", "LTE RRC/SIB States")
        )

        self.actionRadio_Parameters_4.setText(
            _translate("analyzer_window", "Radio Parameters")
        )
        self.actionNR_Radio_Parameters.setText(
            _translate("analyzer_window", "Radio Parameters")
        )
        self.actionServing_Neighbors_3.setText(
            _translate("analyzer_window", "Serving + Neighbors")
        )
        self.actionEVDO_Parameters.setText(
            _translate("analyzer_window", "EVDO Parameters")
        )
        self.actionGSM_Data_Line_Chart.setText(
            _translate("analyzer_window", "GSM Data Line Chart")
        )
        self.actionWCDMA_Data_Line_Chart.setText(
            _translate("analyzer_window", "WCDMA Data Line Chart")
        )
        self.actionGPRS_EDGE_Information.setText(
            _translate("analyzer_window", "GPRS/EDGE Information")
        )
        self.actionWeb_Browser.setText(_translate("analyzer_window", "Web Browser"))
        self.actionHSDPA_HSPA_Statistics.setText(
            _translate("analyzer_window", "HSDPA/HSPA + Statistics")
        )
        self.actionHSUPA_Statistics.setText(
            _translate("analyzer_window", "HSUPA Statistics")
        )
        self.actionLTE_Data_Statistics.setText(
            _translate("analyzer_window", "LTE Data Statistics")
        )
        self.actionLTE_Data_Line_Chart.setText(
            _translate("analyzer_window", "LTE Data Line Chart")
        )
        self.actionNR_Data_Line_Chart.setText(
            _translate("analyzer_window", "5G NR Data Line Chart")
        )
        self.actionWifi_Connected_AP.setText(
            _translate("analyzer_window", "Wifi Connected AP")
        )
        self.actionWifi_Scanned_APs.setText(
            _translate("analyzer_window", "Wifi Scanned APs")
        )
        self.actionWifi_Graph.setText(_translate("analyzer_window", "Wifi Graph"))
        self.actionEvents.setText(_translate("analyzer_window", "Events"))
        self.actionLayer_3_Messages.setText(
            _translate("analyzer_window", "Layer 3 Messages")
        )
        self.actionBenchmark.setText(_translate("analyzer_window", "Benchmark"))
        self.actionMM_Reg_States.setText(_translate("analyzer_window", "MM Reg States"))
        self.actionServing_System_Info.setText(
            _translate("analyzer_window", "Serving System Info")
        )
        self.actionNR_Serving_Neighbors.setText(
            _translate("analyzer_window", "Serving + Neighbors")
        )
        self.actionCascadeWindow.setText(_translate("analyzer_window", "Cascade"))
        self.actionTileHorizontal.setText(
            _translate("analyzer_window", "Tile Horizontally")
        )
        self.actionTileVertical.setText(_translate("analyzer_window", "Tile Vertically"))
        self.actionCloseAll.setText(_translate("analyzer_window", "Close All"))

    def selectPresentation(self, widget):
        parent = widget.associatedWidgets()
        if len(parent) > 0:
            self.classifySelectedItems(parent[0].title(), widget.text())


    def selectWindowAction(self, widget):
        option = widget.objectName()
        if option == "cascadeWindow":
            self.mdi.cascadeSubWindows()
        elif option == "tileHorizontal":
            self.tileHorizontally()
        elif option == "tileVertical":
            self.tileVertically()
        elif option == "closeAll":
            self.mdi.closeAllSubWindows()

    def tileHorizontally(self):
        position = QPoint(0, 0)
        if len(self.mdi.subWindowList()) < 2:
            self.mdi.tileSubWindows()
        else:
            for subWindow in self.mdi.subWindowList():
                rect = QRect(
                    0,
                    0,
                    self.mdi.width(),
                    self.mdi.height() / len(self.mdi.subWindowList()),
                )
                subWindow.setGeometry(rect)
                subWindow.move(position)
                position.setY(position.y() + subWindow.height())

    def tileVertically(self):
        position = QPoint(0, 0)
        if len(self.mdi.subWindowList()) < 2:
            self.mdi.tileSubWindows()
        else:
            for subWindow in self.mdi.subWindowList():
                rect = QRect(
                    0,
                    0,
                    self.mdi.width() / len(self.mdi.subWindowList()),
                    self.mdi.height(),
                )
                subWindow.setGeometry(rect)
                subWindow.move(position)
                position.setX(position.x() + subWindow.width())

    def setupUi(self, analyzer_window):
        try:
            analyzer_window.setObjectName("analyzer_window")
            analyzer_window.resize(640, 480)
            # self.setupTreeWidget(analyzer_window)
            self.mdi = GroupArea()
            self.gc.mdi = self.mdi
            self.setCentralWidget(self.mdi)
            toolbar = self.addToolBar("toolbar")
            self.toolbar = toolbar
            dirname = os.path.dirname(__file__)
            analyzer_window.setWindowIcon(QIcon(QPixmap(os.path.join(dirname, "icon.png"))))

            # Time Slider
            self.gc.timeSlider = timeSlider(analyzer_window)
            self.gc.timeSlider.setMinimumWidth(100)
            self.gc.timeSlider.setMaximumWidth(360)
            sizePolicy = QSizePolicy(QSizePolicy.Expanding, QSizePolicy.Fixed)
            sizePolicy.setHorizontalStretch(0)
            sizePolicy.setVerticalStretch(0)
            sizePolicy.setHeightForWidth(self.gc.timeSlider.sizePolicy().hasHeightForWidth())
            self.gc.timeSlider.setSizePolicy(sizePolicy)
            self.gc.timeSlider.setBaseSize(QtCore.QSize(500, 0))
            self.gc.timeSlider.setPageStep(1)
            self.gc.timeSlider.setSliderPosition(0)
            self.gc.timeSlider.setOrientation(QtCore.Qt.Horizontal)
            self.gc.timeSlider.setObjectName("timeSlider")
            self.gc.timeSlider.setTracking(True)
            if not self.gc.sliderLength:
                self.gc.sliderLength = 99
            self.gc.timeSlider.setRange(0, self.gc.sliderLength)

            # Play Speed Textbox
            self.speedLabel = QLabel(analyzer_window)
            self.speedLabel.setGeometry(QtCore.QRect(480, 82, 40, 22))
            self.speedLabel.setObjectName("Speed")
            self.playSpeed = QLineEdit(analyzer_window)
            self.onlyDouble = QDoubleValidator(analyzer_window)
            self.onlyDouble.setRange(0.0, 120.0, 2)
            self.onlyDouble.setNotation(QDoubleValidator.StandardNotation)
            self.playSpeed.setValidator(self.onlyDouble)
            self.playSpeed.setMaximumWidth(50)
            self.playSpeed.setFixedWidth(60)
            if not self.gc.slowDownValue == 1:
                self.playSpeed.setText("{:.2f}".format(self.gc.slowDownValue))
            elif not self.gc.fastForwardValue == 1:
                self.playSpeed.setText("{:.2f}".format(self.gc.fastForwardValue))
            else:
                self.playSpeed.setText("{:.2f}".format(1))
            self.playSpeed.textChanged.connect(self.setPlaySpeed)

            # Datetime Textbox
            self.timeEdit = QDateTimeEdit(analyzer_window)
            self.timeEdit.setGeometry(QtCore.QRect(480, 56, 140, 22))
            self.timeEdit.setObjectName("timeEdit")
            self.timeEdit.setDisplayFormat("hh:mm:ss.zzz")
            self.timeEdit.setDateTime(datetime.datetime.fromtimestamp(self.gc.minTimeValue))
            self.timeEdit.setReadOnly(True)

            # Time label
            self.timeSliderLabel = QLabel(analyzer_window)
            self.timeSliderLabel.setGeometry(QtCore.QRect(300, 30, 100, 16))
            self.timeSliderLabel.setObjectName("timeSliderLabel")

            self.setupPlayStopButton(analyzer_window)

            # Import Database Button
            self.importDatabaseBtn = QToolButton()
            self.importDatabaseBtn.setIcon(
                QIcon(QPixmap(os.path.join(dirname, "res", "import.png")))
            )
            self.importDatabaseBtn.setObjectName("importDatabaseBtn")

            # Load Button
            self.loadBtn = QToolButton()
            self.loadBtn.setIcon(QIcon(QPixmap(os.path.join(dirname, "res", "folder.png"))))
            self.loadBtn.setObjectName("loadBtn")

            # Save Button
            self.saveBtn = QToolButton()
            self.saveBtn.setIcon(QIcon(QPixmap(os.path.join(dirname, "res", "save.png"))))
            self.saveBtn.setObjectName("saveBtn")

            # Map tool Button
            resourcePath = os.path.join(dirname, "res", "crosshair.png")
            self.maptool = QToolButton()
            self.maptool.setIcon(QIcon(QPixmap(resourcePath)))
            self.importDatabaseBtn.setObjectName("importDatabaseBtn")

            # Layer Select Button
            self.layerSelect = QToolButton()
            self.layerSelect.setIcon(
                QIcon(QPixmap(os.path.join(dirname, "res", "layer.png")))
            )
            self.layerSelect.setObjectName("layerBtn")

            self.retranslateUi(analyzer_window)
            QtCore.QMetaObject.connectSlotsByName(analyzer_window)

            self.gc.timeSlider.valueChanged.connect(self.timeChange)
            self.loadBtn.clicked.connect(self.loadWorkspaceFile)
            self.saveBtn.clicked.connect(self.saveWorkspaceFile)
            self.layerSelect.clicked.connect(self.selectLayer)
            self.importDatabaseBtn.clicked.connect(self.open_logs)
            self.maptool.clicked.connect(self.setMapTool)
            self.setupToolBar()
        except:
            type_, value_, traceback_ = sys.exc_info()
            exstr = str(traceback.format_exception(type_, value_, traceback_))
            print("WARNING: setupUi failed - exception: {}".format(exstr))

            

    def retranslateUi(self, analyzer_window):
        _translate = QtCore.QCoreApplication.translate
        analyzer_window.setWindowTitle(_translate("analyzer_window", "AZENQOS Log Analyzer"))
        # self.presentationTreeWidget.headerItem().setText(
        #     0, _translate("analyzer_window", "Presentation")
        # )
        # __sortingEnabled = self.presentationTreeWidget.isSortingEnabled()
        # self.presentationTreeWidget.setSortingEnabled(False)
        # self.presentationTreeWidget.setSortingEnabled(__sortingEnabled)
        # self.configurationTreeWidget.headerItem().setText(
        #     0, _translate("analyzer_window", "Configuration"))
        # self.configurationTreeWidget.setSortingEnabled(False)
        # self.configurationTreeWidget.setSortingEnabled(__sortingEnabled)
        self.loadBtn.setText(_translate("analyzer_window", "Load"))
        self.loadBtn.setToolTip(
            _translate(
                "analyzer_window",
                "<b>Load workspace</b><br>Change the workspace windows from a saved setting",
            )
        )
        self.saveBtn.setText(_translate("analyzer_window", "Save"))
        self.saveBtn.setToolTip(
            _translate(
                "analyzer_window",
                "<b>Save workspace</b><br>Save current workspace windows to a workspace setting file.",
            )
        )
        self.importDatabaseBtn.setText(_translate("analyzer_window", "Import Database"))
        self.importDatabaseBtn.setToolTip(
            _translate(
                "analyzer_window",
                "<b>Open logs</b><br>Open test logs to analyze/replay its data.",
            )
        )
        self.maptool.setText(_translate("analyzer_window", "Map Selection Tool"))
        self.maptool.setToolTip(
            _translate(
                "analyzer_window",
                "<b>QGIS map select tool</b><br>Click on a QGIS map layer to do time-sync with all open analyzer windows.",
            )
        )
        self.playButton.setToolTip(
            _translate(
                "analyzer_window",
                "<b>Play</b><br><i>Start</i> or <i>Resume</i> log replay.",
            )
        )
        self.pauseButton.setToolTip(
            _translate("analyzer_window", "<b>Pause</b><br> <i>Pause</i> log replay")
        )
        self.gc.timeSlider.setToolTip(
            _translate(
                "analyzer_window",
                "<b>Time Bar</b><br> <i>Drag</i> to jump replay to desired time.",
            )
        )
        self.menubar.setToolTip(
            _translate(
                "analyzer_window",
                """<b>File</b><br> - Import .azm log <br> - Exit Azenqos <br><br>
                                            <b>Presentation</b><br> Select and open presentation window <br>
                                            <i>e.g. Signaling->Events, WCDMA->Line Chart, etc.</i><br>""",
            )
        )
        # self.menuFile.setToolTipsVisible(True)
        # self.filterBtn.setText(_translate("analyzer_window", "Filter"))
        self.timeSliderLabel.setText(_translate("analyzer_window", "Time:"))
        self.speedLabel.setText(_translate("analyzer_window", "Speed:"))

    def setupTreeWidget(self, analyzer_window):
        # Presentation Tree Widget
        self.presentationTreeWidget = QTreeWidget(analyzer_window)
        self.presentationTreeWidget.setGeometry(QtCore.QRect(20, 20, 260, 300))
        self.presentationTreeWidget.setFrameShape(QFrame.StyledPanel)
        self.presentationTreeWidget.setAllColumnsShowFocus(True)
        self.presentationTreeWidget.setObjectName("presentationTreeWidget")
        self.presentationTreeWidget.itemDoubleClicked.connect(self.loadAllMessages)

        # GSM Section
        gsm = QTreeWidgetItem(self.presentationTreeWidget, ["GSM"])
        gsmRadioParams = QTreeWidgetItem(gsm, ["Radio Parameters"])
        gsmServeNeighbor = QTreeWidgetItem(gsm, ["Serving + Neighbors"])
        gsmCurrentChannel = QTreeWidgetItem(gsm, ["Current Channel"])
        gsmCI = QTreeWidgetItem(gsm, ["C/I"])
        gsmLineChart = QTreeWidgetItem(gsm, ["GSM Line Chart"])
        # gsmEventsCounter = QTreeWidgetItem(gsm, ["Events Counter"])

        # WCDMA Section
        wcdma = QTreeWidgetItem(self.presentationTreeWidget, ["WCDMA"])
        wcdmaActiveMonitoredSets = QTreeWidgetItem(wcdma, ["Active + Monitored Sets"])
        wcdmaRadioParams = QTreeWidgetItem(wcdma, ["Radio Parameters"])
        wcdmaSummary = QTreeWidgetItem(wcdma, ["BLER Summary"])
        wcdmaLineChart = QTreeWidgetItem(wcdma, ["Line Chart"])
        wcdmaBearers = QTreeWidgetItem(wcdma, ["Bearers"])
        wcdmaPilotPoluting = QTreeWidgetItem(wcdma, ["Pilot Poluting Cells"])
        wcdmaActiveMonitoredBar = QTreeWidgetItem(wcdma, ["Active + Monitored Bar"])
        wcdmaPilotAnalyzer = QTreeWidgetItem(wcdma, ["Pilot Analyzer"])

        # LTE Section
        lte = QTreeWidgetItem(self.presentationTreeWidget, ["LTE"])
        lteRadioParams = QTreeWidgetItem(lte, ["Radio Parameters"])
        lteServingNeighbors = QTreeWidgetItem(lte, ["Serving + Neighbors"])
        QTreeWidgetItem(lte, ["LTE RRC/SIB States"])
        ltePPParams = QTreeWidgetItem(lte, ["PUCCH/PDSCH Parameters"])
        lteData = QTreeWidgetItem(lte, ["Data"])
        lteLineChart = QTreeWidgetItem(lte, ["LTE Line Chart"])
        lteRlc = QTreeWidgetItem(lte, ["LTE RLC"])
        lteVo = QTreeWidgetItem(lte, ["LTE VoLTE"])

        # CDMA/EVDO Section
        cdmaEvdo = QTreeWidgetItem(self.presentationTreeWidget, ["CDMA/EVDO"])
        cdmaEvdoRadioParams = QTreeWidgetItem(cdmaEvdo, ["Radio Parameters"])
        cdmaEvdoServingNeighbors = QTreeWidgetItem(cdmaEvdo, ["Serving + Neighbors"])
        cdmaEvdoParams = QTreeWidgetItem(cdmaEvdo, ["EVDO Parameters"])

        # Data Section
        data = QTreeWidgetItem(self.presentationTreeWidget, ["Data"])
        dataGsmLineChart = QTreeWidgetItem(data, ["GSM Data Line Chart"])
        dataWcdmaLineChart = QTreeWidgetItem(data, ["WCDMA Data Line Chart"])
        dataEdgeInfo = QTreeWidgetItem(data, ["GPRS/EDGE Information"])
        dataWebBrowser = QTreeWidgetItem(data, ["Web Browser"])
        dataStats = QTreeWidgetItem(data, ["HSDPA/HSPA + Statistics"])
        dataHsupaStats = QTreeWidgetItem(data, ["HSUPA Statistics"])
        dataLteStats = QTreeWidgetItem(data, ["LTE Data Statistics"])
        dataLteLineChart = QTreeWidgetItem(data, ["LTE Data Line Chart"])
        dataWifiConnectedAp = QTreeWidgetItem(data, ["Wifi Connected AP"])
        dataWifiScannedAp = QTreeWidgetItem(data, ["Wifi Scanned APs"])
        dataWifiGraph = QTreeWidgetItem(data, ["Wifi Graph"])

        # Signaling Section
        signaling = QTreeWidgetItem(self.presentationTreeWidget, ["Signaling"])
        signalingEvents = QTreeWidgetItem(signaling, ["Events"])
        signalingLayerThree = QTreeWidgetItem(signaling, ["Layer 3 Messages"])
        signalingBenchmark = QTreeWidgetItem(signaling, ["Benchmark"])
        signalingMM = QTreeWidgetItem(signaling, ["MM Reg States"])
        signalingSystemInfo = QTreeWidgetItem(signaling, ["Serving System Info"])
        # signalingDebug = QTreeWidgetItem(signaling, ['Debug Android/Event'])

        # Positioning Section
        # positioning = QTreeWidgetItem(self.presentationTreeWidget,
        #                               ['Positioning'])
        # positioningGps = QTreeWidgetItem(positioning, ['GPS'])
        # positioningMap = QTreeWidgetItem(positioning, ['Map'])
        # positioningPositioning = QTreeWidgetItem(positioning, ['Positioning'])

        # Customized Window Section
        # customizedWindow = QTreeWidgetItem(self.presentationTreeWidget,
        #                                    ['Customized Window'])
        # customizedWindowStatus = QTreeWidgetItem(customizedWindow,
        #                                          ['Status Window'])
        # customizedWindowMessage = QTreeWidgetItem(customizedWindow,
        #                                           ['Message Window'])
        # customizedWindowChart = QTreeWidgetItem(customizedWindow,
        #                                         ['Line Chart'])

        # NB-IoT Section
        # nBIoT = QTreeWidgetItem(self.presentationTreeWidget, ['NB-IoT'])
        # nBIoTParams = QTreeWidgetItem(nBIoT,
        #                               ['NB-IoT Radio Parameters Window'])

        self.presentationTreeWidget.header().setCascadingSectionResizes(True)
        self.presentationTreeWidget.header().setHighlightSections(True)

        # Configuration
        # self.configurationTreeWidget = QTreeWidget(analyzer_window)
        # self.configurationTreeWidget.setGeometry(
        #     QtCore.QRect(20, 320, 260, 100))
        # self.configurationTreeWidget.setFrameShape(QFrame.StyledPanel)
        # self.configurationTreeWidget.setAllColumnsShowFocus(True)
        # self.configurationTreeWidget.setObjectName("configurationTreeWidget")
        # cellInformation = QTreeWidgetItem(self.configurationTreeWidget,
        #                                   ['Cell Information'])
        # equipmentConfiguration = QTreeWidgetItem(self.configurationTreeWidget,
        #                                          ['Equipment Configuration'])
        # self.configurationTreeWidget.itemDoubleClicked.connect(
        #     self.selectConfiguration)

    def setupPlayStopButton(self, analyzer_window):
        self.horizontalLayout = QWidget(analyzer_window)
        self.horizontalLayout.setGeometry(QtCore.QRect(290, 70, 90, 48))
        self.playButton = QToolButton()
        self.playButton.setIcon(self.style().standardIcon(QStyle.SP_MediaPlay))
        self.pauseButton = QToolButton()
        self.pauseButton.setIcon(self.style().standardIcon(QStyle.SP_MediaPause))
        layout = QHBoxLayout(self.horizontalLayout)
        layout.addStretch(1)
        layout.addWidget(self.playButton)
        layout.addWidget(self.pauseButton)
        self.playButton.clicked.connect(self.startPlaytimeThread)
        self.pauseButton.clicked.connect(self.pauseTime)

    def startPlaytimeThread(self):
        print("%s: startPlaytimeThread" % os.path.basename(__file__))
        if self.timeSliderThread.getCurrentValue() < self.gc.sliderLength:
            self.gc.isSliderPlay = True
            self.playButton.setDisabled(True)
            self.playSpeed.setDisabled(True)
            self.timeSliderThread.changeValue.connect(self.setTimeValue)
            self.timeSliderThread.start()

    def setMapTool(self):
        self.clickTool = QgsMapToolEmitPoint(self.canvas)
        self.canvas.setMapTool(self.clickTool)
        self.clickTool.canvasClicked.connect(self.clickCanvas)

    def selectLayer(self):
        print("%s: selectLayer" % os.path.basename(__file__))
        vlayer = iface.addVectorLayer(self.dbfp, None, "ogr")

        # Setting CRS
        my_crs = QgsCoordinateReferenceSystem(4326)
        QgsProject.instance().setCrs(my_crs)

    def pauseTime(self):
        self.gc.timeSlider.setEnabled(True)
        self.playButton.setEnabled(True)
        self.playSpeed.setEnabled(True)
        self.timeSliderThread.quit()
        threading.Event()
        self.gc.isSliderPlay = False

    def setTimeValue(self, value):
        print("%s: setTimeValue" % os.path.basename(__file__))
        self.gc.timeSlider.setValue(value)
        self.gc.timeSlider.update()
        if value >= self.gc.sliderLength:
            self.pauseTime()

    def setPlaySpeed(self, value):
        value = float(1) if value == "" else float(value)
        if value >= float(1):
            self.gc.fastForwardValue = value
            self.gc.slowDownValue = 1
        elif value == float(0):
            self.gc.fastForwardValue = 1
            self.gc.slowDownValue = 1
        elif value < float(1):
            self.gc.fastForwardValue = 1
            self.gc.slowDownValue = value

    def clickCanvas(self, point, button):
        layerData = []
        selectedTime = None
        clearAllSelectedFeatures()

        for layerName in self.gc.activeLayers:
            layer = None
            root = QgsProject.instance().layerTreeRoot()
            layers = root.findLayers()
            for la in layers:
                if la.name() == layerName:
                    layer = la.layer()
                    break

            if not layer:
                continue

            if layer.type() == layer.VectorLayer:
                if layer.featureCount() == 0:
                    # There are no features - skip
                    continue
                print("layer.name()", layer.name())

                # Loop through all features in a rect near point xy
                offset = 0.0005
                p1 = QgsPointXY(point.x() - offset, point.y() - offset)
                p2 = QgsPointXY(point.x() + offset, point.y() + offset)
                rect = QgsRectangle(p1, p2)
                nearby_features = layer.getFeatures(rect)
                for f in nearby_features:
                    distance = f.geometry().distance(QgsGeometry.fromPointXY(point))
                    if distance != -1.0 and distance <= 0.001:
                        closestFeatureId = f.id()
                        time = layer.getFeature(closestFeatureId).attribute("time")
                        info = (layer, closestFeatureId, distance, time)
                        layerData.append(info)

                """
                # Loop through all features in the layer
                for f in layer.getFeatures():
                    distance = f.geometry().distance(QgsGeometry.fromPointXY(point))
                    if distance != -1.0 and distance <= 0.001:
                        closestFeatureId = f.id()
                        cf = layer.getFeature(closestFeatureId)
                        print("cf.attributes:", cf.attributes())
                        print("cf.fields:", cf.fields().toList())
                        time = cf.attribute("time")
                        info = (layer, closestFeatureId, distance, time)
                        layerData.append(info)
                """

        if not len(layerData) > 0:
            # Looks like no vector layers were found - do nothing
            return

        # Sort the layer information by shortest distance
        layerData.sort(key=lambda element: element[2])

        for (layer, closestFeatureId, distance, time) in layerData:
            # layer.select(closestFeatureId)
            selectedTime = time
            break
        try:
            selectedTimestamp = Utils(self.gc).datetimeStringtoTimestamp(
                selectedTime.toString("yyyy-MM-dd HH:mm:ss.zzz")
            )
        except:
            selectedTimestamp = Utils(self.gc).datetimeStringtoTimestamp(selectedTime)
        if selectedTimestamp:
            timeSliderValue = self.gc.sliderLength - (self.gc.maxTimeValue - selectedTimestamp)
            self.gc.timeSlider.setValue(timeSliderValue)
            self.gc.timeSlider.update()

            # self.canvas.refreshself.gc.tableList()

    def clickCanvasWorker(self, point, button):
        print("%s: clickCanvasWorker" % os.path.basename(__file__))
        worker = Worker(self.clickCanvas, point, button)
        self.gc.threadpool.start(worker)

    def useCustomMapTool(self):
        currentTool = self.canvas.mapTool()
        if currentTool != self.clickTool:
            self.canvas.setMapTool(self.clickTool)

    def loadAllMessages(self):
        getSelected = self.presentationTreeWidget.selectedItems()
        if getSelected:
            baseNode = getSelected[0]
            if baseNode.text(0) is not None:
                getChildNode = baseNode.text(0)
                getParentNode = baseNode.parent().text(0)
                self.classifySelectedItems(getParentNode, getChildNode)

    def open_logs(self):
        dlg = import_db_dialog.import_db_dialog(self.gc)
        dlg.show()
        dlg.exec()

    def timeChange(self):
        ret = self.timechange_to_service_counter.inc_and_get()
        print(
            "%s: timeChange: timechange_to_service_counter: %d"
            % (os.path.basename(__file__), ret)
        )

    def timeChangedWorkerFunc(self):
        print("timeChangedWorkerFunc START")
        while True:
            try:
                if self.closed:
                    break
                ret = self.timechange_to_service_counter.get()
                if ret > 1:
                    self.timechange_to_service_counter.dec_and_get()
                    continue  # skip until we remain 1 then do work
                if ret == 1:
                    print(
                        "%s: timeChangedWorkerFunc: timechange_to_service_counter: %d so calling timeChangeImpl() START"
                        % (os.path.basename(__file__), ret)
                    )
                    self.timeChangeImpl()
                    print(
                        "%s: timeChangedWorkerFunc: timechange_to_service_counter: %d so calling timeChangeImpl() END"
                        % (os.path.basename(__file__), ret)
                    )
                    ret = self.timechange_to_service_counter.dec_and_get()
                # print("%s: timeChangedWorkerFunc: timechange_to_service_counter: %d" % (os.path.basename(__file__), ret))
            except:
                type_, value_, traceback_ = sys.exc_info()
                exstr = str(traceback.format_exception(type_, value_, traceback_))
                print("WARNING: timeChangedWorkerFunc - exception: {}".format(exstr))
            # print("{}: timeChangedWorkerFunc thread self.gc.threadpool.maxThreadCount() {} self.gc.threadpool.activeThreadCount() {}".format(os.path.basename(__file__), self.gc.threadpool.maxThreadCount(),  self.gc.threadpool.activeThreadCount()))
            time.sleep(0.1)

        print("timeChangedWorkerFunc END")

    def timeChangeImpl(self):
        print("%s: timeChange0" % os.path.basename(__file__))
        value = self.gc.timeSlider.value()
        # print("%s: timeChange1" % os.path.basename(__file__))
        timestampValue = self.gc.minTimeValue + value
        # print("%s: timeChange2" % os.path.basename(__file__))
        sampledate = datetime.datetime.fromtimestamp(timestampValue)
        # print("%s: timeChange3" % os.path.basename(__file__))
        # print("%s: timeChange4" % os.path.basename(__file__))
        self.timeSliderThread.set(value)
        # print("%s: timeChange5" % os.path.basename(__file__))
        self.gc.currentTimestamp = timestampValue
        # print("%s: timeChange6" % os.path.basename(__file__))
        self.gc.currentDateTimeString = "%s" % (
            datetime.datetime.fromtimestamp(self.gc.currentTimestamp).strftime(
                "%Y-%m-%d %H:%M:%S.%f"
            )[:-3]
        )
        # print("%s: timeChange7" % os.path.basename(__file__))
        # print("signal_ui_thread_emit_time_slider_updated.emit()")
        self.signal_ui_thread_emit_time_slider_updated.emit(self.gc.currentTimestamp)

        if len(self.gc.activeLayers) > 0:
            QgsMessageLog.logMessage("[-- have self.gc.tableList --]")
            self.hilightFeature()

        # print("%s: timeChange8" % os.path.basename(__file__))

        if len(self.gc.openedWindows) > 0:
            for window in self.gc.openedWindows:
                worker = None
                if not window.title in self.gc.linechartWindowname:
                    print(
                        "%s: timeChange7 hilightrow window %s"
                        % (os.path.basename(__file__), window.title)
                    )
                    window.hilightRow(sampledate)
                else:
                    print(
                        "%s: timeChange7 movechart window %s"
                        % (os.path.basename(__file__), window.title)
                    )
                    window.moveChart(sampledate)
        print("%s: timeChange9" % os.path.basename(__file__))
        # text = "[--" + str(len(self.gc.tableList) + "--]"
        # QgsMessageLog.logMessage(text)

        print(
            "{}: timeChange end1 self.gc.threadpool.maxThreadCount() {} self.gc.threadpool.activeThreadCount() {}".format(
                os.path.basename(__file__),
                self.gc.threadpool.maxThreadCount(),
                self.gc.threadpool.activeThreadCount(),
            )
        )

    # def threadComplete(self):
    #     QgsMessageLog.logMessage('[-- THREAD COMPLETE --]')
    #     iface.mapCanvas().refresh()

    def hilightFeature(self, time_mode=True):
        if time_mode:
            self.selectFeatureOnLayersByTime()
        else:
            print("%s: hilightFeature" % os.path.basename(__file__))
            QgsMessageLog.logMessage("[-- Start hilight features --]")
            start_time = time.time()
            self.getPosIdsByTable()
            if len(self.posIds) > 0 and len(self.posObjs) > 0:
                self.usePosIdsSelectedFeatures()
            QgsMessageLog.logMessage("[-- End hilight features --]")

    def selectFeatureOnLayersByTime(self):
        root = QgsProject.instance().layerTreeRoot()
        layers = root.findLayers()
        for layer in layers:
            if layer.name() not in self.gc.activeLayers:
                continue
            try:
                # print("selectFeatureOnLayersByTime layer: %s" % layer.name())
                end_dt = datetime.datetime.fromtimestamp(self.gc.currentTimestamp)
                start_dt = end_dt - datetime.timedelta(
                    seconds=(self.gc.DEFAULT_LOOKBACK_DUR_MILLIS / 1000.0)
                )
                # 2020-10-08 15:35:55.431000
                filt_expr = "time >= '%s' and time <= '%s'" % (start_dt, end_dt)
                # print("filt_expr:", filt_expr)
                request = (
                    QgsFeatureRequest()
                    .setFilterExpression(filt_expr)
                    .setFlags(QgsFeatureRequest.NoGeometry)
                )

                layerFeatures = layer.layer().getFeatures(request)
                # print("filt request ret:", layerFeatures)
                lc = 0
                fids = []
                time_list = []
                for lf in layerFeatures:
                    lc += 1
                    fids.append(lf.id())
                    time_list.append(lf.attribute("time"))
                if len(fids):
                    sr = pd.Series(time_list, index=fids, dtype="datetime64[ns]")
                    sids = [sr.idxmax()]
                    # print("sr:", sr)
                    # print("select ids:", sids)
                    layer.layer().selectByIds(sids)
            except:
                type_, value_, traceback_ = sys.exc_info()
                exstr = str(traceback.format_exception(type_, value_, traceback_))
                print(
                    "WARNING: selectFeatureOnLayersByTime layer.name() {} exception: {}".format(
                        layer.name(), exstr
                    )
                )
            """
            root = QgsProject.instance().layerTreeRoot()
            root.setHasCustomLayerOrder(True)
            order = root.customLayerOrder()
            order.insert(0, order.pop(order.index(layer)))  # vlayer to the top
            root.setCustomLayerOrder(order)
            iface.setActiveLayer(layer)

            for feature in layerFeatures:
                posid = feature["posid"]
                if self.currentMaxPosId == posid:
                    selected_ids.append(feature.id())
            QgsMessageLog.logMessage("selected_ids: {0}".format(str(selected_ids)))

            if layer is not None:
                if len(selected_ids) > 0:
                    layer.selectByIds(selected_ids, QgsVectorLayer.SetSelection)
            """

    def getPosIdsByTable(self):
        print("%s: getPosIdsByTable" % os.path.basename(__file__))
        self.gc.azenqosDatabase.open()
        # start_time = time.time()
        # QgsMessageLog.logMessage("tables: " + str(self.gc.tableList))
        self.posObjs = []
        self.posIds = []
        for tableName in self.gc.activeLayers:
            query = QSqlQuery()
            queryString = (
                "SELECT posid FROM %s WHERE time <= '%s' AND geom IS NOT NULL ORDER BY time DESC LIMIT 1"
                % (tableName, self.gc.currentDateTimeString)
            )
            query.exec_(queryString)
            while query.next():
                posid = query.value(0)
                posdict = {"posid": posid, "table": tableName}
                self.posObjs.append(posdict)
                self.posIds.append(posid)
        # elapsed_time = time.time() - start_time
        # QgsMessageLog.logMessage('Query Elapsed time: ' + str(elapsed_time) + ' s.')
        self.gc.azenqosDatabase.close()

    def usePosIdsSelectedFeatures(self):
        print("%s: usePosIdsSelectedFeatures" % os.path.basename(__file__))
        if self.posIds:
            selected_ids = []
            layerName = None
            layer = None
            # start_time = time.time()
            try:
                self.currentMaxPosId = max(self.posIds)
                for obj in self.posObjs:
                    if obj.get("posid") == self.currentMaxPosId:
                        layerName = obj.get("table")
                        break

                root = QgsProject.instance().layerTreeRoot()
                layers = root.findLayers()
                for la in layers:
                    if la.name() == layerName:
                        layer = la.layer()
                request = (
                    QgsFeatureRequest()
                    .setFilterExpression("posid = %s" % (self.currentMaxPosId))
                    .setFlags(QgsFeatureRequest.NoGeometry)
                )
                layerFeatures = layer.getFeatures(request)
                root = QgsProject.instance().layerTreeRoot()
                root.setHasCustomLayerOrder(True)
                order = root.customLayerOrder()
                order.insert(0, order.pop(order.index(layer)))  # vlayer to the top
                root.setCustomLayerOrder(order)
                iface.setActiveLayer(layer)
                QgsMessageLog.logMessage("layer name: " + str(layerName))

                for feature in layerFeatures:
                    posid = feature["posid"]
                    if self.currentMaxPosId == posid:
                        selected_ids.append(feature.id())
                QgsMessageLog.logMessage("selected_ids: {0}".format(str(selected_ids)))

                if layer is not None:
                    if len(selected_ids) > 0:
                        layer.selectByIds(selected_ids, QgsVectorLayer.SetSelection)

                    self.maxPosId = self.currentMaxPosId
            except:
                pass

    def classifySelectedItems(self, parent, child):
        windowName = parent + "_" + child
        print(
            "classifySelectedItems windowName:",
            windowName,
            "parent:",
            parent,
            "child:",
            child,
        )
        if hasattr(self, "mdi") is False:
            self.mdi = GroupArea()
        subwindowList = self.mdi.subWindowList()
        if parent == "GSM":
            if child == "Radio Parameters":
                if hasattr(self, "gsm_rdp_window") is True:
                    tableWindow = self.gsm_rdp_window.widget()
                    if not tableWindow:
                        tableWidget = TableWindow(self.gsm_rdp_window, windowName)
                        self.gc.openedWindows.append(tableWidget)

                    if self.gsm_rdp_window not in subwindowList:
                        self.gsm_rdp_window = SubWindowArea(self.mdi, self.gc)
                        self.mdi.addSubWindow(self.gsm_rdp_window)

                    if tableWidget:
                        self.gsm_rdp_window.setWidget(tableWidget)
                    self.gsm_rdp_window.show()
                else:
                    # create new subwindow
                    self.gsm_rdp_window = SubWindowArea(self.mdi, self.gc)
                    tableWidget = TableWindow(self.gsm_rdp_window, windowName)
                    self.gsm_rdp_window.setWidget(tableWidget)
                    self.mdi.addSubWindow(self.gsm_rdp_window)
                    self.gsm_rdp_window.show()
                    self.gc.openedWindows.append(tableWidget)

            elif child == "Serving + Neighbors":
                if hasattr(self, "gsm_sn_window") is True:
                    tableWindow = self.gsm_sn_window.widget()
                    if not tableWindow:
                        tableWidget = TableWindow(self.gsm_sn_window, windowName)
                        self.gc.openedWindows.append(tableWidget)

                    if self.gsm_sn_window not in subwindowList:
                        self.gsm_sn_window = SubWindowArea(self.mdi, self.gc)
                        self.mdi.addSubWindow(self.gsm_sn_window)

                    if tableWidget:
                        self.gsm_sn_window.setWidget(tableWidget)
                    self.gsm_sn_window.show()
                else:
                    # create new subwindow
                    self.gsm_sn_window = SubWindowArea(self.mdi, self.gc)
                    tableWidget = TableWindow(self.gsm_sn_window, windowName)
                    self.gsm_sn_window.setWidget(tableWidget)
                    self.mdi.addSubWindow(self.gsm_sn_window)
                    self.gsm_sn_window.show()
                    self.gc.openedWindows.append(tableWidget)

            elif child == "Current Channel":
                if hasattr(self, "gsm_cc_window") is True:
                    tableWindow = self.gsm_cc_window.widget()
                    if not tableWindow:
                        tableWidget = TableWindow(self.gsm_cc_window, windowName)
                        self.gc.openedWindows.append(tableWidget)

                    if self.gsm_cc_window not in subwindowList:
                        self.gsm_cc_window = SubWindowArea(self.mdi, self.gc)
                        self.mdi.addSubWindow(self.gsm_cc_window)

                    if tableWidget:
                        self.gsm_cc_window.setWidget(tableWidget)
                    self.gsm_cc_window.show()
                else:
                    # create new subwindow
                    self.gsm_cc_window = SubWindowArea(self.mdi, self.gc)
                    tableWidget = TableWindow(self.gsm_cc_window, windowName)
                    self.gsm_cc_window.setWidget(tableWidget)
                    self.mdi.addSubWindow(self.gsm_cc_window)
                    self.gsm_cc_window.show()
                    self.gc.openedWindows.append(tableWidget)

            elif child == "C/I":
                if hasattr(self, "gsm_ci_window") is True:
                    tableWindow = self.gsm_ci_window.widget()
                    if not tableWindow:
                        tableWidget = TableWindow(self.gsm_ci_window, windowName)
                        self.gc.openedWindows.append(tableWidget)

                    if self.gsm_ci_window not in subwindowList:
                        self.gsm_ci_window = SubWindowArea(self.mdi, self.gc)
                        self.mdi.addSubWindow(self.gsm_ci_window)

                    if tableWidget:
                        self.gsm_ci_window.setWidget(tableWidget)
                    self.gsm_ci_window.show()
                else:
                    # create new subwindow
                    self.gsm_ci_window = SubWindowArea(self.mdi, self.gc)
                    tableWidget = TableWindow(self.gsm_ci_window, windowName)
                    self.gsm_ci_window.setWidget(tableWidget)
                    self.mdi.addSubWindow(self.gsm_ci_window)
                    self.gsm_ci_window.show()
                    self.gc.openedWindows.append(tableWidget)

            elif child == "GSM Line Chart":
                linechartWidget = None
                if hasattr(self, "gsm_lc_window") is True:
                    linechartWindow = self.gsm_lc_window.widget()
                    del linechartWindow
                    linechartWindow = None
                    if not linechartWindow:
                        linechartWidget = Ui_GSM_LCwidget(
                            self, windowName, self.gc.azenqosDatabase
                        )
                        self.gc.openedWindows.append(linechartWidget)

                    if self.gsm_lc_window not in subwindowList:
                        self.gsm_lc_window = SubWindowArea(self.mdi, self.gc)
                        self.mdi.addSubWindow(self.gsm_lc_window)

                    if linechartWidget:
                        self.gsm_lc_window.setWidget(linechartWidget)
                    self.gsm_lc_window.show()
                else:
                    # create new subwindow
                    self.gsm_lc_window = SubWindowArea(self.mdi, self.gc)
                    linechartWidget = Ui_GSM_LCwidget(
                        self, windowName, self.gc.azenqosDatabase
                    )
                    self.gsm_lc_window.setWidget(linechartWidget)
                    self.mdi.addSubWindow(self.gsm_lc_window)
                    self.gsm_lc_window.show()
                    self.gc.openedWindows.append(linechartWidget)

            elif child == "Events Counter":
                if hasattr(self, "gsm_ec_window") is True:
                    tableWindow = self.gsm_ec_window.widget()
                    if not tableWindow:
                        tableWidget = TableWindow(self.gsm_ec_window, windowName)
                        self.gc.openedWindows.append(tableWidget)

                    if self.gsm_ec_window not in subwindowList:
                        self.gsm_ec_window = SubWindowArea(self.mdi, self.gc)
                        self.mdi.addSubWindow(self.gsm_ec_window)

                    if tableWidget:
                        self.gsm_ec_window.setWidget(tableWidget)
                    self.gsm_ec_window.show()
                else:
                    # create new subwindow
                    self.gsm_ec_window = SubWindowArea(self.mdi, self.gc)
                    tableWidget = TableWindow(self.gsm_ec_window, windowName)
                    self.gsm_ec_window.setWidget(tableWidget)
                    self.mdi.addSubWindow(self.gsm_ec_window)
                    self.gsm_ec_window.show()
                    self.gc.openedWindows.append(tableWidget)

        if parent == "WCDMA":
            if child == "Active + Monitored Sets":
                tableWidget = None
                if hasattr(self, "wcdma_ams_window") is True:
                    tableWindow = self.wcdma_ams_window.widget()
                    if not tableWindow:
                        tableWidget = TableWindow(self.wcdma_ams_window, windowName)
                        self.gc.openedWindows.append(tableWidget)

                    if self.wcdma_ams_window not in subwindowList:
                        self.wcdma_ams_window = SubWindowArea(self.mdi, self.gc)
                        self.mdi.addSubWindow(self.wcdma_ams_window)

                    if tableWidget:
                        self.wcdma_ams_window.setWidget(tableWidget)
                    self.wcdma_ams_window.show()
                else:
                    # create new subwindow
                    self.wcdma_ams_window = SubWindowArea(self.mdi, self.gc)
                    tableWidget = TableWindow(self.wcdma_ams_window, windowName)
                    self.wcdma_ams_window.setWidget(tableWidget)
                    self.mdi.addSubWindow(self.wcdma_ams_window)
                    self.wcdma_ams_window.show()
                    self.gc.openedWindows.append(tableWidget)

            elif child == "Radio Parameters":
                tableWidget = None
                if hasattr(self, "wcdma_rp_window") is True:
                    tableWindow = self.wcdma_rp_window.widget()
                    if not tableWindow:
                        tableWidget = TableWindow(self.wcdma_rp_window, windowName)
                        self.gc.openedWindows.append(tableWidget)

                    if self.wcdma_rp_window not in subwindowList:
                        self.wcdma_rp_window = SubWindowArea(self.mdi, self.gc)
                        self.mdi.addSubWindow(self.wcdma_rp_window)

                    if tableWidget:
                        self.wcdma_rp_window.setWidget(tableWidget)
                    self.wcdma_rp_window.show()
                else:
                    # create new subwindow
                    self.wcdma_rp_window = SubWindowArea(self.mdi, self.gc)
                    tableWidget = TableWindow(self.wcdma_rp_window, windowName)
                    self.wcdma_rp_window.setWidget(tableWidget)
                    self.mdi.addSubWindow(self.wcdma_rp_window)
                    self.wcdma_rp_window.show()
                    self.gc.openedWindows.append(tableWidget)

            elif child == "BLER Summary":
                tableWidget = None
                if hasattr(self, "wcdma_bler_window") is True:
                    tableWindow = self.wcdma_msl_window.widget()
                    if not tableWindow:
                        tableWidget = TableWindow(self.wcdma_bler_window, windowName)
                        self.gc.openedWindows.append(tableWidget)

                    if self.wcdma_bler_window not in subwindowList:
                        self.wcdma_bler_window = SubWindowArea(self.mdi, self.gc)
                        self.mdi.addSubWindow(self.wcdma_bler_window)

                    if tableWidget:
                        self.wcdma_bler_window.setWidget(tableWidget)
                    self.wcdma_bler_window.show()
                else:
                    # create new subwindow
                    self.wcdma_bler_window = SubWindowArea(self.mdi, self.gc)
                    tableWidget = TableWindow(self.wcdma_bler_window, windowName)
                    self.wcdma_bler_window.setWidget(tableWidget)
                    self.mdi.addSubWindow(self.wcdma_bler_window)
                    self.wcdma_bler_window.show()
                    self.gc.openedWindows.append(tableWidget)

            elif child == "Line Chart":
                linechartWidget = None
                if hasattr(self, "wcdma_lc_window") is True:
                    linechartWindow = self.wcdma_lc_window.widget()
                    del linechartWindow
                    linechartWindow = None
                    if not linechartWindow:
                        linechartWidget = Ui_WCDMA_LCwidget(
                            self, windowName, self.gc.azenqosDatabase
                        )
                        self.gc.openedWindows.append(linechartWidget)

                    if self.wcdma_lc_window not in subwindowList:
                        self.wcdma_lc_window = SubWindowArea(self.mdi, self.gc)
                        self.mdi.addSubWindow(self.wcdma_lc_window)

                    if linechartWidget:
                        self.wcdma_lc_window.setWidget(linechartWidget)
                    self.wcdma_lc_window.show()
                else:
                    # create new subwindow
                    self.wcdma_lc_window = SubWindowArea(self.mdi, self.gc)
                    linechartWidget = Ui_WCDMA_LCwidget(
                        self, windowName, self.gc.azenqosDatabase
                    )
                    self.wcdma_lc_window.setWidget(linechartWidget)
                    self.mdi.addSubWindow(self.wcdma_lc_window)
                    self.wcdma_lc_window.show()
                    self.gc.openedWindows.append(linechartWidget)

            elif child == "Bearers":
                tableWidget = None
                if hasattr(self, "wcdma_bearer_window") is True:
                    tableWindow = self.wcdma_bearer_window.widget()
                    if not tableWindow:
                        tableWidget = TableWindow(self.wcdma_bearer_window, windowName)
                        self.gc.openedWindows.append(tableWidget)

                    if self.wcdma_bearer_window not in subwindowList:
                        self.wcdma_bearer_window = SubWindowArea(self.mdi, self.gc)
                        self.mdi.addSubWindow(self.wcdma_bearer_window)

                    if tableWidget:
                        self.wcdma_bearer_window.setWidget(tableWidget)
                    self.wcdma_bearer_window.show()
                else:
                    # create new subwindow
                    self.wcdma_bearer_window = SubWindowArea(self.mdi, self.gc)
                    tableWidget = TableWindow(self.wcdma_bearer_window, windowName)
                    self.wcdma_bearer_window.setWidget(tableWidget)
                    self.mdi.addSubWindow(self.wcdma_bearer_window)
                    self.wcdma_bearer_window.show()
                    self.gc.openedWindows.append(tableWidget)

            elif child == "Pilot Poluting Cells":
                tableWidget = None
                if hasattr(self, "wcdma_ppc_window") is True:
                    tableWindow = self.wcdma_ppc_window.widget()
                    if not tableWindow:
                        tableWidget = TableWindow(self.wcdma_ppc_window, windowName)
                        self.gc.openedWindows.append(tableWidget)

                    if self.wcdma_ppc_window not in subwindowList:
                        self.wcdma_ppc_window = SubWindowArea(self.mdi, self.gc)
                        self.mdi.addSubWindow(self.wcdma_ppc_window)

                    if tableWidget:
                        self.wcdma_ppc_window.setWidget(tableWidget)
                    self.wcdma_ppc_window.show()
                else:
                    # create new subwindow
                    self.wcdma_ppc_window = SubWindowArea(self.mdi, self.gc)
                    tableWidget = TableWindow(self.wcdma_ppc_window, windowName)
                    self.wcdma_ppc_window.setWidget(tableWidget)
                    self.mdi.addSubWindow(self.wcdma_ppc_window)
                    self.wcdma_ppc_window.show()
                    self.gc.openedWindows.append(tableWidget)

            elif child == "Active + Monitored Bar":
                tableWidget = None
                if hasattr(self, "wcdma_amb_window") is True:
                    tableWindow = self.wcdma_amb_window.widget()
                    if not tableWindow:
                        tableWidget = TableWindow(self.wcdma_amb_window, windowName)
                        self.gc.openedWindows.append(tableWidget)

                    if self.wcdma_amb_window not in subwindowList:
                        self.wcdma_amb_window = SubWindowArea(self.mdi, self.gc)
                        self.mdi.addSubWindow(self.wcdma_amb_window)

                    if tableWidget:
                        self.wcdma_amb_window.setWidget(tableWidget)
                    self.wcdma_amb_window.show()
                else:
                    # create new subwindow
                    self.wcdma_amb_window = SubWindowArea(self.mdi, self.gc)
                    tableWidget = TableWindow(self.wcdma_amb_window, windowName)
                    self.wcdma_amb_window.setWidget(tableWidget)
                    self.mdi.addSubWindow(self.wcdma_amb_window)
                    self.wcdma_amb_window.show()
                    self.gc.openedWindows.append(tableWidget)

            elif child == "Pilot Analyzer":
                tableWidget = None
                if hasattr(self, "wcdma_analyzer_window") is True:
                    tableWindow = self.wcdma_analyzer_window.widget()
                    if not tableWindow:
                        tableWidget = TableWindow(
                            self.wcdma_analyzer_window, windowName
                        )
                        self.gc.openedWindows.append(tableWidget)

                    if self.wcdma_analyzer_window not in subwindowList:
                        self.wcdma_analyzer_window = SubWindowArea(self.mdi, self.gc)
                        self.mdi.addSubWindow(self.wcdma_analyzer_window)

                    if tableWidget:
                        self.wcdma_analyzer_window.setWidget(tableWidget)
                    self.wcdma_analyzer_window.show()
                else:
                    # create new subwindow
                    self.wcdma_analyzer_window = SubWindowArea(self.mdi, self.gc)
                    tableWidget = TableWindow(self.wcdma_analyzer_window, windowName)
                    self.wcdma_analyzer_window.setWidget(tableWidget)
                    self.mdi.addSubWindow(self.wcdma_analyzer_window)
                    self.wcdma_analyzer_window.show()
                    self.gc.openedWindows.append(tableWidget)

        elif parent == "LTE":
            if child == "LTE RRC/SIB States":
                print("enter RRC/SIB States")
                tableWidget = None
                if hasattr(self, "lte_rrc_sib_states_window") is True:
                    tableWindow = self.lte_rrc_sib_states_window.widget()
                    if not tableWindow:
                        tableWidget = TableWindow(
                            self.lte_rrc_sib_states_window, windowName
                        )
                        self.gc.openedWindows.append(tableWidget)

                    if self.lte_rrc_sib_states_window not in subwindowList:
                        self.lte_rrc_sib_states_window = SubWindowArea(self.mdi, self.gc)
                        self.mdi.addSubWindow(self.lte_rrc_sib_states_window)

                    if tableWidget:
                        self.lte_rrc_sib_states_window.setWidget(tableWidget)
                    self.lte_rrc_sib_states_window.show()
                else:
                    # create new subwindow
                    self.lte_rrc_sib_states_window = SubWindowArea(self.mdi, self.gc)
                    tableWidget = TableWindow(
                        self.lte_rrc_sib_states_window, windowName
                    )
                    self.lte_rrc_sib_states_window.setWidget(tableWidget)
                    self.mdi.addSubWindow(self.lte_rrc_sib_states_window)
                    self.lte_rrc_sib_states_window.show()
                    self.gc.openedWindows.append(tableWidget)

            elif child == "Radio Parameters":
                tableWidget = None
                if hasattr(self, "lte_param_window") is True:
                    tableWindow = self.lte_param_window.widget()
                    if not tableWindow:
                        tableWidget = TableWindow(self.lte_param_window, windowName)
                        self.gc.openedWindows.append(tableWidget)

                    if self.lte_param_window not in subwindowList:
                        self.lte_param_window = SubWindowArea(self.mdi, self.gc)
                        self.mdi.addSubWindow(self.lte_param_window)

                    if tableWidget:
                        self.lte_param_window.setWidget(tableWidget)
                    self.lte_param_window.show()
                else:
                    # create new subwindow
                    self.lte_param_window = SubWindowArea(self.mdi, self.gc)
                    tableWidget = TableWindow(self.lte_param_window, windowName)
                    self.lte_param_window.setWidget(tableWidget)
                    self.mdi.addSubWindow(self.lte_param_window)
                    self.lte_param_window.show()
                    self.gc.openedWindows.append(tableWidget)

            elif child == "Serving + Neighbors":
                tableWidget = None
                if hasattr(self, "lte_sn_window") is True:
                    tableWindow = self.lte_sn_window.widget()
                    if not tableWindow:
                        tableWidget = TableWindow(self.lte_sn_window, windowName)
                        self.gc.openedWindows.append(tableWidget)

                    if self.lte_sn_window not in subwindowList:
                        self.lte_sn_window = SubWindowArea(self.mdi, self.gc)
                        self.mdi.addSubWindow(self.lte_sn_window)

                    if tableWidget:
                        self.lte_sn_window.setWidget(tableWidget)
                    self.lte_sn_window.show()
                else:
                    # create new subwindow
                    self.lte_sn_window = SubWindowArea(self.mdi, self.gc)
                    tableWidget = TableWindow(self.lte_sn_window, windowName)
                    self.lte_sn_window.setWidget(tableWidget)
                    self.mdi.addSubWindow(self.lte_sn_window)
                    self.lte_sn_window.show()
                    self.gc.openedWindows.append(tableWidget)

            elif child == "PUCCH/PDSCH Parameters":
                tableWidget = None
                if hasattr(self, "lte_ppparam_window") is True:
                    tableWindow = self.lte_ppparam_window.widget()
                    if not tableWindow:
                        tableWidget = TableWindow(self.lte_ppparam_window, windowName)
                        self.gc.openedWindows.append(tableWidget)

                    if self.lte_ppparam_window not in subwindowList:
                        self.lte_ppparam_window = SubWindowArea(self.mdi, self.gc)
                        self.mdi.addSubWindow(self.lte_ppparam_window)

                    if tableWidget:
                        self.lte_ppparam_window.setWidget(tableWidget)
                    self.lte_ppparam_window.show()
                else:
                    # create new subwindow
                    self.lte_ppparam_window = SubWindowArea(self.mdi, self.gc)
                    tableWidget = TableWindow(self.lte_ppparam_window, windowName)
                    self.lte_ppparam_window.setWidget(tableWidget)
                    self.mdi.addSubWindow(self.lte_ppparam_window)
                    self.lte_ppparam_window.show()
                    self.gc.openedWindows.append(tableWidget)

            elif child == "Data":
                tableWidget = None
                if hasattr(self, "lte_data_window") is True:
                    tableWindow = self.lte_data_window.widget()
                    if not tableWindow:
                        tableWidget = TableWindow(self.lte_data_window, windowName)
                        self.gc.openedWindows.append(tableWidget)

                    if self.lte_data_window not in subwindowList:
                        self.lte_data_window = SubWindowArea(self.mdi, self.gc)
                        self.mdi.addSubWindow(self.lte_data_window)

                    if tableWidget:
                        self.lte_data_window.setWidget(tableWidget)
                    self.lte_data_window.show()
                else:
                    # create new subwindow
                    self.lte_data_window = SubWindowArea(self.mdi, self.gc)
                    tableWidget = TableWindow(self.lte_data_window, windowName)
                    self.lte_data_window.setWidget(tableWidget)
                    self.mdi.addSubWindow(self.lte_data_window)
                    self.lte_data_window.show()
                    self.gc.openedWindows.append(tableWidget)

            elif child == "LTE Line Chart":
                linechartWidget = None
                if hasattr(self, "lte_lc_window") is True:
                    linechartWindow = self.lte_lc_window.widget()
                    del linechartWindow
                    linechartWindow = None
                    if not linechartWindow:
                        widget = Ui_LTE_LCwidget(
                            self.lte_lc_window, windowName, self.gc.azenqosDatabase
                        )
                        self.gc.openedWindows.append(widget)
                    else:
                        widget = linechartWindow
                        widget.show()

                    if self.lte_lc_window not in subwindowList:
                        self.lte_lc_window = SubWindowArea(self.mdi, self.gc)
                        self.mdi.addSubWindow(self.lte_lc_window)

                    if widget:
                        self.lte_lc_window.setWidget(widget)
                    self.lte_lc_window.show()
                else:
                    # create new subwindow
                    self.lte_lc_window = SubWindowArea(self.mdi, self.gc)
                    widget = Ui_LTE_LCwidget(
                        self.lte_lc_window, windowName, self.gc.azenqosDatabase
                    )
                    self.lte_lc_window.setWidget(widget)
                    self.mdi.addSubWindow(self.lte_lc_window)
                    self.lte_lc_window.show()
                    self.gc.openedWindows.append(widget)

            elif child == "LTE RLC":
                widget = None
                if hasattr(self, "lte_rlc_window") is True:
                    tableWindow = self.lte_rlc_window.widget()
                    if not tableWindow:
                        widget = TableWindow(self.lte_rlc_window, windowName)
                        self.gc.openedWindows.append(widget)

                    if self.lte_rlc_window not in subwindowList:
                        self.lte_rlc_window = SubWindowArea(self.mdi, self.gc)
                        self.mdi.addSubWindow(self.lte_rlc_window)

                    if widget:
                        self.lte_rlc_window.setWidget(widget)
                    self.lte_rlc_window.show()
                else:
                    # create new subwindow
                    self.lte_rlc_window = SubWindowArea(self.mdi, self.gc)
                    widget = TableWindow(self.lte_rlc_window, windowName)
                    self.lte_rlc_window.setWidget(widget)
                    self.mdi.addSubWindow(self.lte_rlc_window)
                    self.lte_rlc_window.show()
                    self.gc.openedWindows.append(widget)

            elif child == "LTE VoLTE":
                widget = None
                if hasattr(self, "lte_volte_window") is True:
                    widget = self.lte_volte_window.widget()
                    if not widget:
                        widget = TableWindow(self.lte_volte_window, windowName)
                        self.gc.openedWindows.append(widget)

                    if self.lte_volte_window not in subwindowList:
                        self.lte_volte_window = SubWindowArea(self.mdi, self.gc)
                        self.mdi.addSubWindow(self.lte_volte_window)

                    if widget:
                        self.lte_volte_window.setWidget(widget)
                    self.lte_volte_window.show()
                else:
                    # create new subwindow
                    self.lte_volte_window = SubWindowArea(self.mdi, self.gc)
                    widget = TableWindow(self.lte_volte_window, windowName)
                    self.lte_volte_window.setWidget(widget)
                    self.mdi.addSubWindow(self.lte_volte_window)
                    self.lte_volte_window.show()
                    self.gc.openedWindows.append(widget)

        elif parent == "5G NR":
            if child == "Radio Parameters":
                tableWidget = None
                if hasattr(self, "nr_param_window") is True:
                    tableWindow = self.nr_param_window.widget()
                    if not tableWindow:
                        tableWidget = TableWindow(self.nr_param_window, windowName)
                        self.gc.openedWindows.append(tableWidget)

                    if self.nr_param_window not in subwindowList:
                        self.nr_param_window = SubWindowArea(self.mdi, self.gc)
                        self.mdi.addSubWindow(self.nr_param_window)

                    if tableWidget:
                        self.nr_param_window.setWidget(tableWidget)
                    self.nr_param_window.show()
                else:
                    # create new subwindow
                    self.nr_param_window = SubWindowArea(self.mdi, self.gc)
                    tableWidget = TableWindow(self.nr_param_window, windowName)
                    self.nr_param_window.setWidget(tableWidget)
                    self.mdi.addSubWindow(self.nr_param_window)
                    self.nr_param_window.show()
                    self.gc.openedWindows.append(tableWidget)

            elif child == "Serving + Neighbors":
                tableWidget = None
                if hasattr(self, "nr_sn_window") is True:
                    tableWindow = self.nr_sn_window.widget()
                    if not tableWindow:
                        tableWidget = TableWindow(self.nr_sn_window, windowName)
                        self.gc.openedWindows.append(tableWidget)

                    if self.nr_sn_window not in subwindowList:
                        self.nr_sn_window = SubWindowArea(self.mdi, self.gc)
                        self.mdi.addSubWindow(self.nr_sn_window)

                    if tableWidget:
                        self.nr_sn_window.setWidget(tableWidget)
                    self.nr_sn_window.show()
                else:
                    # create new subwindow
                    self.nr_sn_window = SubWindowArea(self.mdi, self.gc)
                    tableWidget = TableWindow(self.nr_sn_window, windowName)
                    self.nr_sn_window.setWidget(tableWidget)
                    self.mdi.addSubWindow(self.nr_sn_window)
                    self.nr_sn_window.show()
                    self.gc.openedWindows.append(tableWidget)

        elif parent == "CDMA/EVDO":
            if child == "Radio Parameters":
                tableWidget = None
                if hasattr(self, "cdma_rp_window") is True:
                    tableWindow = self.cdma_rp_window.widget()
                    if not tableWindow:
                        tableWidget = TableWindow(self.cdma_rp_window, windowName)
                        self.gc.openedWindows.append(tableWidget)

                    if self.cdma_rp_window not in subwindowList:
                        self.cdma_rp_window = SubWindowArea(self.mdi, self.gc)
                        self.mdi.addSubWindow(self.cdma_rp_window)

                    if tableWidget:
                        self.cdma_rp_window.setWidget(tableWidget)
                    self.cdma_rp_window.show()
                else:
                    # create new subwindow
                    self.cdma_rp_window = SubWindowArea(self.mdi, self.gc)
                    tableWidget = TableWindow(self.cdma_rp_window, windowName)
                    self.cdma_rp_window.setWidget(tableWidget)
                    self.mdi.addSubWindow(self.cdma_rp_window)
                    self.cdma_rp_window.show()
                    self.gc.openedWindows.append(tableWidget)

            elif child == "Serving + Neighbors":
                tableWidget = None
                if hasattr(self, "cdma_sn_window") is True:
                    tableWindow = self.cdma_sn_window.widget()
                    if not tableWindow:
                        tableWidget = TableWindow(self.cdma_sn_window, windowName)
                        self.gc.openedWindows.append(tableWidget)

                    if self.cdma_sn_window not in subwindowList:
                        self.cdma_sn_window = SubWindowArea(self.mdi, self.gc)
                        self.mdi.addSubWindow(self.cdma_sn_window)

                    if tableWidget:
                        self.cdma_sn_window.setWidget(tableWidget)
                    self.cdma_sn_window.show()
                else:
                    # create new subwindow
                    self.cdma_sn_window = SubWindowArea(self.mdi, self.gc)
                    tableWidget = TableWindow(self.cdma_sn_window, windowName)
                    self.cdma_sn_window.setWidget(tableWidget)
                    self.mdi.addSubWindow(self.cdma_sn_window)
                    self.cdma_sn_window.show()
                    self.gc.openedWindows.append(tableWidget)

            elif child == "EVDO Parameters":
                tableWidget = None
                if hasattr(self, "cdma_evdo_window") is True:
                    tableWindow = self.cdma_evdo_window.widget()
                    if not tableWindow:
                        tableWidget = TableWindow(self.cdma_evdo_window, windowName)
                        self.gc.openedWindows.append(tableWidget)

                    if self.cdma_evdo_window not in subwindowList:
                        self.cdma_evdo_window = SubWindowArea(self.mdi, self.gc)
                        self.mdi.addSubWindow(self.cdma_evdo_window)

                    if tableWidget:
                        self.cdma_evdo_window.setWidget(tableWidget)
                    self.cdma_evdo_window.show()
                else:
                    # create new subwindow
                    self.cdma_evdo_window = SubWindowArea(self.mdi, self.gc)
                    tableWidget = TableWindow(self.cdma_evdo_window, windowName)
                    self.cdma_evdo_window.setWidget(tableWidget)
                    self.mdi.addSubWindow(self.cdma_evdo_window)
                    self.cdma_evdo_window.show()
                    self.gc.openedWindows.append(tableWidget)

        elif parent == "Data":
            if child == "GSM Data Line Chart":
                linechartWidget = None
                if hasattr(self, "gsm_data_lc") is True:
                    linechartWindow = self.gsm_data_lc.widget()
                    del linechartWindow
                    linechartWindow = None
                    if not linechartWindow:
                        linechartWidget = Ui_GSM_Data_LCwidget(
                            self, windowName, self.gc.azenqosDatabase
                        )
                        self.gc.openedWindows.append(linechartWidget)

                    if self.gsm_data_lc not in subwindowList:
                        self.gsm_data_lc = SubWindowArea(self.mdi, self.gc)
                        self.mdi.addSubWindow(self.gsm_data_lc)

                    if linechartWidget:
                        self.gsm_data_lc.setWidget(linechartWidget)
                    self.gsm_data_lc.show()
                else:
                    # create new subwindow
                    self.gsm_data_lc = SubWindowArea(self.mdi, self.gc)
                    linechartWidget = Ui_GSM_Data_LCwidget(
                        self, windowName, self.gc.azenqosDatabase
                    )
                    self.gsm_data_lc.setWidget(linechartWidget)
                    self.mdi.addSubWindow(self.gsm_data_lc)
                    self.gsm_data_lc.show()
                    self.gc.openedWindows.append(linechartWidget)

            if child == "WCDMA Data Line Chart":
                linechartWidget = None
                if hasattr(self, "wcdma_data_lc") is True:
                    linechartWindow = self.wcdma_data_lc.widget()
                    del linechartWindow
                    linechartWindow = None
                    if not linechartWindow:
                        linechartWidget = Ui_WCDMA_Data_LCwidget(
                            self, windowName, self.gc.azenqosDatabase
                        )
                        self.gc.openedWindows.append(linechartWidget)

                    if self.wcdma_data_lc not in subwindowList:
                        self.wcdma_data_lc = SubWindowArea(self.mdi, self.gc)
                        self.mdi.addSubWindow(self.wcdma_data_lc)

                    if linechartWidget:
                        self.wcdma_data_lc.setWidget(linechartWidget)
                    self.wcdma_data_lc.show()
                else:
                    # create new subwindow
                    self.wcdma_data_lc = SubWindowArea(self.mdi, self.gc)
                    linechartWidget = Ui_WCDMA_Data_LCwidget(
                        self, windowName, self.gc.azenqosDatabase
                    )
                    self.wcdma_data_lc.setWidget(linechartWidget)
                    self.mdi.addSubWindow(self.wcdma_data_lc)
                    self.wcdma_data_lc.show()
                    self.gc.openedWindows.append(linechartWidget)

            elif child == "GPRS/EDGE Information":
                tableWidget = None
                if hasattr(self, "gprs_info") is True:
                    tableWindow = self.gprs_info.widget()
                    if not tableWindow:
                        tableWidget = TableWindow(self.gprs_info, windowName)
                        self.gc.openedWindows.append(tableWidget)

                    if self.gprs_info not in subwindowList:
                        self.gprs_info = SubWindowArea(self.mdi, self.gc)
                        self.mdi.addSubWindow(self.gprs_info)

                    if tableWidget:
                        self.gprs_info.setWidget(tableWidget)
                    self.gprs_info.show()
                else:
                    # create new subwindow
                    self.gprs_info = SubWindowArea(self.mdi, self.gc)
                    tableWidget = TableWindow(self.gprs_info, windowName)
                    self.gprs_info.setWidget(tableWidget)
                    self.mdi.addSubWindow(self.gprs_info)
                    self.gprs_info.show()
                    self.gc.openedWindows.append(tableWidget)

            elif child == "Web Browser":
                tableWidget = None
                if hasattr(self, "web_browser") is True:
                    tableWindow = self.web_browser.widget()
                    if not tableWindow:
                        tableWidget = TableWindow(self.web_browser, windowName)
                        self.gc.openedWindows.append(tableWidget)

                    if self.web_browser not in subwindowList:
                        self.web_browser = SubWindowArea(self.mdi, self.gc)
                        self.mdi.addSubWindow(self.web_browser)

                    if tableWidget:
                        self.web_browser.setWidget(tableWidget)
                    self.web_browser.show()
                else:
                    # create new subwindow
                    self.web_browser = SubWindowArea(self.mdi, self.gc)
                    tableWidget = TableWindow(self.web_browser, windowName)
                    self.web_browser.setWidget(tableWidget)
                    self.mdi.addSubWindow(self.web_browser)
                    self.web_browser.show()
                    self.gc.openedWindows.append(tableWidget)

            elif child == "HSDPA/HSPA + Statistics":
                tableWidget = None
                if hasattr(self, "hsdpa_stat") is True:
                    tableWindow = self.hsdpa_stat.widget()
                    if not tableWindow:
                        tableWidget = TableWindow(self.hsdpa_stat, windowName)
                        self.gc.openedWindows.append(tableWidget)

                    if self.hsdpa_stat not in subwindowList:
                        self.hsdpa_stat = SubWindowArea(self.mdi, self.gc)
                        self.mdi.addSubWindow(self.hsdpa_stat)

                    if tableWidget:
                        self.hsdpa_stat.setWidget(tableWidget)
                    self.hsdpa_stat.show()
                else:
                    # create new subwindow
                    self.hsdpa_stat = SubWindowArea(self.mdi, self.gc)
                    tableWidget = TableWindow(self.hsdpa_stat, windowName)
                    self.hsdpa_stat.setWidget(tableWidget)
                    self.mdi.addSubWindow(self.hsdpa_stat)
                    self.hsdpa_stat.show()
                    self.gc.openedWindows.append(tableWidget)

            elif child == "HSUPA Statistics":
                tableWidget = None
                if hasattr(self, "hsupa_stat") is True:
                    tableWindow = self.hsupa_stat.widget()
                    if not tableWindow:
                        tableWidget = TableWindow(self.hsupa_stat, windowName)
                        self.gc.openedWindows.append(tableWidget)

                    if self.hsupa_stat not in subwindowList:
                        self.hsupa_stat = SubWindowArea(self.mdi, self.gc)
                        self.mdi.addSubWindow(self.hsupa_stat)

                    if tableWidget:
                        self.hsupa_stat.setWidget(tableWidget)
                    self.hsupa_stat.show()
                else:
                    # create new subwindow
                    self.hsupa_stat = SubWindowArea(self.mdi, self.gc)
                    tableWidget = TableWindow(self.hsupa_stat, windowName)
                    self.hsupa_stat.setWidget(tableWidget)
                    self.mdi.addSubWindow(self.hsupa_stat)
                    self.hsupa_stat.show()
                    self.gc.openedWindows.append(tableWidget)

            elif child == "LTE Data Statistics":
                tableWidget = None
                if hasattr(self, "lte_data_stat") is True:
                    tableWindow = self.lte_data_stat.widget()
                    if not tableWindow:
                        tableWidget = TableWindow(self.lte_data_stat, windowName)
                        self.gc.openedWindows.append(tableWidget)

                    if self.lte_data_stat not in subwindowList:
                        self.lte_data_stat = SubWindowArea(self.mdi, self.gc)
                        self.mdi.addSubWindow(self.lte_data_stat)

                    if tableWidget:
                        self.lte_data_stat.setWidget(tableWidget)
                    self.lte_data_stat.show()
                else:
                    # create new subwindow
                    self.lte_data_stat = SubWindowArea(self.mdi, self.gc)
                    tableWidget = TableWindow(self.lte_data_stat, windowName)
                    self.lte_data_stat.setWidget(tableWidget)
                    self.mdi.addSubWindow(self.lte_data_stat)
                    self.lte_data_stat.show()
                    self.gc.openedWindows.append(tableWidget)

            elif child == "LTE Data Line Chart":
                linechartWidget = None
                if hasattr(self, "lte_data_lc") is True:
                    linechartWindow = self.lte_data_lc.widget()
                    del linechartWindow
                    linechartWindow = None
                    if not linechartWindow:
                        linechartWidget = Ui_LTE_Data_LCwidget(
                            self, windowName, self.gc.azenqosDatabase
                        )
                        self.gc.openedWindows.append(linechartWidget)

                    if self.lte_data_lc not in subwindowList:
                        self.lte_data_lc = SubWindowArea(self.mdi, self.gc)
                        self.mdi.addSubWindow(self.lte_data_lc)

                    if linechartWidget:
                        self.lte_data_lc.setWidget(linechartWidget)
                    self.lte_data_lc.show()
                else:
                    # create new subwindow
                    self.lte_data_lc = SubWindowArea(self.mdi, self.gc)
                    linechartWidget = Ui_LTE_Data_LCwidget(
                        self, windowName, self.gc.azenqosDatabase
                    )
                    self.lte_data_lc.setWidget(linechartWidget)
                    self.mdi.addSubWindow(self.lte_data_lc)
                    self.lte_data_lc.show()
                    self.gc.openedWindows.append(linechartWidget)

            elif child == "Wifi Connected AP":
                tableWidget = None
                if hasattr(self, "wifi_connected_ap") is True:
                    tableWindow = self.wifi_connected_ap.widget()
                    if not tableWindow:
                        tableWidget = TableWindow(self.wifi_connected_ap, windowName)
                        self.gc.openedWindows.append(tableWidget)

                    if self.wifi_connected_ap not in subwindowList:
                        self.wifi_connected_ap = SubWindowArea(self.mdi, self.gc)
                        self.mdi.addSubWindow(self.wifi_connected_ap)

                    if tableWidget:
                        self.wifi_connected_ap.setWidget(tableWidget)
                    self.wifi_connected_ap.show()
                else:
                    # create new subwindow
                    self.wifi_connected_ap = SubWindowArea(self.mdi, self.gc)
                    tableWidget = TableWindow(self.wifi_connected_ap, windowName)
                    self.wifi_connected_ap.setWidget(tableWidget)
                    self.mdi.addSubWindow(self.wifi_connected_ap)
                    self.wifi_connected_ap.show()
                    self.gc.openedWindows.append(tableWidget)

            elif child == "Wifi Scanned APs":
                tableWidget = None
                if hasattr(self, "wifi_scanned_ap") is True:
                    tableWindow = self.wifi_scanned_ap.widget()
                    if not tableWindow:
                        tableWidget = TableWindow(self.wifi_scanned_ap, windowName)
                        self.gc.openedWindows.append(tableWidget)

                    if self.wifi_scanned_ap not in subwindowList:
                        self.wifi_scanned_ap = SubWindowArea(self.mdi, self.gc)
                        self.mdi.addSubWindow(self.wifi_scanned_ap)

                    if tableWidget:
                        self.wifi_scanned_ap.setWidget(tableWidget)
                    self.wifi_scanned_ap.show()
                else:
                    # create new subwindow
                    self.wifi_scanned_ap = SubWindowArea(self.mdi, self.gc)
                    tableWidget = TableWindow(self.wifi_scanned_ap, windowName)
                    self.wifi_scanned_ap.setWidget(tableWidget)
                    self.mdi.addSubWindow(self.wifi_scanned_ap)
                    self.wifi_scanned_ap.show()
                    self.gc.openedWindows.append(tableWidget)

            elif child == "Wifi Graph":
                tableWidget = None
                if hasattr(self, "wifi_graph") is True:
                    tableWindow = self.wifi_graph.widget()
                    if not tableWindow:
                        tableWidget = TableWindow(self.wifi_graph, windowName)
                        self.gc.openedWindows.append(tableWidget)

                    if self.wifi_graph not in subwindowList:
                        self.wifi_graph = SubWindowArea(self.mdi, self.gc)
                        self.mdi.addSubWindow(self.wifi_graph)

                    if tableWidget:
                        self.wifi_graph.setWidget(tableWidget)
                    self.wifi_graph.show()
                else:
                    # create new subwindow
                    self.wifi_graph = SubWindowArea(self.mdi, self.gc)
                    tableWidget = TableWindow(self.wifi_graph, windowName)
                    self.wifi_graph.setWidget(tableWidget)
                    self.mdi.addSubWindow(self.wifi_graph)
                    self.wifi_graph.show()
                    self.gc.openedWindows.append(tableWidget)

            elif child == "5G NR Data Line Chart":
                linechartWidget = None
                if hasattr(self, "nr_data_lc") is True:
                    linechartWindow = self.nr_data_lc.widget()
                    del linechartWindow
                    linechartWindow = None
                    if not linechartWindow:
                        linechartWidget = Ui_NR_Data_LCwidget(
                            self, windowName, self.gc.azenqosDatabase
                        )
                        self.gc.openedWindows.append(linechartWidget)

                    if self.nr_data_lc not in subwindowList:
                        self.nr_data_lc = SubWindowArea(self.mdi, self.gc)
                        self.mdi.addSubWindow(self.nr_data_lc)

                    if linechartWidget:
                        self.nr_data_lc.setWidget(linechartWidget)
                    self.nr_data_lc.show()
                else:
                    # create new subwindow
                    self.nr_data_lc = SubWindowArea(self.mdi, self.gc)
                    linechartWidget = Ui_NR_Data_LCwidget(
                        self, windowName, self.gc.azenqosDatabase
                    )
                    self.nr_data_lc.setWidget(linechartWidget)
                    self.mdi.addSubWindow(self.nr_data_lc)
                    self.nr_data_lc.show()
                    self.gc.openedWindows.append(linechartWidget)

        elif parent == "Signaling":
            if child == "Events":
                events_widget = None
                if hasattr(self, "events_window") is True:
                    tableWindow = self.events_window.widget()
                    if not tableWindow:
                        events_widget = TableWindow(self.events_window, windowName)
                        self.gc.openedWindows.append(events_widget)

                    if self.events_window not in subwindowList:
                        self.events_window = SubWindowArea(self.mdi, self.gc)
                        self.mdi.addSubWindow(self.events_window)

                    if tableWindow:
                        self.events_window.setWidget(tableWindow)
                    self.events_window.show()

                else:
                    # create new subwindow
                    self.events_window = SubWindowArea(self.mdi, self.gc)
                    events_widget = TableWindow(self.events_window, windowName)
                    self.events_window.setWidget(events_widget)
                    self.mdi.addSubWindow(self.events_window)
                    self.events_window.show()
                    self.gc.openedWindows.append(events_widget)

            elif child == "Layer 3 Messages":
                layer_three_widget = None
                print("l30")
                if hasattr(self, "layer_three_messages") is True:
                    tableWindow = self.layer_three_messages.widget()
                    print("l31")
                    if not tableWindow:
                        print("l32")
                        layer_three_widget = TableWindow(
                            self.layer_three_messages, windowName
                        )
                        self.gc.openedWindows.append(layer_three_widget)

                    print("l33")
                    if self.layer_three_messages not in subwindowList:
                        print("l34")
                        self.layer_three_messages = SubWindowArea(self.mdi, self.gc)
                        self.mdi.addSubWindow(self.layer_three_messages)
                    print("l35")
                    if tableWindow:
                        print("l36")
                        self.layer_three_messages.setWidget(tableWindow)
                    print("l37")
                    self.layer_three_messages.show()
                    print("l38")
                else:
                    print("l39")
                    # create new subwindow
                    self.layer_three_messages = SubWindowArea(self.mdi, self.gc)
                    layer_three_widget = TableWindow(
                        self.layer_three_messages, windowName
                    )
                    self.layer_three_messages.setWidget(layer_three_widget)
                    self.mdi.addSubWindow(self.layer_three_messages)
                    self.layer_three_messages.show()
                    self.gc.openedWindows.append(layer_three_widget)

                # if hasattr(self, 'layer_three_messages') is False:
                #     # self.layer_three_messages = TableWindow(self, windowName)
                #     self.layer_three_messages = TableWindow(self.mdi, windowName)
                # self.gc.openedWindows.append(self.layer_three_messages)
                # self.mdi.addSubWindow(self.layer_three_messages)
                # self.layer_three_messages.show()
                # self.layer_three_messages.activateWindow()
            elif child == "Benchmark":
                benchmark_widget = None
                if hasattr(self, "benchmark") is True:
                    tableWindow = self.benchmark.widget()
                    if not tableWindow:
                        benchmark_widget = TableWindow(self.benchmark, windowName)
                        self.gc.openedWindows.append(benchmark_widget)

                    if self.benchmark not in subwindowList:
                        self.benchmark = SubWindowArea(self.mdi, self.gc)
                        self.mdi.addSubWindow(self.benchmark)

                    if benchmark_widget:
                        self.benchmark.setWidget(benchmark_widget)

                    self.benchmark.show()

                else:
                    # create new subwindow
                    self.benchmark = SubWindowArea(self.mdi, self.gc)
                    benchmark_widget = TableWindow(self.benchmark, windowName)
                    self.benchmark.setWidget(benchmark_widget)
                    self.mdi.addSubWindow(self.benchmark)
                    self.benchmark.show()
                    self.gc.openedWindows.append(benchmark_widget)

                # if hasattr(self, 'benchmark') is False:
                #     # self.benchmark = TableWindow(self, windowName)
                #     self.benchmark = TableWindow(self.mdi, windowName)
                # self.gc.openedWindows.append(self.benchmark)
                # self.mdi.addSubWindow(self.benchmark)
                # self.benchmark.show()
                # self.benchmark.activateWindow()
            elif child == "MM Reg States":
                mm_widget = None
                if hasattr(self, "mm_reg_states") is True:
                    tableWindow = self.mm_reg_states.widget()
                    if not tableWindow:
                        mm_widget = TableWindow(self.mm_reg_states, windowName)
                        self.gc.openedWindows.append(mm_widget)

                    if self.mm_reg_states not in subwindowList:
                        self.mm_reg_states = SubWindowArea(self.mdi, self.gc)
                        self.mdi.addSubWindow(self.mm_reg_states)

                    if mm_widget:
                        self.mm_reg_states.setWidget(mm_widget)

                    self.mm_reg_states.show()

                else:
                    # create new subwindow
                    self.mm_reg_states = SubWindowArea(self.mdi, self.gc)
                    mm_widget = TableWindow(self.mm_reg_states, windowName)
                    self.mm_reg_states.setWidget(mm_widget)
                    self.mdi.addSubWindow(self.mm_reg_states)
                    self.mm_reg_states.show()
                    self.gc.openedWindows.append(mm_widget)

                # if hasattr(self, 'mm_reg_states') is False:
                #     # self.mm_reg_states = TableWindow(self, windowName)
                #     self.mm_reg_states = TableWindow(self.mdi, windowName)
                # self.gc.openedWindows.append(self.mm_reg_states)
                # self.mdi.addSubWindow(self.mm_reg_states)
                # self.mm_reg_states.show()
                # self.mm_reg_states.activateWindow()
            elif child == "Serving System Info":
                serving_system_widget = None
                if hasattr(self, "serving_system_info") is True:
                    tableWindow = self.serving_system_info.widget()
                    if not tableWindow:
                        serving_system_widget = TableWindow(
                            self.serving_system_info, windowName
                        )
                        self.gc.openedWindows.append(serving_system_widget)

                    if self.serving_system_info not in subwindowList:
                        self.serving_system_info = SubWindowArea(self.mdi, self.gc)
                        self.mdi.addSubWindow(self.serving_system_info)

                    if serving_system_widget:
                        self.serving_system_info.setWidget(serving_system_widget)

                    self.serving_system_info.show()

                else:
                    # create new subwindow
                    self.serving_system_info = SubWindowArea(self.mdi, self.gc)
                    serving_system_widget = TableWindow(
                        self.serving_system_info, windowName
                    )
                    self.serving_system_info.setWidget(serving_system_widget)
                    self.mdi.addSubWindow(self.serving_system_info)
                    self.serving_system_info.show()
                    self.gc.openedWindows.append(serving_system_widget)

                # if hasattr(self, 'serving_system_info') is False:
                #     # self.serving_system_info = TableWindow(self, windowName)
                #     self.serving_system_info = TableWindow(self.mdi, windowName)
                # self.gc.openedWindows.append(self.serving_system_info)
                # self.mdi.addSubWindow(self.serving_system_info)
                # self.serving_system_info.show()
                # self.serving_system_info.activateWindow()
            elif child == "Debug Android/Event":
                debug_event_widget = None
                if hasattr(self, "debug_event") is True:
                    tableWindow = self.debug_event.widget()
                    if not tableWindow:
                        debug_event_widget = TableWindow(self.debug_event, windowName)
                        self.gc.openedWindows.append(debug_event_widget)

                    if self.debug_event not in subwindowList:
                        self.debug_event = SubWindowArea(self.mdi, self.gc)
                        self.mdi.addSubWindow(self.debug_event)
                    if debug_event_widget:
                        self.debug_event.setWidget(debug_event_widget)

                    self.debug_event.show()

                else:
                    # create new subwindow
                    self.debug_event = SubWindowArea(self.mdi, self.gc)
                    debug_event_widget = TableWindow(self.debug_event, windowName)
                    self.debug_event.setWidget(debug_event_widget)
                    self.mdi.addSubWindow(self.debug_event)
                    self.debug_event.show()
                    self.gc.openedWindows.append(debug_event_widget)

                # if hasattr(self, 'debug_event') is False:
                #     # self.debug_event = TableWindow(self, windowName)
                #     self.debug_event = TableWindow(self.mdi, windowName)
                # self.gc.openedWindows.append(self.debug_event)
                # self.mdi.addSubWindow(self.debug_event)
                # self.debug_event.show()
                # self.debug_event.activateWindow()
        # if parent == ''
        # elif parent == "Positioning":
        #     if child == "GPS":
        #         print("1")
        #     elif child == "Map":
        #         print("2")
        #     elif child == "Positioning":
        #         print("3")
        # elif parent == "Customized Window":
        #     if child == "Status Window":
        #         print("1")
        #     elif child == "Message Window":
        #         print("2")
        #     elif child == "Line Chart":
        #         print("3")
        # elif parent == "NB-IoT":
        #     if child == "NB-IoT Radio Parameters Window":
        #         print("1")
        if self.mdi:
            self.mdi.show()

    def selectConfiguration(self):
        getSelected = self.configurationTreeWidget.selectedItems()
        if getSelected:
            baseNode = getSelected[0]
            if baseNode.text(0) is not None:
                getChildNode = baseNode.text(0)
                if getChildNode == "Cell Information":
                    self.cell_information = CellInformation(self)
                    self.cell_information.show()
                elif getChildNode == "Equipment Configuration":
                    pass

    def killMainWindow(self):
        self.cleanup()
        self.close()
        """
        self.destroy(True, True)
        removeAzenqosGroup()
        for mdiwindow in self.mdi.subWindowList():
            mdiwindow.close()
        self.mdi.close()
        """

    def removeToolBarActions(self):
        actions = self.toolbar.actions()
        for action in actions:
            self.toolbar.removeAction(action)

    def loadWorkspaceFile(self):
        print("loadFile()")
        fp, _ = QFileDialog.getOpenFileName(
            self, "Open workspace file", QtCore.QDir.rootPath(), "*.ini"
        )
        if fp:
            print("loadWorkspaceFile:", fp)
            if len(self.gc.openedWindows) > 0:
                for mdiwindow in self.mdi.subWindowList():
                    mdiwindow.close()
                self.gc.openedWindows = []
            shutil.copyfile(fp, azq_utils.get_local_fp("settings.ini"))
            self.settings.sync()  # load changes
            self._gui_restore()

    def saveWorkspaceFile(self):
        fp, _ = QFileDialog.getSaveFileName(
            self, "Save workspace file", QtCore.QDir.rootPath(), "*.ini"
        )
        if fp:
            print("saveWorkspaceFile:", fp)
            self._gui_save()
            self.settings.sync()  # save changes
            shutil.copyfile(azq_utils.get_local_fp("settings.ini"), fp)

    def closeEvent(self, event):
        print("analyzer_window: closeEvent:", event)
        # just close it as it might be ordered by qgis close (unload()) too
        self.cleanup()
        event.accept()

        """
        reply = None
        if self.newImport is False:
            reply = QMessageBox.question(
                self,
                "Quit Azenqos",
                "Do you want to quit?",
                QMessageBox.Yes|QMessageBox.No,
                QMessageBox.Yes,
            )

        if reply == QMessageBox.Yes or self.newImport is True:
            self.cleanup()
            event.accept()
        else:
            event.ignore()
        """

    def cleanup(self):
        self._gui_save()
        # saving = Utils().saveState(self.gc.CURRENT_PATH)
        iface.actionPan().trigger()
        self.pauseTime()
        self.timeSliderThread.exit()
        self.removeToolBarActions()
        self.quitTask = tasks.QuitTask(u"Quiting Plugin", self)
        QgsApplication.taskManager().addTask(self.quitTask)

        # Begin removing layer (which cause db issue)
        project = QgsProject.instance()
        for (id_l, layer) in project.mapLayers().items():
            if layer.type() == layer.VectorLayer:
                layer.removeSelection()
            to_be_deleted = project.mapLayersByName(layer.name())[0]
            project.removeMapLayer(to_be_deleted.id())
            layer = None

        QgsProject.instance().reloadAllLayers()
        QgsProject.instance().clear()
        # self.gc.tableList = []
        self.gc.activeLayers = []

        if len(self.gc.openedWindows) > 0:
            for window in self.gc.openedWindows:
                window.close()
            self.gc.openedWindows = []
        QgsProject.removeAllMapLayers(QgsProject.instance())
        # End removing layer

        removeAzenqosGroup()
        for mdiwindow in self.mdi.subWindowList():
            mdiwindow.close()
        self.mdi.close()
        QgsMessageLog.logMessage("Close App")
        tasks.close_db()
        try:
            shutil.rmtree(self.gc.logPath)
        except:
            pass
        self.closed = True

        
    def clearAllSelectedFeatures(self):
        if (self.qgis_iface):
            mc = self.qgis_iface.mapCanvas()
            for layer in mc.layers():
                if layer.type() == layer.VectorLayer:
                    layer.removeSelection()
            mc.refresh()
            print("[-- Clear selected features --]")


        
    def removeAzenqosGroup(self):
        if self.qgis_iface:
            root = QgsProject.instance().layerTreeRoot()
            azqGroup = root.findGroup("Azenqos")
            if azqGroup:
                root.removeChildNode(azqGroup)



class GroupArea(QMdiArea):
    def __init__(self):
        super().__init__()

    def closeEvent(self, QCloseEvent):
        self.closeAllSubWindows()


class SubWindowArea(QMdiSubWindow):
    def __init__(self, item, gc):
        super().__init__(item)
        self.gc = gc
        dirname = os.path.dirname(__file__)
        self.setWindowIcon(QIcon(QPixmap(os.path.join(dirname, "icon.png"))))

    def closeEvent(self, QCloseEvent):
        self.gc.mdi.removeSubWindow(self)
