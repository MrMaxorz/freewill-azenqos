# -*- coding: utf-8 -*-
"""
/***************************************************************************
 AzenqosDialog
                                 A QGIS plugin
 Azenqos Plugin
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2019-03-18
        git sha              : $Format:%H$
        copyright            : (C) 2019 by Metamedia Techonology Co.,Ltd
        email                : gritmanoch@longdo.com
 ***************************************************************************/

/***************************************************************************
 *                                                                        *
 *  This program is free software; you can redistribute it and/or modify  *
 *  it under the terms of the GNU General Public License as published by  *
 *  the Free Software Foundation; either version 2 of the License, or     *
 *  (at your option) any later version.                                   *
 *                                                                        *
 ***************************************************************************/
"""
import datetime
import threading
import ptvsd

import pyqtgraph as pg
import numpy as np

from PyQt5.QtWidgets import *
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import *  # QAbstractTableModel, QVariant, Qt, pyqtSignal, QThread
from PyQt5.QtSql import *  # QSqlQuery, QSqlDatabase
from PyQt5.QtGui import QColor
from qgis.core import *
from qgis.utils import *
from qgis.gui import *

from .cdma_evdo_query import CdmaEvdoQuery
from .globalutils import Utils
from .linechart import *
from .lte_query import LteDataQuery
from .signalling_query import SignalingDataQuery
from .wcdma_query import WcdmaDataQuery
from .worker import Worker
from .azq_maptool import AzenqosPointTool

azenqosDatabase = None
minTimeValue = None
maxTimeValue = None
fastForwardValue = 1
slowDownValue = 1
currentTimestamp = None
currentDateTimeString = None
recentDateTimeString = ""
clickedLatLon = {"lat": 0, "lon": 0}
sliderLength = 0
openedWindows = []
timeSlider = None
isSliderPlay = False
allLayers = []
tableList = []
linechartWindowname = [
    "WCDMA_Line Chart",
    "LTE_LTE Line Chart",
    "Data_WCDMA Data Line Chart",
    "Data_LTE Data Line Chart",
    "WCDMA_Pilot Analyzer",
]
threadpool = QThreadPool()
CURRENT_PATH = os.path.dirname(os.path.realpath(__file__))
vLayers = []


def clearAllSelectedFeatures():
    mc = iface.mapCanvas()
    for layer in mc.layers():
        if layer.type() == layer.VectorLayer:
            layer.removeSelection()

    mc.refresh()
    QgsMessageLog.logMessage("[-- Clear selected features --]")


def removeAzenqosGroup():
    root = QgsProject.instance().layerTreeRoot()
    azqGroup = root.findGroup("Azenqos")
    if azqGroup:
        root.removeChildNode(azqGroup)


# Database select window
class Ui_DatabaseDialog(QDialog):
    def __init__(self):
        super(Ui_DatabaseDialog, self).__init__()
        self.setupUi(self)

    def setupUi(self, DatabaseDialog):
        DatabaseDialog.setObjectName("DatabaseDialog")
        DatabaseDialog.setWindowModality(QtCore.Qt.ApplicationModal)
        DatabaseDialog.resize(540, 90)
        DatabaseDialog.setMaximumSize(QtCore.QSize(540, 90))
        self.browseButton = QtWidgets.QPushButton(DatabaseDialog)
        self.browseButton.setGeometry(QtCore.QRect(420, 25, 113, 31))
        self.browseButton.setObjectName("browseButton")
        self.dbPath = QtWidgets.QLineEdit(DatabaseDialog)
        self.dbPath.setGeometry(QtCore.QRect(10, 30, 400, 21))
        self.dbPath.setObjectName("dbPath")
        self.buttonBox = QtWidgets.QDialogButtonBox(DatabaseDialog)
        self.buttonBox.setGeometry(QtCore.QRect(370, 56, 164, 32))
        self.buttonBox.setStandardButtons(
            QtWidgets.QDialogButtonBox.Ok | QtWidgets.QDialogButtonBox.Cancel
        )
        self.buttonBox.setObjectName("buttonBox")
        self.dbPathLabel = QtWidgets.QLabel(DatabaseDialog)
        self.dbPathLabel.setGeometry(QtCore.QRect(10, 10, 181, 16))
        self.dbPathLabel.setObjectName("dbPathLabel")

        self.retranslateUi(DatabaseDialog)
        QtCore.QMetaObject.connectSlotsByName(DatabaseDialog)

        self.browseButton.clicked.connect(self.getfiles)
        self.buttonBox.button(QtWidgets.QDialogButtonBox.Ok).clicked.connect(
            self.checkDatabase
        )
        self.buttonBox.button(QtWidgets.QDialogButtonBox.Cancel).clicked.connect(
            self.reject
        )

    def retranslateUi(self, DatabaseDialog):
        _translate = QtCore.QCoreApplication.translate
        DatabaseDialog.setWindowTitle(_translate("DatabaseDialog", "Azenqos"))
        self.browseButton.setText(_translate("DatabaseDialog", "Browse.."))
        self.dbPathLabel.setText(
            _translate("DatabaseDialog", "Database path: ( .azm )")
        )

    def getfiles(self):
        fileName, _ = QFileDialog.getOpenFileName(
            self, "Single File", QtCore.QDir.rootPath(), "*.azm"
        )
        if fileName != "":
            self.dbPath.setText(fileName)
            databasePath = Utils().unzipToFile(CURRENT_PATH, fileName)
            self.databasePath = databasePath
        else:
            if self.dbPath.text() != "":
                self.databasePath = self.dbPath.text()

    def checkDatabase(self):
        if self.dbPath.text() != "":
            self.databasePath = CURRENT_PATH + "/file/azqdata.db"
            self.addDatabase()
            if not azenqosDatabase.open():
                QtWidgets.QMessageBox.critical(
                    None,
                    "Cannot open database",
                    "Unable to establish a database connection.\n"
                    "This example needs SQLite support. Please read "
                    "the Qt SQL driver documentation for information how "
                    "to build it.\n\n"
                    "Click Cancel to exit.",
                    QtWidgets.QMessageBox.Cancel,
                )
                return False
            else:
                self.uri = QgsDataSourceUri()
                self.uri.setDatabase(self.databasePath)
                self.getLayersFromDb()
                # self.addLayerToQgis()
                self.layerTask = LayerTask(u"Waste cpu 1", self.uri)
                QgsApplication.taskManager().addTask(self.layerTask)
                self.getTimeForSlider()
                self.hide()
                self.azenqosMainMenu = AzenqosDialog(self)
                self.azenqosMainMenu.show()
                self.azenqosMainMenu.raise_()
                self.azenqosMainMenu.activateWindow()
        else:
            QtWidgets.QMessageBox.critical(
                None,
                "Cannot open database",
                "Unable to establish a database connection.\n" "Click Cancel to exit.",
                QtWidgets.QMessageBox.Cancel,
            )
            return False

    def getTimeForSlider(self):
        global minTimeValue
        global maxTimeValue
        global currentDateTimeString
        dataList = []
        azenqosDatabase.open()
        subQuery = QSqlQuery()
        queryString = "SELECT log_start_time, log_end_time FROM logs"
        subQuery.exec_(queryString)
        while subQuery.next():
            if subQuery.value(0).strip() and subQuery.value(1).strip():
                startTime = subQuery.value(0)
                endTime = subQuery.value(1)
        azenqosDatabase.close()

        try:
            minTimeValue = datetime.datetime.strptime(
                str(startTime), "%Y-%m-%d %H:%M:%S.%f"
            ).timestamp()
            maxTimeValue = datetime.datetime.strptime(
                str(endTime), "%Y-%m-%d %H:%M:%S.%f"
            ).timestamp()
            currentDateTimeString = "%s" % (
                datetime.datetime.fromtimestamp(minTimeValue)
            )
        except:
            QtWidgets.QMessageBox.critical(
                None,
                "Cannot open database",
                "Unable to establish a database connection.\n"
                "This example needs SQLite support. Please read "
                "the Qt SQL driver documentation for information how "
                "to build it.\n\n"
                "Click Cancel to exit.",
                QtWidgets.QMessageBox.Cancel,
            )
            return False
        self.setIncrementValue()

    def addDatabase(self):
        global azenqosDatabase
        azenqosDatabase = QSqlDatabase.addDatabase("QSQLITE")
        azenqosDatabase.setDatabaseName(self.databasePath)

    def getLayersFromDb(self):
        global allLayers
        azenqosDatabase.open()
        query = QSqlQuery()
        queryString = "select tbl_name from sqlite_master where sql LIKE '%\"geom\"%' and type = 'table' order by tbl_name"
        query.exec_(queryString)
        while query.next():
            tableName = query.value(0)
            subQueryString = "select count(*) from %s" % (tableName)
            subQuery = QSqlQuery()
            subQuery.exec_(subQueryString)
            while subQuery.next():
                if int(subQuery.value(0)) > 0:
                    allLayers.append(tableName)
        azenqosDatabase.close()

    def setIncrementValue(self):
        global sliderLength
        sliderLength = maxTimeValue - minTimeValue

    def reject(self):
        global openedWindows
        if len(openedWindows) > 0:
            for window in openedWindows:
                window.close()
                window.reject()
                del window
        super().reject()
        QgsProject.removeAllMapLayers(QgsProject.instance())
        removeAzenqosGroup()
        self.destroy(True)
        del self


class AzenqosDialog(QDialog):
    def __init__(self, databaseUi):
        """Constructor."""
        super(AzenqosDialog, self).__init__(None)
        self.timeSliderThread = TimeSliderThread()
        self.posObjs = []
        self.posIds = []
        self.hilightList = []
        self.maxPosId = 0
        self.currentMaxPosId = 0
        self.setupUi(self)
        self.raise_()
        self.activateWindow()
        self.databaseUi = databaseUi
        self.canvas = iface.mapCanvas()
        self.clickTool = QgsMapToolEmitPoint(self.canvas)
        self.canvas.setMapTool(self.clickTool)
        self.clickTool.canvasClicked.connect(self.clickCanvas)
        azenqosDatabase.open()

    def setupUi(self, AzenqosDialog):
        global timeSlider
        AzenqosDialog.setObjectName("AzenqosDialog")
        AzenqosDialog.resize(640, 480)
        self.setupTreeWidget(AzenqosDialog)
        self.mdi = GroupArea()
        self.mdi.show()

        # Time Slider
        timeSlider = TimeSlider(AzenqosDialog)
        timeSlider.setGeometry(QtCore.QRect(300, 56, 150, 22))
        sizePolicy = QSizePolicy(QSizePolicy.Expanding, QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(timeSlider.sizePolicy().hasHeightForWidth())
        timeSlider.setSizePolicy(sizePolicy)
        timeSlider.setBaseSize(QtCore.QSize(500, 0))
        timeSlider.setPageStep(1)
        timeSlider.setSliderPosition(0)
        timeSlider.setOrientation(QtCore.Qt.Horizontal)
        timeSlider.setObjectName("timeSlider")
        timeSlider.setTracking(True)
        timeSlider.setRange(0, int(maxTimeValue - minTimeValue))

        # Play Speed Textbox
        self.speedLabel = QLabel(AzenqosDialog)
        self.speedLabel.setGeometry(QtCore.QRect(480, 82, 40, 22))
        self.speedLabel.setObjectName("Speed")
        self.playSpeed = QLineEdit(AzenqosDialog)
        self.onlyDouble = QDoubleValidator(float(0), float(20), 2, self.playSpeed)
        self.playSpeed.setValidator(self.onlyDouble)
        self.playSpeed.setGeometry(QtCore.QRect(540, 82, 40, 22))
        self.playSpeed.setText("{:.2f}".format(1))
        self.playSpeed.textChanged.connect(self.setPlaySpeed)

        # Datetime Textbox
        self.timeEdit = QDateTimeEdit(AzenqosDialog)
        self.timeEdit.setGeometry(QtCore.QRect(480, 56, 140, 22))
        self.timeEdit.setObjectName("timeEdit")
        self.timeEdit.setDisplayFormat("hh:mm:ss.zzz")
        self.timeEdit.setDateTime(datetime.datetime.fromtimestamp(minTimeValue))
        self.timeEdit.setReadOnly(True)

        # Time label
        self.timeSliderLabel = QLabel(AzenqosDialog)
        self.timeSliderLabel.setGeometry(QtCore.QRect(300, 30, 100, 16))
        self.timeSliderLabel.setObjectName("timeSliderLabel")

        self.setupPlayStopButton(AzenqosDialog)

        # Import Database Button
        self.importDatabaseBtn = QPushButton(AzenqosDialog)
        self.importDatabaseBtn.setGeometry(QtCore.QRect(300, 140, 181, 32))
        self.importDatabaseBtn.setObjectName("importDatabaseBtn")

        # Filter Button
        # self.filterBtn = QPushButton(AzenqosDialog)
        # self.filterBtn.setGeometry(QtCore.QRect(300, 190, 181, 32))
        # self.filterBtn.setObjectName("filterBtn")

        self.retranslateUi(AzenqosDialog)
        QtCore.QMetaObject.connectSlotsByName(AzenqosDialog)

        timeSlider.valueChanged.connect(self.timeChange)
        self.importDatabaseBtn.clicked.connect(self.importDatabase)

    def retranslateUi(self, AzenqosDialog):
        _translate = QtCore.QCoreApplication.translate
        AzenqosDialog.setWindowTitle(_translate("AzenqosDialog", "Azenqos Main Menu"))
        self.presentationTreeWidget.headerItem().setText(
            0, _translate("AzenqosDialog", "Presentation")
        )
        __sortingEnabled = self.presentationTreeWidget.isSortingEnabled()
        self.presentationTreeWidget.setSortingEnabled(False)
        self.presentationTreeWidget.setSortingEnabled(__sortingEnabled)
        # self.configurationTreeWidget.headerItem().setText(
        #     0, _translate("AzenqosDialog", "Configuration"))
        # self.configurationTreeWidget.setSortingEnabled(False)
        # self.configurationTreeWidget.setSortingEnabled(__sortingEnabled)
        self.importDatabaseBtn.setText(_translate("AzenqosDialog", "Import Database"))
        # self.filterBtn.setText(_translate("AzenqosDialog", "Filter"))
        self.timeSliderLabel.setText(_translate("AzenqosDialog", "Time:"))
        self.speedLabel.setText(_translate("AzenqosDialog", "Speed:"))

    def setupTreeWidget(self, AzenqosDialog):
        # Presentation Tree Widget
        self.presentationTreeWidget = QTreeWidget(AzenqosDialog)
        self.presentationTreeWidget.setGeometry(QtCore.QRect(20, 20, 260, 300))
        self.presentationTreeWidget.setFrameShape(QFrame.StyledPanel)
        self.presentationTreeWidget.setAllColumnsShowFocus(True)
        self.presentationTreeWidget.setObjectName("presentationTreeWidget")
        self.presentationTreeWidget.itemDoubleClicked.connect(self.loadAllMessages)

        # GSM Section
        # gsm = QTreeWidgetItem(self.presentationTreeWidget, ['GSM'])
        # gsmRadioParams = QTreeWidgetItem(gsm, ['Radio Parameters'])
        # gsmServeNeighbor = QTreeWidgetItem(gsm, ['Serving + Neighbors'])
        # gsmCurrentChannel = QTreeWidgetItem(gsm, ['Current Channel'])
        # gsmCI = QTreeWidgetItem(gsm, ['C/I'])
        # gsmLineChart = QTreeWidgetItem(gsm, ['GSM Line Chart'])
        # gsmEventsCounter = QTreeWidgetItem(gsm, ['Events Counter'])

        # WCDMA Section
        wcdma = QTreeWidgetItem(self.presentationTreeWidget, ["WCDMA"])
        wcdmaActiveMonitoredSets = QTreeWidgetItem(wcdma, ["Active + Monitored Sets"])
        wcdmaRadioParams = QTreeWidgetItem(wcdma, ["Radio Parameters"])
        wcdmaASL = QTreeWidgetItem(wcdma, ["Active Set List"])
        wcdmaMonitoredSet = QTreeWidgetItem(wcdma, ["Monitored Set List"])
        wcdmaSummary = QTreeWidgetItem(wcdma, ["BLER Summary"])
        wcdmaTransportChannel = QTreeWidgetItem(wcdma, ["BLER / Transport Channel"])
        wcdmaLineChart = QTreeWidgetItem(wcdma, ["Line Chart"])
        wcdmaBearers = QTreeWidgetItem(wcdma, ["Bearers"])
        wcdmaPilotPoluting = QTreeWidgetItem(wcdma, ["Pilot Poluting Cells"])
        wcdmaActiveMonitoredBar = QTreeWidgetItem(wcdma, ["Active + Monitored Bar"])
        wcdmaReports = QTreeWidgetItem(wcdma, ["CM GSM Reports"])
        wcdmaCells = QTreeWidgetItem(wcdma, ["CM GSM Cells"])
        wcdmaPilotAnalyzer = QTreeWidgetItem(wcdma, ["Pilot Analyzer"])

        # LTE Section
        lte = QTreeWidgetItem(self.presentationTreeWidget, ["LTE"])
        lteRadioParams = QTreeWidgetItem(lte, ["Radio Parameters"])
        lteServingNeighbors = QTreeWidgetItem(lte, ["Serving + Neighbors"])
        ltePPParams = QTreeWidgetItem(lte, ["PUCCH/PDSCH Parameters"])
        lteLineChart = QTreeWidgetItem(lte, ["LTE Line Chart"])
        lteRlc = QTreeWidgetItem(lte, ["LTE RLC"])
        lteVo = QTreeWidgetItem(lte, ["LTE VoLTE"])

        # CDMA/EVDO Section
        cdmaEvdo = QTreeWidgetItem(self.presentationTreeWidget, ["CDMA/EVDO"])
        cdmaEvdoRadioParams = QTreeWidgetItem(cdmaEvdo, ["Radio Parameters"])
        cdmaEvdoServingNeighbors = QTreeWidgetItem(cdmaEvdo, ["Serving + Neighbors"])
        cdmaEvdoParams = QTreeWidgetItem(cdmaEvdo, ["EVDO Parameters"])

        # Data Section
        data = QTreeWidgetItem(self.presentationTreeWidget, ["Data"])
        dataGsmLineChart = QTreeWidgetItem(data, ["GSM Data Line Chart"])
        dataWcdmaLineChart = QTreeWidgetItem(data, ["WCDMA Data Line Chart"])
        dataEdgeInfo = QTreeWidgetItem(data, ["GPRS/EDGE Information"])
        dataWebBrowser = QTreeWidgetItem(data, ["Web Browser"])
        dataStats = QTreeWidgetItem(data, ["HSDPA/HSPA + Statistics"])
        dataHsupaStats = QTreeWidgetItem(data, ["HSUPA Statistics"])
        dataLteStats = QTreeWidgetItem(data, ["LTE Data Statistics"])
        dataLteLineChart = QTreeWidgetItem(data, ["LTE Data Line Chart"])
        dataWifiConnectedAp = QTreeWidgetItem(data, ["Wifi Connected AP"])
        dataWifiScannedAp = QTreeWidgetItem(data, ["Wifi Scanned APs"])
        dataWifiGraph = QTreeWidgetItem(data, ["Wifi Graph"])

        # Signaling Section
        signaling = QTreeWidgetItem(self.presentationTreeWidget, ["Signaling"])
        signalingEvents = QTreeWidgetItem(signaling, ["Events"])
        # signalingLayerOne = QTreeWidgetItem(signaling, ['Layer 1 Messages'])
        signalingLayerThree = QTreeWidgetItem(signaling, ["Layer 3 Messages"])
        signalingBenchmark = QTreeWidgetItem(signaling, ["Benchmark"])
        signalingMM = QTreeWidgetItem(signaling, ["MM Reg States"])
        signalingSystemInfo = QTreeWidgetItem(signaling, ["Serving System Info"])
        # signalingDebug = QTreeWidgetItem(signaling, ['Debug Android/Event'])

        # Positioning Section
        # positioning = QTreeWidgetItem(self.presentationTreeWidget,
        #                               ['Positioning'])
        # positioningGps = QTreeWidgetItem(positioning, ['GPS'])
        # positioningMap = QTreeWidgetItem(positioning, ['Map'])
        # positioningPositioning = QTreeWidgetItem(positioning, ['Positioning'])

        # Customized Window Section
        # customizedWindow = QTreeWidgetItem(self.presentationTreeWidget,
        #                                    ['Customized Window'])
        # customizedWindowStatus = QTreeWidgetItem(customizedWindow,
        #                                          ['Status Window'])
        # customizedWindowMessage = QTreeWidgetItem(customizedWindow,
        #                                           ['Message Window'])
        # customizedWindowChart = QTreeWidgetItem(customizedWindow,
        #                                         ['Line Chart'])

        # NB-IoT Section
        # nBIoT = QTreeWidgetItem(self.presentationTreeWidget, ['NB-IoT'])
        # nBIoTParams = QTreeWidgetItem(nBIoT,
        #                               ['NB-IoT Radio Parameters Window'])

        self.presentationTreeWidget.header().setCascadingSectionResizes(True)
        self.presentationTreeWidget.header().setHighlightSections(True)

        # Configuration
        # self.configurationTreeWidget = QTreeWidget(AzenqosDialog)
        # self.configurationTreeWidget.setGeometry(
        #     QtCore.QRect(20, 320, 260, 100))
        # self.configurationTreeWidget.setFrameShape(QFrame.StyledPanel)
        # self.configurationTreeWidget.setAllColumnsShowFocus(True)
        # self.configurationTreeWidget.setObjectName("configurationTreeWidget")
        # cellInformation = QTreeWidgetItem(self.configurationTreeWidget,
        #                                   ['Cell Information'])
        # equipmentConfiguration = QTreeWidgetItem(self.configurationTreeWidget,
        #                                          ['Equipment Configuration'])
        # self.configurationTreeWidget.itemDoubleClicked.connect(
        #     self.selectConfiguration)

    def setupPlayStopButton(self, AzenqosDialog):
        self.horizontalLayout = QWidget(AzenqosDialog)
        self.horizontalLayout.setGeometry(QtCore.QRect(290, 70, 90, 48))
        self.playButton = QToolButton()
        self.playButton.setIcon(self.style().standardIcon(QStyle.SP_MediaPlay))
        self.pauseButton = QToolButton()
        self.pauseButton.setIcon(self.style().standardIcon(QStyle.SP_MediaPause))
        layout = QHBoxLayout(self.horizontalLayout)
        layout.addStretch(1)
        layout.addWidget(self.playButton)
        layout.addWidget(self.pauseButton)
        self.playButton.clicked.connect(self.startPlaytimeThread)
        self.pauseButton.clicked.connect(self.pauseTime)

    def startPlaytimeThread(self):
        global isSliderPlay
        isSliderPlay = True
        self.playButton.setDisabled(True)
        self.playSpeed.setDisabled(True)
        self.timeSliderThread.changeValue.connect(self.setTimeValue)
        self.timeSliderThread.start()

    def pauseTime(self):
        global isSliderPlay
        timeSlider.setEnabled(True)
        self.playButton.setEnabled(True)
        self.playSpeed.setEnabled(True)
        self.timeSliderThread.quit()
        threading.Event()
        isSliderPlay = False

    def setTimeValue(self, value):
        global isSliderPlay
        timeSlider.setValue(value)
        timeSlider.update()
        if value == maxTimeValue:
            self.pauseTime()

    def setPlaySpeed(self, value):
        global fastForwardValue, slowDownValue
        value = float(value) if value != "" else float(1)
        if value >= float(1):
            fastForwardValue = value
            slowDownValue = 1
        elif value == float(0):
            fastForwardValue = 1
            slowDownValue = 1
        elif value < float(1):
            fastForwardValue = 1
            slowDownValue = value

        timeSlider.initMaxInt()

    def clickCanvas(self, point, button):
        layerData = []
        times = []
        for layer in vLayers:
            if layer.featureCount() == 0:
                # There are no features - skip
                continue
            # layerPoint = self.toLayerCoordinates( layer, event.pos() )
            shortestDistance = float("inf")
            closestFeatureId = -1
            # Loop through all features in the layer
            for f in layer.getFeatures():
                dist = f.geometry().distance(QgsGeometry.fromPointXY(point))

                shortestDistance = dist
                closestFeatureId = f.id()
                if shortestDistance > -1.0 and shortestDistance <= 0.05:
                    info = (layer, closestFeatureId, shortestDistance)
                    layerData.append(info)
                    times.append(layer.getFeature(closestFeatureId).attribute("time"))

        if not len(layerData) > 0:
            # Looks like no vector layers were found - do nothing
            return

            # Sort the layer information by shortest distance
        layerData.sort(key=lambda element: element[2])

        selected_fid = []
        for (layer, closestFeatureId, shortestDistance) in layerData:
            selected_fid.append((layer, closestFeatureId, shortestDistance))
            layer.select(closestFeatureId)

        print(max(times))
        self.canvas.refreshAllLayers()

    def loadAllMessages(self):
        getSelected = self.presentationTreeWidget.selectedItems()
        if getSelected:
            baseNode = getSelected[0]
            if baseNode.text(0) is not None:
                getChildNode = baseNode.text(0)
                getParentNode = baseNode.parent().text(0)
                self.classifySelectedItems(getParentNode, getChildNode)

    def importDatabase(self):
        self.databaseDialog = Ui_DatabaseDialog()
        self.databaseDialog.show()
        self.hide()

    def timeChange(self):
        global currentTimestamp
        global timeSlider
        global currentDateTimeString
        value = timeSlider.value()
        timestampValue = minTimeValue + value
        sampledate = datetime.datetime.fromtimestamp(timestampValue)
        self.timeEdit.setDateTime(sampledate)
        if len(openedWindows) > 0:
            for window in openedWindows:
                if not window.title in linechartWindowname:
                    window.hilightRow(sampledate)
                else:
                    window.moveChart(sampledate)
        # text = "[--" + str(len(tableList) + "--]"
        # QgsMessageLog.logMessage(text)

        if len(tableList) > 0:
            QgsMessageLog.logMessage("[-- have tableList --]")
            worker = Worker(self.hilightFeature)
            threadpool.start(worker)
        self.timeSliderThread.set(value)
        currentTimestamp = timestampValue
        currentDateTimeString = "%s" % (
            datetime.datetime.fromtimestamp(currentTimestamp)
        )

    # def threadComplete(self):
    #     QgsMessageLog.logMessage('[-- THREAD COMPLETE --]')
    #     iface.mapCanvas().refresh()

    def hilightFeature(self):
        QgsMessageLog.logMessage("[-- Start hilight features --]")
        start_time = time.time()
        self.getPosIdsByTable()
        if len(self.posIds) > 0 and len(self.posObjs) > 0:
            self.usePosIdsSelectedFeatures()
        QgsMessageLog.logMessage("[-- End hilight features --]")

    def getPosIdsByTable(self):
        azenqosDatabase.open()
        # start_time = time.time()
        QgsMessageLog.logMessage("tables: " + str(tableList))
        for tableName in tableList:
            self.posObjs = []
            self.posIds = []
            query = QSqlQuery()
            queryString = (
                "SELECT posid FROM %s WHERE time <= '%s' AND geom IS NOT NULL ORDER BY time DESC LIMIT 1"
                % (tableName, currentDateTimeString)
            )
            query.exec_(queryString)
            while query.next():
                posid = query.value(0)
                posdict = {"posid": posid, "table": tableName}
                self.posObjs.append(posdict)
                self.posIds.append(posid)
        # elapsed_time = time.time() - start_time
        # QgsMessageLog.logMessage('Query Elapsed time: ' + str(elapsed_time) + ' s.')
        azenqosDatabase.close()

    def usePosIdsSelectedFeatures(self):
        if self.posIds:
            selected_ids = []
            layerName = None
            # start_time = time.time()
            self.currentMaxPosId = max(self.posIds)
            for obj in self.posObjs:
                if obj.get("posid") == self.currentMaxPosId:
                    layerName = obj.get("table")
                    break

            layer = QgsProject.instance().mapLayersByName(layerName)[0]
            layerFeatures = layer.getFeatures()
            root = QgsProject.instance().layerTreeRoot()
            root.setHasCustomLayerOrder(True)
            order = root.customLayerOrder()
            order.insert(0, order.pop(order.index(layer)))  # vlayer to the top
            root.setCustomLayerOrder(order)
            iface.setActiveLayer(layer)
            QgsMessageLog.logMessage("layer name: " + str(layerName))

            for feature in layerFeatures:
                posid = feature["posid"]
                if self.currentMaxPosId == posid:
                    selected_ids.append(feature.id())
            QgsMessageLog.logMessage("selected_ids: {0}".format(str(selected_ids)))

            if layer is not None:

                if len(selected_ids) > 0:
                    layer.selectByIds(selected_ids)

                    ext = layer.extent()
                    xmin = ext.xMinimum()
                    xmax = ext.xMaximum()
                    ymin = ext.yMinimum()
                    ymax = ext.yMaximum()
                    zoomRectangle = QgsRectangle(xmin, ymin, xmax, ymax)
                    iface.mapCanvas().setExtent(zoomRectangle)
                    box = layer.boundingBoxOfSelected()
                    iface.mapCanvas().setExtent(box)
                    iface.mapCanvas().setSelectionColor(QColor("yellow"))
                    iface.mapCanvas().zoomToSelected()
                    iface.mapCanvas().zoomScale(25600.0)
                    iface.mapCanvas().refresh()
                self.maxPosId = self.currentMaxPosId

    def classifySelectedItems(self, parent, child):
        global openedWindows
        global tableList
        windowName = parent + "_" + child
        if hasattr(self, "mdi") is False:
            self.mdi = GroupArea()
        subwindowList = self.mdi.subWindowList()
        if parent == "WCDMA":
            if child == "Active + Monitored Sets":
                tableWidget = None
                if hasattr(self, "wcdma_ams_window") is True:
                    tableWindow = self.wcdma_ams_window.widget()
                    if not tableWindow:
                        tableWidget = TableWindow(self.wcdma_ams_window, windowName)
                        openedWindows.append(tableWidget)

                    if self.wcdma_ams_window not in subwindowList:
                        self.wcdma_ams_window = QMdiSubWindow(self.mdi)
                        self.mdi.addSubWindow(self.wcdma_ams_window)

                    if tableWidget:
                        self.wcdma_ams_window.setWidget(tableWidget)
                    self.wcdma_ams_window.show()
                else:
                    # create new subwindow
                    self.wcdma_ams_window = QMdiSubWindow(self.mdi)
                    tableWidget = TableWindow(self.wcdma_ams_window, windowName)
                    self.wcdma_ams_window.setWidget(tableWidget)
                    self.mdi.addSubWindow(self.wcdma_ams_window)
                    self.wcdma_ams_window.show()
                    openedWindows.append(tableWidget)

            elif child == "Radio Parameters":
                tableWidget = None
                if hasattr(self, "wcdma_rp_window") is True:
                    tableWindow = self.wcdma_rp_window.widget()
                    if not tableWindow:
                        tableWidget = TableWindow(self.wcdma_rp_window, windowName)
                        openedWindows.append(tableWidget)

                    if self.wcdma_rp_window not in subwindowList:
                        self.wcdma_rp_window = QMdiSubWindow(self.mdi)
                        self.mdi.addSubWindow(self.wcdma_rp_window)

                    if tableWidget:
                        self.wcdma_rp_window.setWidget(tableWidget)
                    self.wcdma_rp_window.show()
                else:
                    # create new subwindow
                    self.wcdma_rp_window = QMdiSubWindow(self.mdi)
                    tableWidget = TableWindow(self.wcdma_rp_window, windowName)
                    self.wcdma_rp_window.setWidget(tableWidget)
                    self.mdi.addSubWindow(self.wcdma_rp_window)
                    self.wcdma_rp_window.show()
                    openedWindows.append(tableWidget)

            elif child == "Active Set List":
                tableWidget = None
                if hasattr(self, "wcdma_asl_window") is True:
                    tableWindow = self.wcdma_asl_window.widget()
                    if not tableWindow:
                        tableWidget = TableWindow(self.wcdma_asl_window, windowName)
                        openedWindows.append(tableWidget)

                    if self.wcdma_asl_window not in subwindowList:
                        self.wcdma_asl_window = QMdiSubWindow(self.mdi)
                        self.mdi.addSubWindow(self.wcdma_asl_window)

                    if tableWidget:
                        self.wcdma_asl_window.setWidget(tableWidget)
                    self.wcdma_asl_window.show()
                else:
                    # create new subwindow
                    self.wcdma_asl_window = QMdiSubWindow(self.mdi)
                    tableWidget = TableWindow(self.wcdma_asl_window, windowName)
                    self.wcdma_asl_window.setWidget(tableWidget)
                    self.mdi.addSubWindow(self.wcdma_asl_window)
                    self.wcdma_asl_window.show()
                    openedWindows.append(tableWidget)

            elif child == "Monitored Set List":
                tableWidget = None
                if hasattr(self, "wcdma_msl_window") is True:
                    tableWindow = self.wcdma_msl_window.widget()
                    if not tableWindow:
                        tableWidget = TableWindow(self.wcdma_msl_window, windowName)
                        openedWindows.append(tableWidget)

                    if self.wcdma_msl_window not in subwindowList:
                        self.wcdma_msl_window = QMdiSubWindow(self.mdi)
                        self.mdi.addSubWindow(self.wcdma_msl_window)

                    if tableWidget:
                        self.wcdma_msl_window.setWidget(tableWidget)
                    self.wcdma_msl_window.show()
                else:
                    # create new subwindow
                    self.wcdma_msl_window = QMdiSubWindow(self.mdi)
                    tableWidget = TableWindow(self.wcdma_msl_window, windowName)
                    self.wcdma_msl_window.setWidget(tableWidget)
                    self.mdi.addSubWindow(self.wcdma_msl_window)
                    self.wcdma_msl_window.show()
                    openedWindows.append(tableWidget)

            elif child == "BLER Summary":
                tableWidget = None
                if hasattr(self, "wcdma_bler_window") is True:
                    tableWindow = self.wcdma_msl_window.widget()
                    if not tableWindow:
                        tableWidget = TableWindow(self.wcdma_bler_window, windowName)
                        openedWindows.append(tableWidget)

                    if self.wcdma_bler_window not in subwindowList:
                        self.wcdma_bler_window = QMdiSubWindow(self.mdi)
                        self.mdi.addSubWindow(self.wcdma_bler_window)

                    if tableWidget:
                        self.wcdma_bler_window.setWidget(tableWidget)
                    self.wcdma_bler_window.show()
                else:
                    # create new subwindow
                    self.wcdma_bler_window = QMdiSubWindow(self.mdi)
                    tableWidget = TableWindow(self.wcdma_bler_window, windowName)
                    self.wcdma_bler_window.setWidget(tableWidget)
                    self.mdi.addSubWindow(self.wcdma_bler_window)
                    self.wcdma_bler_window.show()
                    openedWindows.append(tableWidget)

            elif child == "BLER / Transport Channel":
                tableWidget = None
                if hasattr(self, "wcdma_blertc_window") is True:
                    tableWindow = self.wcdma_blertc_window.widget()
                    if not tableWindow:
                        tableWidget = TableWindow(self.wcdma_blertc_window, windowName)
                        openedWindows.append(tableWidget)

                    if self.wcdma_blertc_window not in subwindowList:
                        self.wcdma_blertc_window = QMdiSubWindow(self.mdi)
                        self.mdi.addSubWindow(self.wcdma_blertc_window)

                    if tableWidget:
                        self.wcdma_blertc_window.setWidget(tableWidget)
                    self.wcdma_blertc_window.show()
                else:
                    # create new subwindow
                    self.wcdma_blertc_window = QMdiSubWindow(self.mdi)
                    tableWidget = TableWindow(self.wcdma_blertc_window, windowName)
                    self.wcdma_blertc_window.setWidget(tableWidget)
                    self.mdi.addSubWindow(self.wcdma_blertc_window)
                    self.wcdma_blertc_window.show()
                    openedWindows.append(tableWidget)

            elif child == "Line Chart":
                linechartWidget = None
                if hasattr(self, "wcdma_lc_window") is True:
                    linechartWindow = self.wcdma_lc_window.widget()
                    if not linechartWindow:
                        linechartWidget = Ui_WCDMA_LCwidget(
                            self, windowName, azenqosDatabase
                        )
                        openedWindows.append(linechartWidget)

                    if self.wcdma_lc_window not in subwindowList:
                        self.wcdma_lc_window = QMdiSubWindow(self.mdi)
                        self.mdi.addSubWindow(self.wcdma_lc_window)

                    if linechartWidget:
                        self.wcdma_lc_window.setWidget(linechartWidget)
                    self.wcdma_lc_window.show()
                else:
                    # create new subwindow
                    self.wcdma_lc_window = QMdiSubWindow(self.mdi)
                    linechartWidget = Ui_WCDMA_LCwidget(
                        self, windowName, azenqosDatabase
                    )
                    self.wcdma_lc_window.setWidget(linechartWidget)
                    self.mdi.addSubWindow(self.wcdma_lc_window)
                    self.wcdma_lc_window.show()
                    openedWindows.append(linechartWidget)

            elif child == "Bearers":
                tableWidget = None
                if hasattr(self, "wcdma_bearer_window") is True:
                    tableWindow = self.wcdma_bearer_window.widget()
                    if not tableWindow:
                        tableWidget = TableWindow(self.wcdma_bearer_window, windowName)
                        openedWindows.append(tableWidget)

                    if self.wcdma_bearer_window not in subwindowList:
                        self.wcdma_bearer_window = QMdiSubWindow(self.mdi)
                        self.mdi.addSubWindow(self.wcdma_bearer_window)

                    if tableWidget:
                        self.wcdma_bearer_window.setWidget(tableWidget)
                    self.wcdma_bearer_window.show()
                else:
                    # create new subwindow
                    self.wcdma_bearer_window = QMdiSubWindow(self.mdi)
                    tableWidget = TableWindow(self.wcdma_bearer_window, windowName)
                    self.wcdma_bearer_window.setWidget(tableWidget)
                    self.mdi.addSubWindow(self.wcdma_bearer_window)
                    self.wcdma_bearer_window.show()
                    openedWindows.append(tableWidget)

            elif child == "Pilot Poluting Cells":
                tableWidget = None
                if hasattr(self, "wcdma_ppc_window") is True:
                    tableWindow = self.wcdma_ppc_window.widget()
                    if not tableWindow:
                        tableWidget = TableWindow(self.wcdma_ppc_window, windowName)
                        openedWindows.append(tableWidget)

                    if self.wcdma_ppc_window not in subwindowList:
                        self.wcdma_ppc_window = QMdiSubWindow(self.mdi)
                        self.mdi.addSubWindow(self.wcdma_ppc_window)

                    if tableWidget:
                        self.wcdma_ppc_window.setWidget(tableWidget)
                    self.wcdma_ppc_window.show()
                else:
                    # create new subwindow
                    self.wcdma_ppc_window = QMdiSubWindow(self.mdi)
                    tableWidget = TableWindow(self.wcdma_ppc_window, windowName)
                    self.wcdma_ppc_window.setWidget(tableWidget)
                    self.mdi.addSubWindow(self.wcdma_ppc_window)
                    self.wcdma_ppc_window.show()
                    openedWindows.append(tableWidget)

            elif child == "Active + Monitored Bar":
                tableWidget = None
                if hasattr(self, "wcdma_amb_window") is True:
                    tableWindow = self.wcdma_amb_window.widget()
                    if not tableWindow:
                        tableWidget = TableWindow(self.wcdma_amb_window, windowName)
                        openedWindows.append(tableWidget)

                    if self.wcdma_amb_window not in subwindowList:
                        self.wcdma_amb_window = QMdiSubWindow(self.mdi)
                        self.mdi.addSubWindow(self.wcdma_amb_window)

                    if tableWidget:
                        self.wcdma_amb_window.setWidget(tableWidget)
                    self.wcdma_amb_window.show()
                else:
                    # create new subwindow
                    self.wcdma_amb_window = QMdiSubWindow(self.mdi)
                    tableWidget = TableWindow(self.wcdma_amb_window, windowName)
                    self.wcdma_amb_window.setWidget(tableWidget)
                    self.mdi.addSubWindow(self.wcdma_amb_window)
                    self.wcdma_amb_window.show()
                    openedWindows.append(tableWidget)

            elif child == "CM GSM Reports":
                tableWidget = None
                if hasattr(self, "wcdma_report_window") is True:
                    tableWindow = self.wcdma_report_window.widget()
                    if not tableWindow:
                        tableWidget = TableWindow(self.wcdma_report_window, windowName)
                        openedWindows.append(tableWidget)

                    if self.wcdma_report_window not in subwindowList:
                        self.wcdma_report_window = QMdiSubWindow(self.mdi)
                        self.mdi.addSubWindow(self.wcdma_report_window)

                    if tableWidget:
                        self.wcdma_report_window.setWidget(tableWidget)
                    self.wcdma_report_window.show()
                else:
                    # create new subwindow
                    self.wcdma_report_window = QMdiSubWindow(self.mdi)
                    tableWidget = TableWindow(self.wcdma_report_window, windowName)
                    self.wcdma_report_window.setWidget(tableWidget)
                    self.mdi.addSubWindow(self.wcdma_report_window)
                    self.wcdma_report_window.show()
                    openedWindows.append(tableWidget)

            elif child == "CM GSM Cells":
                tableWidget = None
                if hasattr(self, "wcdma_cells_window") is True:
                    tableWindow = self.wcdma_cells_window.widget()
                    if not tableWindow:
                        tableWidget = TableWindow(self.wcdma_cells_window, windowName)
                        openedWindows.append(tableWidget)

                    if self.wcdma_cells_window not in subwindowList:
                        self.wcdma_cells_window = QMdiSubWindow(self.mdi)
                        self.mdi.addSubWindow(self.wcdma_cells_window)

                    if tableWidget:
                        self.wcdma_cells_window.setWidget(tableWidget)
                    self.wcdma_cells_window.show()
                else:
                    # create new subwindow
                    self.wcdma_cells_window = QMdiSubWindow(self.mdi)
                    tableWidget = TableWindow(self.wcdma_cells_window, windowName)
                    self.wcdma_cells_window.setWidget(tableWidget)
                    self.mdi.addSubWindow(self.wcdma_cells_window)
                    self.wcdma_cells_window.show()
                    openedWindows.append(tableWidget)

            elif child == "Pilot Analyzer":
                tableWidget = None
                if hasattr(self, "wcdma_analyzer_window") is True:
                    tableWindow = self.wcdma_analyzer_window.widget()
                    if not tableWindow:
                        tableWidget = TableWindow(
                            self.wcdma_analyzer_window, windowName
                        )
                        openedWindows.append(tableWidget)

                    if self.wcdma_analyzer_window not in subwindowList:
                        self.wcdma_analyzer_window = QMdiSubWindow(self.mdi)
                        self.mdi.addSubWindow(self.wcdma_analyzer_window)

                    if tableWidget:
                        self.wcdma_analyzer_window.setWidget(tableWidget)
                    self.wcdma_analyzer_window.show()
                else:
                    # create new subwindow
                    self.wcdma_analyzer_window = QMdiSubWindow(self.mdi)
                    tableWidget = TableWindow(self.wcdma_analyzer_window, windowName)
                    self.wcdma_analyzer_window.setWidget(tableWidget)
                    self.mdi.addSubWindow(self.wcdma_analyzer_window)
                    self.wcdma_analyzer_window.show()
                    openedWindows.append(tableWidget)

        elif parent == "LTE":
            if child == "Radio Parameters":
                tableWidget = None
                if hasattr(self, "lte_param_window") is True:
                    tableWindow = self.lte_param_window.widget()
                    if not tableWindow:
                        tableWidget = TableWindow(self.lte_param_window, windowName)
                        openedWindows.append(tableWidget)

                    if self.lte_param_window not in subwindowList:
                        self.lte_param_window = QMdiSubWindow(self.mdi)
                        self.mdi.addSubWindow(self.lte_param_window)

                    if tableWidget:
                        self.lte_param_window.setWidget(tableWidget)
                    self.lte_param_window.show()
                else:
                    # create new subwindow
                    self.lte_param_window = QMdiSubWindow(self.mdi)
                    tableWidget = TableWindow(self.lte_param_window, windowName)
                    self.lte_param_window.setWidget(tableWidget)
                    self.mdi.addSubWindow(self.lte_param_window)
                    self.lte_param_window.show()
                    openedWindows.append(tableWidget)

            elif child == "Serving + Neighbors":
                tableWidget = None
                if hasattr(self, "lte_sn_window") is True:
                    tableWindow = self.lte_sn_window.widget()
                    if not tableWindow:
                        tableWidget = TableWindow(self.lte_sn_window, windowName)
                        openedWindows.append(tableWidget)

                    if self.lte_sn_window not in subwindowList:
                        self.lte_sn_window = QMdiSubWindow(self.mdi)
                        self.mdi.addSubWindow(self.lte_sn_window)

                    if tableWidget:
                        self.lte_sn_window.setWidget(tableWidget)
                    self.lte_sn_window.show()
                else:
                    # create new subwindow
                    self.lte_sn_window = QMdiSubWindow(self.mdi)
                    tableWidget = TableWindow(self.lte_sn_window, windowName)
                    self.lte_sn_window.setWidget(tableWidget)
                    self.mdi.addSubWindow(self.lte_sn_window)
                    self.lte_sn_window.show()
                    openedWindows.append(tableWidget)

            elif child == "PUCCH/PDSCH Parameters":
                tableWidget = None
                if hasattr(self, "lte_ppparam_window") is True:
                    tableWindow = self.lte_ppparam_window.widget()
                    if not tableWindow:
                        tableWidget = TableWindow(self.lte_ppparam_window, windowName)
                        openedWindows.append(tableWidget)

                    if self.lte_ppparam_window not in subwindowList:
                        self.lte_ppparam_window = QMdiSubWindow(self.mdi)
                        self.mdi.addSubWindow(self.lte_ppparam_window)

                    if tableWidget:
                        self.lte_ppparam_window.setWidget(tableWidget)
                    self.lte_ppparam_window.show()
                else:
                    # create new subwindow
                    self.lte_ppparam_window = QMdiSubWindow(self.mdi)
                    tableWidget = TableWindow(self.lte_ppparam_window, windowName)
                    self.lte_ppparam_window.setWidget(tableWidget)
                    self.mdi.addSubWindow(self.lte_ppparam_window)
                    self.lte_ppparam_window.show()
                    openedWindows.append(tableWidget)

            elif child == "LTE Line Chart":
                widget = None
                if hasattr(self, "lte_lc_window") is True:
                    linechartWindow = self.lte_lc_window.widget()
                    if not linechartWindow:
                        widget = Ui_LTE_LCwidget(
                            self.lte_lc_window, windowName, azenqosDatabase
                        )
                        openedWindows.append(widget)
                    else:
                        widget = linechartWindow
                        widget.show()

                    if self.lte_lc_window not in subwindowList:
                        self.lte_lc_window = QMdiSubWindow(self.mdi)
                        self.mdi.addSubWindow(self.lte_lc_window)

                    if widget:
                        self.lte_lc_window.setWidget(widget)
                    self.lte_lc_window.show()
                else:
                    # create new subwindow
                    self.lte_lc_window = QMdiSubWindow(self.mdi)
                    widget = Ui_LTE_LCwidget(
                        self.lte_lc_window, windowName, azenqosDatabase
                    )
                    self.lte_lc_window.setWidget(widget)
                    self.mdi.addSubWindow(self.lte_lc_window)
                    self.lte_lc_window.show()
                    openedWindows.append(widget)

            elif child == "LTE RLC":
                widget = None
                if hasattr(self, "lte_rlc_window") is True:
                    tableWindow = self.lte_rlc_window.widget()
                    if not tableWindow:
                        widget = TableWindow(self.lte_rlc_window, windowName)
                        openedWindows.append(widget)

                    if self.lte_rlc_window not in subwindowList:
                        self.lte_rlc_window = QMdiSubWindow(self.mdi)
                        self.mdi.addSubWindow(self.lte_rlc_window)

                    if widget:
                        self.lte_rlc_window.setWidget(widget)
                    self.lte_rlc_window.show()
                else:
                    # create new subwindow
                    self.lte_rlc_window = QMdiSubWindow(self.mdi)
                    widget = TableWindow(self.lte_rlc_window, windowName)
                    self.lte_rlc_window.setWidget(widget)
                    self.mdi.addSubWindow(self.lte_rlc_window)
                    self.lte_rlc_window.show()
                    openedWindows.append(widget)

            elif child == "LTE VoLTE":
                widget = None
                if hasattr(self, "lte_volte_window") is True:
                    widget = self.lte_volte_window.widget()
                    if not widget:
                        widget = TableWindow(self.lte_volte_window, windowName)
                        openedWindows.append(widget)

                    if self.lte_volte_window not in subwindowList:
                        self.lte_volte_window = QMdiSubWindow(self.mdi)
                        self.mdi.addSubWindow(self.lte_volte_window)

                    if widget:
                        self.lte_volte_window.setWidget(widget)
                    self.lte_volte_window.show()
                else:
                    # create new subwindow
                    self.lte_volte_window = QMdiSubWindow(self.mdi)
                    widget = TableWindow(self.lte_volte_window, windowName)
                    self.lte_volte_window.setWidget(widget)
                    self.mdi.addSubWindow(self.lte_volte_window)
                    self.lte_volte_window.show()
                    openedWindows.append(widget)

        elif parent == "CDMA/EVDO":
            if child == "Radio Parameters":
                tableWidget = None
                if hasattr(self, "cdma_rp_window") is True:
                    tableWindow = self.cdma_rp_window.widget()
                    if not tableWindow:
                        tableWidget = TableWindow(self.cdma_rp_window, windowName)
                        openedWindows.append(tableWidget)

                    if self.cdma_rp_window not in subwindowList:
                        self.cdma_rp_window = QMdiSubWindow(self.mdi)
                        self.mdi.addSubWindow(self.cdma_rp_window)

                    if tableWidget:
                        self.cdma_rp_window.setWidget(tableWidget)
                    self.cdma_rp_window.show()
                else:
                    # create new subwindow
                    self.cdma_rp_window = QMdiSubWindow(self.mdi)
                    tableWidget = TableWindow(self.cdma_rp_window, windowName)
                    self.cdma_rp_window.setWidget(tableWidget)
                    self.mdi.addSubWindow(self.cdma_rp_window)
                    self.cdma_rp_window.show()
                    openedWindows.append(tableWidget)

            elif child == "Serving + Neighbors":
                tableWidget = None
                if hasattr(self, "cdma_sn_window") is True:
                    tableWindow = self.cdma_sn_window.widget()
                    if not tableWindow:
                        tableWidget = TableWindow(self.cdma_sn_window, windowName)
                        openedWindows.append(tableWidget)

                    if self.cdma_sn_window not in subwindowList:
                        self.cdma_sn_window = QMdiSubWindow(self.mdi)
                        self.mdi.addSubWindow(self.cdma_sn_window)

                    if tableWidget:
                        self.cdma_sn_window.setWidget(tableWidget)
                    self.cdma_sn_window.show()
                else:
                    # create new subwindow
                    self.cdma_sn_window = QMdiSubWindow(self.mdi)
                    tableWidget = TableWindow(self.cdma_sn_window, windowName)
                    self.cdma_sn_window.setWidget(tableWidget)
                    self.mdi.addSubWindow(self.cdma_sn_window)
                    self.cdma_sn_window.show()
                    openedWindows.append(tableWidget)

            elif child == "EVDO Parameters":
                tableWidget = None
                if hasattr(self, "cdma_evdo_window") is True:
                    tableWindow = self.cdma_evdo_window.widget()
                    if not tableWindow:
                        tableWidget = TableWindow(self.cdma_evdo_window, windowName)
                        openedWindows.append(tableWidget)

                    if self.cdma_evdo_window not in subwindowList:
                        self.cdma_evdo_window = QMdiSubWindow(self.mdi)
                        self.mdi.addSubWindow(self.cdma_evdo_window)

                    if tableWidget:
                        self.cdma_evdo_window.setWidget(tableWidget)
                    self.cdma_evdo_window.show()
                else:
                    # create new subwindow
                    self.cdma_evdo_window = QMdiSubWindow(self.mdi)
                    tableWidget = TableWindow(self.cdma_evdo_window, windowName)
                    self.cdma_evdo_window.setWidget(tableWidget)
                    self.mdi.addSubWindow(self.cdma_evdo_window)
                    self.cdma_evdo_window.show()
                    openedWindows.append(tableWidget)

        elif parent == "Data":
            if child == "WCDMA Data Line Chart":
                # if hasattr(self, 'wcdma_data_lc') is False:
                #     self.wcdma_data_lc = Ui_WCDMA_Data_LCwidget(self, windowName, azenqosDatabase)
                # openedWindows.append(self.wcdma_data_lc)
                # #self.mdi.addSubWindow(self.wcdma_data_lc)
                # self.wcdma_data_lc.show()
                # self.wcdma_data_lc.activateWindow()
                linechartWidget = None
                if hasattr(self, "wcdma_data_lc") is True:
                    linechartWindow = self.wcdma_data_lc.widget()
                    if not linechartWindow:
                        linechartWidget = Ui_WCDMA_Data_LCwidget(
                            self, windowName, azenqosDatabase
                        )
                        openedWindows.append(linechartWidget)

                    if self.wcdma_data_lc not in subwindowList:
                        self.wcdma_data_lc = QMdiSubWindow(self.mdi)
                        self.mdi.addSubWindow(self.wcdma_data_lc)

                    if linechartWidget:
                        self.wcdma_data_lc.setWidget(linechartWidget)
                    self.wcdma_data_lc.show()
                else:
                    # create new subwindow
                    self.wcdma_data_lc = QMdiSubWindow(self.mdi)
                    linechartWidget = Ui_WCDMA_Data_LCwidget(
                        self, windowName, azenqosDatabase
                    )
                    self.wcdma_data_lc.setWidget(linechartWidget)
                    self.mdi.addSubWindow(self.wcdma_data_lc)
                    self.wcdma_data_lc.show()
                    openedWindows.append(linechartWidget)

            elif child == "GPRS/EDGE Information":
                tableWidget = None
                if hasattr(self, "gprs_info") is True:
                    tableWindow = self.gprs_info.widget()
                    if not tableWindow:
                        tableWidget = TableWindow(self.gprs_info, windowName)
                        openedWindows.append(tableWidget)

                    if self.gprs_info not in subwindowList:
                        self.gprs_info = QMdiSubWindow(self.mdi)
                        self.mdi.addSubWindow(self.gprs_info)

                    if tableWidget:
                        self.gprs_info.setWidget(tableWidget)
                    self.gprs_info.show()
                else:
                    # create new subwindow
                    self.gprs_info = QMdiSubWindow(self.mdi)
                    tableWidget = TableWindow(self.gprs_info, windowName)
                    self.gprs_info.setWidget(tableWidget)
                    self.mdi.addSubWindow(self.gprs_info)
                    self.gprs_info.show()
                    openedWindows.append(tableWidget)

            # elif child == "Web Browser":
            #     if hasattr(self, 'web_browser') is False:
            #         self.gprs_info = TableWindow(self, windowName)
            #     openedWindows.append(self.gprs_info)
            #     #self.mdi.addSubWindow(self.gprs_info)
            #     self.gprs_info.show()
            #     self.gprs_info.activateWindow()

            elif child == "HSDPA/HSPA + Statistics":
                tableWidget = None
                if hasattr(self, "hsdpa_stat") is True:
                    tableWindow = self.hsdpa_stat.widget()
                    if not tableWindow:
                        tableWidget = TableWindow(self.hsdpa_stat, windowName)
                        openedWindows.append(tableWidget)

                    if self.hsdpa_stat not in subwindowList:
                        self.hsdpa_stat = QMdiSubWindow(self.mdi)
                        self.mdi.addSubWindow(self.hsdpa_stat)

                    if tableWidget:
                        self.hsdpa_stat.setWidget(tableWidget)
                    self.hsdpa_stat.show()
                else:
                    # create new subwindow
                    self.hsdpa_stat = QMdiSubWindow(self.mdi)
                    tableWidget = TableWindow(self.hsdpa_stat, windowName)
                    self.hsdpa_stat.setWidget(tableWidget)
                    self.mdi.addSubWindow(self.hsdpa_stat)
                    self.hsdpa_stat.show()
                    openedWindows.append(tableWidget)

            elif child == "HSUPA Statistics":
                tableWidget = None
                if hasattr(self, "hsupa_stat") is True:
                    tableWindow = self.hsupa_stat.widget()
                    if not tableWindow:
                        tableWidget = TableWindow(self.hsupa_stat, windowName)
                        openedWindows.append(tableWidget)

                    if self.hsupa_stat not in subwindowList:
                        self.hsupa_stat = QMdiSubWindow(self.mdi)
                        self.mdi.addSubWindow(self.hsupa_stat)

                    if tableWidget:
                        self.hsupa_stat.setWidget(tableWidget)
                    self.hsupa_stat.show()
                else:
                    # create new subwindow
                    self.hsupa_stat = QMdiSubWindow(self.mdi)
                    tableWidget = TableWindow(self.hsupa_stat, windowName)
                    self.hsupa_stat.setWidget(tableWidget)
                    self.mdi.addSubWindow(self.hsupa_stat)
                    self.hsupa_stat.show()
                    openedWindows.append(tableWidget)

            elif child == "LTE Data Statistics":
                tableWidget = None
                if hasattr(self, "lte_data_stat") is True:
                    tableWindow = self.lte_data_stat.widget()
                    if not tableWindow:
                        tableWidget = TableWindow(self.lte_data_stat, windowName)
                        openedWindows.append(tableWidget)

                    if self.lte_data_stat not in subwindowList:
                        self.lte_data_stat = QMdiSubWindow(self.mdi)
                        self.mdi.addSubWindow(self.lte_data_stat)

                    if tableWidget:
                        self.lte_data_stat.setWidget(tableWidget)
                    self.lte_data_stat.show()
                else:
                    # create new subwindow
                    self.lte_data_stat = QMdiSubWindow(self.mdi)
                    tableWidget = TableWindow(self.lte_data_stat, windowName)
                    self.lte_data_stat.setWidget(tableWidget)
                    self.mdi.addSubWindow(self.lte_data_stat)
                    self.lte_data_stat.show()
                    openedWindows.append(tableWidget)

            elif child == "LTE Data Line Chart":
                # if hasattr(self, 'lte_data_lc') is False:
                #     self.lte_data_lc = Ui_LTE_Data_LCwidget(self, windowName, azenqosDatabase)
                # openedWindows.append(self.lte_data_lc)
                # #self.mdi.addSubWindow(self.lte_data_lc)
                # self.lte_data_lc.show()
                # self.lte_data_lc.activateWindow()
                linechartWidget = None
                if hasattr(self, "lte_data_lc") is True:
                    linechartWindow = self.lte_data_lc.widget()
                    if not linechartWindow:
                        linechartWidget = Ui_LTE_Data_LCwidget(
                            self, windowName, azenqosDatabase
                        )
                        openedWindows.append(linechartWidget)

                    if self.lte_data_lc not in subwindowList:
                        self.lte_data_lc = QMdiSubWindow(self.mdi)
                        self.mdi.addSubWindow(self.lte_data_lc)

                    if linechartWidget:
                        self.lte_data_lc.setWidget(linechartWidget)
                    self.lte_data_lc.show()
                else:
                    # create new subwindow
                    self.lte_data_lc = QMdiSubWindow(self.mdi)
                    linechartWidget = Ui_LTE_Data_LCwidget(
                        self, windowName, azenqosDatabase
                    )
                    self.lte_data_lc.setWidget(linechartWidget)
                    self.mdi.addSubWindow(self.lte_data_lc)
                    self.lte_data_lc.show()
                    openedWindows.append(linechartWidget)

            elif child == "Wifi Connected AP":
                tableWidget = None
                if hasattr(self, "wifi_connected_ap") is True:
                    tableWindow = self.wifi_connected_ap.widget()
                    if not tableWindow:
                        tableWidget = TableWindow(self.wifi_connected_ap, windowName)
                        openedWindows.append(tableWidget)

                    if self.wifi_connected_ap not in subwindowList:
                        self.wifi_connected_ap = QMdiSubWindow(self.mdi)
                        self.mdi.addSubWindow(self.wifi_connected_ap)

                    if tableWidget:
                        self.wifi_connected_ap.setWidget(tableWidget)
                    self.wifi_connected_ap.show()
                else:
                    # create new subwindow
                    self.wifi_connected_ap = QMdiSubWindow(self.mdi)
                    tableWidget = TableWindow(self.wifi_connected_ap, windowName)
                    self.wifi_connected_ap.setWidget(tableWidget)
                    self.mdi.addSubWindow(self.wifi_connected_ap)
                    self.wifi_connected_ap.show()
                    openedWindows.append(tableWidget)

            elif child == "Wifi Scanned APs":
                tableWidget = None
                if hasattr(self, "wifi_scanned_ap") is True:
                    tableWindow = self.wifi_scanned_ap.widget()
                    if not tableWindow:
                        tableWidget = TableWindow(self.wifi_scanned_ap, windowName)
                        openedWindows.append(tableWidget)

                    if self.wifi_scanned_ap not in subwindowList:
                        self.wifi_scanned_ap = QMdiSubWindow(self.mdi)
                        self.mdi.addSubWindow(self.wifi_scanned_ap)

                    if tableWidget:
                        self.wifi_scanned_ap.setWidget(tableWidget)
                    self.wifi_scanned_ap.show()
                else:
                    # create new subwindow
                    self.wifi_scanned_ap = QMdiSubWindow(self.mdi)
                    tableWidget = TableWindow(self.wifi_scanned_ap, windowName)
                    self.wifi_scanned_ap.setWidget(tableWidget)
                    self.mdi.addSubWindow(self.wifi_scanned_ap)
                    self.wifi_scanned_ap.show()
                    openedWindows.append(tableWidget)

            elif child == "Wifi Graph":
                tableWidget = None
                if hasattr(self, "wifi_graph") is True:
                    tableWindow = self.wifi_graph.widget()
                    if not tableWindow:
                        tableWidget = TableWindow(self.wifi_graph, windowName)
                        openedWindows.append(tableWidget)

                    if self.wifi_graph not in subwindowList:
                        self.wifi_graph = QMdiSubWindow(self.mdi)
                        self.mdi.addSubWindow(self.wifi_graph)

                    if tableWidget:
                        self.wifi_graph.setWidget(tableWidget)
                    self.wifi_graph.show()
                else:
                    # create new subwindow
                    self.wifi_graph = QMdiSubWindow(self.mdi)
                    tableWidget = TableWindow(self.wifi_graph, windowName)
                    self.wifi_graph.setWidget(tableWidget)
                    self.mdi.addSubWindow(self.wifi_graph)
                    self.wifi_graph.show()
                    openedWindows.append(tableWidget)

        elif parent == "Signaling":
            if child == "Events":
                events_widget = None
                if hasattr(self, "events_window") is True:
                    tableWindow = self.events_window.widget()
                    if not tableWindow:
                        events_widget = TableWindow(self.events_window, windowName)
                        openedWindows.append(events_widget)

                    if self.events_window not in subwindowList:
                        self.events_window = QMdiSubWindow(self.mdi)
                        self.mdi.addSubWindow(self.events_window)

                    if events_widget:
                        self.events_window.setWidget(events_widget)
                    self.events_window.show()

                else:
                    # create new subwindow
                    self.events_window = QMdiSubWindow(self.mdi)
                    events_widget = TableWindow(self.events_window, windowName)
                    self.events_window.setWidget(events_widget)
                    self.mdi.addSubWindow(self.events_window)
                    self.events_window.show()
                    openedWindows.append(events_widget)

            elif child == "Layer 1 Messages":
                layer_one_widget = None
                if hasattr(self, "layer_one_messages") is True:
                    tableWindow = self.layer_one_messages.widget()
                    if not tableWindow:
                        layer_one_widget = TableWindow(
                            self.layer_one_messages, windowName
                        )
                        openedWindows.append(layer_one_widget)

                    if self.layer_one_messages not in subwindowList:
                        self.layer_one_messages = QMdiSubWindow(self.mdi)
                        self.mdi.addSubWindow(self.layer_one_messages)

                    if layer_one_widget:
                        self.layer_one_messages.setWidget(layer_one_widget)
                    self.layer_one_messages.show()

                else:
                    # create new subwindow
                    self.layer_one_messages = QMdiSubWindow(self.mdi)
                    layer_one_widget = TableWindow(self.layer_one_messages, windowName)
                    self.layer_one_messages.setWidget(layer_one_widget)
                    self.mdi.addSubWindow(self.layer_one_messages)
                    self.layer_one_messages.show()
                    openedWindows.append(layer_one_widget)

                # if hasattr(self, 'layer_one_messages') is False:
                #     # self.layer_one_messages = TableWindow(self, windowName)
                #     self.layer_one_messages = TableWindow(self, windowName)
                # self.mdi.addSubWindow(self.layer_one_messages)
                # openedWindows.append(self.layer_one_messages)
                # self.layer_one_messages.show()
                # self.layer_one_messages.activateWindow()
            elif child == "Layer 3 Messages":
                layer_three_widget = None
                if hasattr(self, "layer_three_messages") is True:
                    tableWindow = self.layer_three_messages.widget()
                    if not tableWindow:
                        layer_three_widget = TableWindow(
                            self.layer_three_messages, windowName
                        )
                        openedWindows.append(layer_three_widget)

                    if self.layer_three_messages not in subwindowList:
                        self.layer_three_messages = QMdiSubWindow(self.mdi)
                        self.mdi.addSubWindow(self.layer_three_messages)

                    if layer_three_widget:
                        self.layer_three_messages.setWidget(layer_three_widget)
                    self.layer_three_messages.show()

                else:
                    # create new subwindow
                    self.layer_three_messages = QMdiSubWindow(self.mdi)
                    layer_three_widget = TableWindow(
                        self.layer_three_messages, windowName
                    )
                    self.layer_three_messages.setWidget(layer_three_widget)
                    self.mdi.addSubWindow(self.layer_three_messages)
                    self.layer_three_messages.show()
                    openedWindows.append(layer_three_widget)

                # if hasattr(self, 'layer_three_messages') is False:
                #     # self.layer_three_messages = TableWindow(self, windowName)
                #     self.layer_three_messages = TableWindow(self.mdi, windowName)
                # openedWindows.append(self.layer_three_messages)
                # self.mdi.addSubWindow(self.layer_three_messages)
                # self.layer_three_messages.show()
                # self.layer_three_messages.activateWindow()
            elif child == "Benchmark":
                benchmark_widget = None
                if hasattr(self, "benchmark") is True:
                    tableWindow = self.benchmark.widget()
                    if not tableWindow:
                        benchmark_widget = TableWindow(self.benchmark, windowName)
                        openedWindows.append(benchmark_widget)

                    if self.benchmark not in subwindowList:
                        self.benchmark = QMdiSubWindow(self.mdi)
                        self.mdi.addSubWindow(self.benchmark)

                    if benchmark_widget:
                        self.benchmark.setWidget(benchmark_widget)

                    self.benchmark.show()

                else:
                    # create new subwindow
                    self.benchmark = QMdiSubWindow(self.mdi)
                    benchmark_widget = TableWindow(self.benchmark, windowName)
                    self.benchmark.setWidget(benchmark_widget)
                    self.mdi.addSubWindow(self.benchmark)
                    self.benchmark.show()
                    openedWindows.append(benchmark_widget)

                # if hasattr(self, 'benchmark') is False:
                #     # self.benchmark = TableWindow(self, windowName)
                #     self.benchmark = TableWindow(self.mdi, windowName)
                # openedWindows.append(self.benchmark)
                # self.mdi.addSubWindow(self.benchmark)
                # self.benchmark.show()
                # self.benchmark.activateWindow()
            elif child == "MM Reg States":
                mm_widget = None
                if hasattr(self, "mm_reg_states") is True:
                    tableWindow = self.mm_reg_states.widget()
                    if not tableWindow:
                        mm_widget = TableWindow(self.mm_reg_states, windowName)
                        openedWindows.append(mm_widget)

                    if self.mm_reg_states not in subwindowList:
                        self.mm_reg_states = QMdiSubWindow(self.mdi)
                        self.mdi.addSubWindow(self.mm_reg_states)

                    if mm_widget:
                        self.mm_reg_states.setWidget(mm_widget)

                    self.mm_reg_states.show()

                else:
                    # create new subwindow
                    self.mm_reg_states = QMdiSubWindow(self.mdi)
                    mm_widget = TableWindow(self.mm_reg_states, windowName)
                    self.mm_reg_states.setWidget(mm_widget)
                    self.mdi.addSubWindow(self.mm_reg_states)
                    self.mm_reg_states.show()
                    openedWindows.append(mm_widget)

                # if hasattr(self, 'mm_reg_states') is False:
                #     # self.mm_reg_states = TableWindow(self, windowName)
                #     self.mm_reg_states = TableWindow(self.mdi, windowName)
                # openedWindows.append(self.mm_reg_states)
                # self.mdi.addSubWindow(self.mm_reg_states)
                # self.mm_reg_states.show()
                # self.mm_reg_states.activateWindow()
            elif child == "Serving System Info":
                serving_system_widget = None
                if hasattr(self, "serving_system_info") is True:
                    tableWindow = self.serving_system_info.widget()
                    if not tableWindow:
                        serving_system_widget = TableWindow(
                            self.serving_system_info, windowName
                        )
                        openedWindows.append(serving_system_widget)

                    if self.serving_system_info not in subwindowList:
                        self.serving_system_info = QMdiSubWindow(self.mdi)
                        self.mdi.addSubWindow(self.serving_system_info)

                    if serving_system_widget:
                        self.serving_system_info.setWidget(serving_system_widget)

                    self.serving_system_info.show()

                else:
                    # create new subwindow
                    self.serving_system_info = QMdiSubWindow(self.mdi)
                    serving_system_widget = TableWindow(
                        self.serving_system_info, windowName
                    )
                    self.serving_system_info.setWidget(serving_system_widget)
                    self.mdi.addSubWindow(self.serving_system_info)
                    self.serving_system_info.show()
                    openedWindows.append(serving_system_widget)

                # if hasattr(self, 'serving_system_info') is False:
                #     # self.serving_system_info = TableWindow(self, windowName)
                #     self.serving_system_info = TableWindow(self.mdi, windowName)
                # openedWindows.append(self.serving_system_info)
                # self.mdi.addSubWindow(self.serving_system_info)
                # self.serving_system_info.show()
                # self.serving_system_info.activateWindow()
            elif child == "Debug Android/Event":
                debug_event_widget = None
                if hasattr(self, "debug_event") is True:
                    tableWindow = self.debug_event.widget()
                    if not tableWindow:
                        debug_event_widget = TableWindow(self.debug_event, windowName)
                        openedWindows.append(debug_event_widget)

                    if self.debug_event not in subwindowList:
                        self.debug_event = QMdiSubWindow(self.mdi)
                        self.mdi.addSubWindow(self.debug_event)
                    if debug_event_widget:
                        self.debug_event.setWidget(debug_event_widget)

                    self.debug_event.show()

                else:
                    # create new subwindow
                    self.debug_event = QMdiSubWindow(self.mdi)
                    debug_event_widget = TableWindow(self.debug_event, windowName)
                    self.debug_event.setWidget(debug_event_widget)
                    self.mdi.addSubWindow(self.debug_event)
                    self.debug_event.show()
                    openedWindows.append(debug_event_widget)

                # if hasattr(self, 'debug_event') is False:
                #     # self.debug_event = TableWindow(self, windowName)
                #     self.debug_event = TableWindow(self.mdi, windowName)
                # openedWindows.append(self.debug_event)
                # self.mdi.addSubWindow(self.debug_event)
                # self.debug_event.show()
                # self.debug_event.activateWindow()
        # if parent == ''
        # elif parent == "Positioning":
        #     if child == "GPS":
        #         print("1")
        #     elif child == "Map":
        #         print("2")
        #     elif child == "Positioning":
        #         print("3")
        # elif parent == "Customized Window":
        #     if child == "Status Window":
        #         print("1")
        #     elif child == "Message Window":
        #         print("2")
        #     elif child == "Line Chart":
        #         print("3")
        # elif parent == "NB-IoT":
        #     if child == "NB-IoT Radio Parameters Window":
        #         print("1")
        if self.mdi:
            self.mdi.show()

    def selectConfiguration(self):
        getSelected = self.configurationTreeWidget.selectedItems()
        if getSelected:
            baseNode = getSelected[0]
            if baseNode.text(0) is not None:
                getChildNode = baseNode.text(0)
                if getChildNode == "Cell Information":
                    self.cell_information = CellInformation(self)
                    self.cell_information.show()
                elif getChildNode == "Equipment Configuration":
                    pass

    def closeEvents(self):
        self.pauseTime()
        self.timeSliderThread.exit()
        self.close()
        self.databaseUi.destroy(True, True)
        self.destroy(True, True)

    def reject(self):
        super().reject()
        # QgsMessageLog.logMessage('Close App')
        clearAllSelectedFeatures()
        QgsProject.removeAllMapLayers(QgsProject.instance())
        removeAzenqosGroup()
        for mdiwindow in self.mdi.subWindowList():
            mdiwindow.close()
        self.mdi.close()

        # if len(openedWindows) > 0:
        #     for window in openedWindows:
        #         window.close()
        #         window.reject()
        #         del window

        # del self.databaseUi
        # del self


class GroupArea(QMdiArea):
    def __init__(self):
        super().__init__()

    def closeEvent(self, QCloseEvent):
        self.closeAllSubWindows()


class TimeSlider(QSlider):
    def __init__(self, parent=None):
        super().__init__(parent)

        # Set integer max and min on parent. These stay constant.
        # self._min_int = minTimeValue
        super().setMinimum(0)
        self._max_int = sliderLength / slowDownValue
        super().setMaximum(self._max_int)
        # The "actual" min and max values seen by user.
        self._min_value = 0.0
        self._max_value = maxTimeValue - minTimeValue

    @property
    def _value_range(self):
        return self._max_value - self._min_value

    def value(self):
        thisValue = float(super().value())
        value = thisValue / self._max_int * self._value_range
        return value

    def setValue(self, value):
        resultValue = int(value / self._value_range * self._max_int)
        super().setValue(resultValue)
        # super().repaint()

    def setMinimum(self, value):
        self.setRange(value, self._max_value)

    def setMaximum(self, value):
        self.setRange(self._min_value, value)

    def setRange(self, minimum, maximum):
        old_value = self.value()
        self._min_value = minimum
        self._max_value = maximum
        self.setValue(old_value)  # Put slider in correct position

    def proportion(self):
        return (self.value() - self._min_value) / self._value_range

    def initMaxInt(self):
        old_value = self.value()
        self._max_int = sliderLength / slowDownValue
        super().setMaximum(self._max_int)
        self.setValue(old_value)  # Put slider in correct position


class TableWindow(QWidget):
    def __init__(self, parent, windowName):
        super().__init__(parent)
        self.title = windowName
        self.tablename = ""
        self.tableHeader = None
        self.left = 10
        self.top = 10
        self.width = 640
        self.height = 480
        self.dataList = []
        self.currentRow = 0
        self.dateString = ""
        self.tableViewCount = 0
        self.parentWindow = parent
        self.setupUi()

    def setupUi(self):
        self.setObjectName(self.title)
        self.setWindowTitle(self.title)
        self.setAttribute(Qt.WA_DeleteOnClose)
        self.tableView = QTableView(self)
        self.tableView.horizontalHeader().setSortIndicator(-1, Qt.AscendingOrder)
        self.tableView.doubleClicked.connect(self.showDetail)
        self.specifyTablesHeader()
        layout = QVBoxLayout(self)
        layout.addWidget(self.tableView)
        # self.setFixedWidth(layout.sizeHint())
        self.setLayout(layout)
        self.show()

    def setTableModel(self, dataList):
        self.tableModel = TableModel(dataList, self.tableHeader, self)
        self.proxyModel = QtCore.QSortFilterProxyModel()
        self.proxyModel.setSourceModel(self.tableModel)
        self.tableView.setModel(self.proxyModel)
        self.tableView.setSortingEnabled(True)
        self.tableView.resizeColumnsToContents()

    def specifyTablesHeader(self):
        if self.title is not None:
            # WCDMA
            if self.title == "WCDMA_Active + Monitored Sets":
                self.tableHeader = [
                    "Time",
                    "CellName",
                    "CellType",
                    "SC",
                    "Ec/Io",
                    "RSCP",
                    "Freq",
                    "Event",
                ]
                self.dataList = WcdmaDataQuery(
                    azenqosDatabase, currentDateTimeString
                ).getActiveMonitoredSets()
            elif self.title == "WCDMA_Radio Parameters":
                self.tableHeader = ["Element", "Value"]
                self.dataList = WcdmaDataQuery(
                    azenqosDatabase, currentDateTimeString
                ).getRadioParameters()
            elif self.title == "WCDMA_Active Set List":
                self.tableHeader = [
                    "Time",
                    "Freq",
                    "PSC",
                    "Cell Position",
                    "Cell TPC",
                    "Diversity",
                ]
                self.dataList = WcdmaDataQuery(
                    azenqosDatabase, currentDateTimeString
                ).getActiveSetList()
            elif self.title == "WCDMA_Monitored Set List":
                self.tableHeader = ["Time", "Freq", "PSC", "Cell Position", "Diversity"]
                self.dataList = WcdmaDataQuery(
                    azenqosDatabase, currentDateTimeString
                ).getMonitoredSetList()
            elif self.title == "WCDMA_BLER Summary":
                self.tableHeader = ["Element", "Value"]
                self.dataList = WcdmaDataQuery(
                    azenqosDatabase, currentDateTimeString
                ).getBlerSummary()
            elif self.title == "WCDMA_BLER / Transport Channel":
                self.tableHeader = ["Transport Channel", "Percent", "Err", "Rcvd"]
                self.dataList = WcdmaDataQuery(
                    azenqosDatabase, currentDateTimeString
                ).getBLER_TransportChannel()
            elif self.title == "WCDMA_Line Chart":
                self.tableHeader = ["Element", "Value", "MS", "Color"]
            elif self.title == "WCDMA_Bearers":
                self.tableHeader = [
                    "N Bearers",
                    "Bearers ID",
                    "Bearers Rate DL",
                    "Bearers Rate UL",
                ]
                self.dataList = WcdmaDataQuery(
                    azenqosDatabase, currentDateTimeString
                ).getBearers()
            elif self.title == "WCDMA_Pilot Poluting Cells":
                self.tableHeader = ["Time", "N Cells", "SC", "RSCP", "Ec/Io"]
                self.dataList = WcdmaDataQuery(
                    azenqosDatabase, currentDateTimeString
                ).getPilotPolutingCells()
            elif self.title == "WCDMA_Active + Monitored Bar":
                self.tableHeader = ["Cell Type", "Ec/Io", "RSCP"]
                self.dataList = WcdmaDataQuery(
                    azenqosDatabase, currentDateTimeString
                ).getActiveMonitoredBar()
            elif self.title == "WCDMA_CM GSM Reports":
                self.tableHeader = ["Time", "", "Eq.", "Name", "Info."]

            elif self.title == "WCDMA_CM GSM Cells":
                self.tableHeader = ["Time", "ARFCN", "RxLev", "BSIC", "Measure"]
                self.dataList = WcdmaDataQuery(
                    azenqosDatabase, currentDateTimeString
                ).getCmGsmCells()
            elif self.title == "WCDMA_Pilot Analyzer":
                self.tableHeader = ["Element", "Value", "Cell Type", "Color"]

            # LTE
            elif self.title == "LTE_Radio Parameters":
                self.tableHeader = ["Element", "PCC", "SCC0", "SCC1"]
                self.dataList = LteDataQuery(
                    azenqosDatabase, currentDateTimeString
                ).getRadioParameters()
            elif self.title == "LTE_Serving + Neighbors":
                self.tableHeader = ["Time", "EARFCN", "Band", "PCI", "RSRP", "RSRQ"]
                self.dataList = LteDataQuery(
                    azenqosDatabase, currentDateTimeString
                ).getServingAndNeighbors()
            elif self.title == "LTE_PUCCH/PDSCH Parameters":
                self.tableHeader = ["Element", "Value"]
                self.dataList = LteDataQuery(
                    azenqosDatabase, currentDateTimeString
                ).getPucchPdschParameters()
            elif self.title == "LTE_LTE Line Chart":
                self.tableHeader = ["Element", "Value", "MS", "Color"]
            elif self.title == "LTE_LTE RLC":
                self.tableHeader = ["Element", "Value", "", "", ""]
                self.dataList = LteDataQuery(
                    azenqosDatabase, currentDateTimeString
                ).getRlc()
            elif self.title == "LTE_LTE VoLTE":
                self.tableHeader = ["Element", "Value"]
                self.dataList = LteDataQuery(
                    azenqosDatabase, currentDateTimeString
                ).getVolte()

            # CDMA/EVDO
            elif self.title == "CDMA/EVDO_Radio Parameters":
                self.tableHeader = ["Element", "Value"]
                self.dataList = CdmaEvdoQuery(
                    azenqosDatabase, currentDateTimeString
                ).getRadioParameters()
            elif self.title == "CDMA/EVDO_Serving + Neighbors":
                self.tableHeader = ["Time", "PN", "Ec/Io", "Type"]
                self.dataList = CdmaEvdoQuery(
                    azenqosDatabase, currentDateTimeString
                ).getServingAndNeighbors()
            elif self.title == "CDMA/EVDO_EVDO Parameters":
                self.tableHeader = ["Element", "Value"]
                self.dataList = CdmaEvdoQuery(
                    azenqosDatabase, currentDateTimeString
                ).getEvdoParameters()

            # Data
            elif self.title == "Data_GSM Data Line Chart":
                self.tableHeader = ["Element", "Value", "MS", "Color"]
            elif self.title == "Data_WCDMA Data Line Chart":
                self.tableHeader = ["Element", "Value", "MS", "Color"]
            elif self.title == "Data_GPRS/EDGE Information":
                self.tableHeader = ["Element", "Value"]
            elif self.title == "Data_Web Browser":
                self.tableHeader = ["Type", "Object"]
                self.windowHeader = ["ID", "URL", "Type", "State", "Size(%)"]
            elif self.title == "Data_HSDPA/HSPA + Statistics":
                self.tableHeader = ["Element", "Value"]
            elif self.title == "Data_HSUPA Statistics":
                self.tableHeader = ["Element", "Value"]
            elif self.title == "Data_LTE Data Statistics":
                self.tableHeader = ["Element", "Value", "", ""]
            elif self.title == "Data_LTE Data Line Chart":
                self.tableHeader = ["Element", "Value", "MS", "Color"]
            elif self.title == "Data_Wifi Connected AP":
                self.tableHeader = ["Element", "Value"]
            elif self.title == "Data_Wifi Scanned APs":
                self.tableHeader = [
                    "Time",
                    "BSSID",
                    "SSID",
                    "Freq",
                    "Ch.",
                    "Level",
                    "Encryption",
                ]
            elif self.title == "Data_Wifi Graph":
                return False

            # Signaling
            elif self.title == "Signaling_Events":
                self.tableHeader = ["Time", "", "Eq.", "Name", "Info."]
                self.tablename = "events"
                self.dataList = SignalingDataQuery(
                    azenqosDatabase, currentDateTimeString
                ).getEvents()

            elif self.title == "Signaling_Layer 1 Messages":
                self.tableHeader = ["Time", "", "Eq.", "Name", "Info."]
                self.tablename = "events"
                self.dataList = SignalingDataQuery(
                    azenqosDatabase, currentDateTimeString
                ).getLayerOneMessages()
            elif self.title == "Signaling_Layer 3 Messages":
                self.tableHeader = ["Time", "", "Eq.", "", "Name", "Info."]
                self.tablename = "signalling"
                self.dataList = SignalingDataQuery(
                    azenqosDatabase, currentDateTimeString
                ).getLayerThreeMessages()
            elif self.title == "Signaling_Benchmark":
                self.tableHeader = ["", "MS1", "MS2", "MS3", "MS4"]
                # self.tablename = 'signalling'
                self.dataList = SignalingDataQuery(
                    azenqosDatabase, currentDateTimeString
                ).getBenchmark()
            elif self.title == "Signaling_MM Reg States":
                self.tableHeader = ["Element", "Value"]
                self.tablename = "mm_state"
                self.dataList = SignalingDataQuery(
                    azenqosDatabase, currentDateTimeString
                ).getMmRegStates()
            elif self.title == "Signaling_Serving System Info":
                self.tableHeader = ["Element", "Value"]
                self.tablename = "serving_system"
                self.dataList = SignalingDataQuery(
                    azenqosDatabase, currentDateTimeString
                ).getServingSystemInfo()
            elif self.title == "Signaling_Debug Android/Event":
                self.tableHeader = ["Element", "Value"]
                # self.tablename = 'serving_system'
                self.dataList = SignalingDataQuery(
                    azenqosDatabase, currentDateTimeString
                ).getDebugAndroidEvent()

            if self.dataList is not None:
                self.setTableModel(self.dataList)
                self.tableViewCount = self.tableView.model().rowCount()

            if self.tablename and self.tablename != "":
                global tableList
                if not self.tablename in tableList:
                    tableList.append(self.tablename)

    def hilightRow(self, sampledate):
        # QgsMessageLog.logMessage('[-- Start hilight row --]', tag="Processing")
        # start_time = time.time()
        self.dateString = str(sampledate)
        # self.findCurrentRow()
        if not self.dataList or self.title not in [
            "Signaling_Events",
            "Signaling_Layer 1 Messages",
            "Signaling_Layer 3 Messages",
        ]:
            worker = Worker(self.specifyTablesHeader())
            threadpool.start(worker)
            # self.specifyTablesHeader()
        else:
            self.findCurrentRow()
            # self.findCurrentRow()
        # elapse_time = time.time() - start_time
        # del worker
        # QgsMessageLog.logMessage('Hilight rows elapse time: {0} s.'.format(str(elapse_time)), tag="Processing")
        # QgsMessageLog.logMessage('[-- End hilight row --]', tag="Processing")

    def showDetail(self, item):
        parentWindow = self.parentWindow.parentWidget()
        cellContent = str(item.data())
        self.detailWidget = DetailWidget(parentWindow, cellContent)

    def findCurrentRow(self):
        startRange = 0

        if self.currentRow and isSliderPlay == True:
            startRange = self.currentRow

        for row in range(startRange, self.tableViewCount):
            index = self.tableView.model().index(row, 0)
            value = self.tableView.model().data(index)
            if value and index:
                if value >= self.dateString:
                    if isSliderPlay == True:
                        self.tableView.selectRow(self.currentRow)
                    else:
                        self.tableView.selectRow(row - 1)
                    self.currentRow = row - 1
                    break

    def closeEvent(self, QCloseEvent):
        global openedWindows
        global tableList
        if self in openedWindows:
            openedWindows.remove(self)
        if self.tablename and self.tablename in tableList:
            tableList.remove(self.tablename)
        self.close()
        del self


class DetailWidget(QDialog):
    def __init__(self, parent, detailText):
        super().__init__(None)
        self.title = "Detail"
        self.detailText = detailText
        self.left = 10
        self.top = 10
        self.width = 640
        self.height = 480
        self.setupUi()

    def setupUi(self):
        self.setObjectName(self.title)
        self.setWindowTitle(self.title)
        self.setAttribute(Qt.WA_DeleteOnClose)
        self.textEdit = QTextEdit(self.detailText)
        self.textEdit.setReadOnly(True)
        layout = QVBoxLayout(self)
        layout.addWidget(self.textEdit)
        self.setLayout(layout)
        self.show()
        self.raise_()
        self.activateWindow()


class TableModel(QAbstractTableModel):
    def __init__(self, inputData, header, parent=None, *args):
        QAbstractTableModel.__init__(self, parent, *args)
        self.headerLabels = header
        self.dataSource = inputData
        # self.testColumnValue()

    def rowCount(self, parent):
        rows = 0
        if self.dataSource:
            rows = len(self.dataSource)
        return rows

    def columnCount(self, parent):
        columns = 0
        if self.headerLabels:
            columns = len(self.headerLabels)
        return columns

    def data(self, index, role):
        if not index.isValid():
            return QVariant()
        elif role != Qt.DisplayRole:
            return QVariant()
        return QVariant(self.dataSource[index.row()][index.column()])

    def headerData(self, section, orientation, role=Qt.DisplayRole):
        if role == Qt.DisplayRole and orientation == Qt.Horizontal:
            return self.headerLabels[section]
        return QAbstractTableModel.headerData(self, section, orientation, role)


class TimeSliderThread(QThread):
    changeValue = pyqtSignal(float)

    def __init__(self):
        QThread.__init__(self)
        self.currentSliderValue = None

    def __del__(self):
        self.wait()

    def run(self):
        self.playTime()

    def playTime(self):
        ptvsd.debug_this_thread()
        timeSlider.setDisabled(True)
        global isSliderPlay, fastForwardValue, slowDownValue
        sleeptime = 1 / fastForwardValue
        # isSliderPlay = True
        if isSliderPlay:
            if self.currentSliderValue:
                for x in np.arange(
                    int(self.currentSliderValue), int(sliderLength), (1 * slowDownValue)
                ):
                    if not isSliderPlay:
                        break
                    else:
                        time.sleep(sleeptime)
                        value = timeSlider.value() + (1 * slowDownValue)
                        self.changeValue.emit(value)

                    if x >= int(sliderLength):
                        isSliderPlay = False
                        break
            else:
                for x in np.arange(0, int(sliderLength), (1 * slowDownValue)):
                    if not isSliderPlay:
                        break
                    else:
                        time.sleep(sleeptime)
                        value = timeSlider.value() + (1 * slowDownValue)
                        self.changeValue.emit(value)

                    if x >= int(sliderLength):
                        isSliderPlay = False
                        break
        else:
            self.quit()

    def set(self, value):
        self.currentSliderValue = value


class LayerTask(QgsTask):
    def __init__(self, desc, uri):
        QgsTask.__init__(self, desc)
        self.uri = uri
        self.start_time = None
        self.desc = desc
        self.exception = None

    def addMapToQgis(self):
        # urlWithParams = 'type=xyz&url=http://a.tile.openstreetmap.org/%7Bz%7D/%7Bx%7D/%7By%7D.png&zmax=19&zmin=0&crs=EPSG3857'
        urlWithParams = "contextualWMSLegend=0&crs=EPSG:4326&dpiMode=7&featureCount=10&format=image/tiff&layers=longdo_icons&styles&url=http://ms.longdo.com/mapproxy/service"
        rlayer = QgsRasterLayer(urlWithParams, "Street map", "wms")
        if rlayer.isValid():
            QgsProject.instance().addMapLayer(rlayer)
            # self.azqGroup.addLayer(rlayer)
        else:
            QgsMessageLog.logMessage("Invalid layer")

    def run(self):
        QgsMessageLog.logMessage("[-- Start add layers --]", tag="Processing")
        self.start_time = time.time()
        global allLayers
        global vLayers
        allLayers.sort(reverse=True)
        for tableName in allLayers:
            self.uri.setDataSource("", tableName, "geom")
            vlayer = QgsVectorLayer(self.uri.uri(), tableName, "spatialite")
            if vlayer:
                symbol_renderer = vlayer.renderer()
                if symbol_renderer:
                    symbol = symbol_renderer.symbol()
                    symbol.setColor(QColor(125, 139, 142))
                    symbol.symbolLayer(0).setStrokeColor(QColor(0, 0, 0))
                    symbol.setSize(2.4)
                iface.layerTreeView().refreshLayerSymbology(vlayer.id())
                vlayer.triggerRepaint()
                vLayers.append(vlayer)
        return True

    def finished(self, result):
        if result:
            self.addMapToQgis()
            for vlayer in vLayers:
                QgsProject.instance().addMapLayer(vlayer)
            elapsed_time = time.time() - self.start_time
            QgsMessageLog.logMessage(
                "Elapsed time: " + str(elapsed_time) + " s.", tag="Processing"
            )
            QgsMessageLog.logMessage("[-- End add layers --]", tag="Processing")
        else:
            if self.exception is None:
                QgsMessageLog.logMessage(
                    'Task "{name}" not successful but without '
                    "exception (probably the task was manually "
                    "canceled by the user)".format(name=self.desc),
                    tag="Exception",
                )
            else:
                QgsMessageLog.logMessage(
                    'Task "{name}" Exception: {exception}'.format(name=self.desc),
                    exception=self.exception,
                    tag="Exception",
                )
                raise self.exception


# @todo: Will assign layer group later
# class LayerTask(QgsTask):
#     def __init__(self, desc, uri):
#         QgsTask.__init__(self, desc)
#         self.uri = uri
#         self.vlayers = []
#         self.start_time = None
#         self.desc = desc
#         self.exception = None
#         self.layerGroups = []
#         self.azqGroup = None

#     def initLayerGroup(self):
#         removeAzenqosGroup()
#         root = QgsProject.instance().layerTreeRoot()
#         self.azqGroup = QgsLayerTreeGroup("Azenqos")
#         root.addChildNode(self.azqGroup)
#         # groups = ["gsm", "wcdma", "lte", "cdma", "data", "signaling"]
#         # for groupname in groups:
#         #     self.azqGroup.addGroup(groupname)
#         #     self.layerGroups.append({"name": groupname})

#     def addMapToQgis(self):
#         # urlWithParams = 'type=xyz&url=http://a.tile.openstreetmap.org/%7Bz%7D/%7Bx%7D/%7By%7D.png&zmax=19&zmin=0&crs=EPSG3857'
#         urlWithParams = "contextualWMSLegend=0&crs=EPSG:4326&dpiMode=7&featureCount=10&format=image/tiff&layers=longdo_icons&styles&url=http://ms.longdo.com/mapproxy/service"
#         rlayer = QgsRasterLayer(urlWithParams, "Street map", "wms")
#         if rlayer.isValid():
#             QgsProject.instance().addMapLayer(rlayer, False)
#             # self.azqGroup.addLayer(rlayer)
#         else:
#             QgsMessageLog.logMessage("Invalid layer")

#     def classifyLayerToGroup(self):
#         for vlayer in self.vlayers:
#             # for group in self.layerGroups:
#             vlayerName = vlayer.name()
#             if vlayerName.startswith("gsm"):
#                 self.addLayerToGroup("gsm", vlayer)
#             elif vlayerName.startswith("wcdma"):
#                 self.addLayerToGroup("wcdma", vlayer)
#             elif vlayerName.startswith("lte"):
#                 self.addLayerToGroup("lte", vlayer)
#             elif vlayerName.startswith("cdma"):
#                 self.addLayerToGroup("cdma", vlayer)
#             elif vlayerName.startswith("data"):
#                 self.addLayerToGroup("data", vlayer)
#             else:
#                 self.addLayerToGroup("signaling", vlayer)

#     def addLayerToGroup(self, groupname, layer):
#         self.checkIsGroupExist(groupname)
#         nodeGroup = self.azqGroup.findGroup(groupname)
#         nodeGroup.addLayer(layer)

#     def checkIsGroupExist(self, groupname):
#         nodeGroup = self.azqGroup.findGroup(groupname)
#         if not nodeGroup:
#             self.azqGroup.addGroup(groupname)

#     def run(self):
#         QgsMessageLog.logMessage("[-- Start add layers --]", tag="Processing")
#         self.start_time = time.time()
#         # self.getLayersFromDb()
#         for tableName in allLayers:
#             self.uri.setDataSource("", tableName, "geom")
#             vlayer = QgsVectorLayer(self.uri.uri(), tableName, "spatialite")
#             if vlayer:
#                 symbol_renderer = vlayer.renderer()
#                 if symbol_renderer:
#                     symbol = symbol_renderer.symbol()
#                     symbol.setColor(QColor(125, 139, 142))
#                     symbol.symbolLayer(0).setStrokeColor(QColor(0, 0, 0))
#                     symbol.setSize(2.4)
#                 iface.layerTreeView().refreshLayerSymbology(vlayer.id())
#                 vlayer.triggerRepaint()
#                 self.vlayers.append(vlayer)
#         return True

#     def finished(self, result):
#         if result:
#             self.initLayerGroup()
#             self.classifyLayerToGroup()
#             self.addMapToQgis()
#             iface.mapCanvas().setSelectionColor(QColor("red"))
#             elapsed_time = time.time() - self.start_time
#             QgsMessageLog.logMessage(
#                 "Elapsed time: " + str(elapsed_time) + " s.", tag="Processing"
#             )
#             QgsMessageLog.logMessage("[-- End add layers --]", tag="Processing")
#         else:
#             if self.exception is None:
#                 QgsMessageLog.logMessage(
#                     'Task "{name}" not successful but without '
#                     "exception (probably the task was manually "
#                     "canceled by the user)".format(name=self.desc),
#                     tag="Exception",
#                 )
#             else:
#                 QgsMessageLog.logMessage(
#                     'Task "{name}" Exception: {exception}'.format(name=self.desc),
#                     exception=self.exception,
#                     tag="Exception",
#                 )
#                 raise self.exception
