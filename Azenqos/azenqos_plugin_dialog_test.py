# -*- coding: utf-8 -*-
"""
/***************************************************************************
 AzenqosDialog
                                 A QGIS plugin
 Azenqos Plugin
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2019-03-18
        git sha              : $Format:%H$
        copyright            : (C) 2019 by Metamedia Techonology Co.,Ltd
        email                : gritmanoch@longdo.com
 ***************************************************************************/

/***************************************************************************
 *                                                                        *
 *  This program is free software; you can redistribute it and/or modify  *
 *  it under the terms of the GNU General Public License as published by  *
 *  the Free Software Foundation; either version 2 of the License, or     *
 *  (at your option) any later version.                                   *
 *                                                                        *
 ***************************************************************************/
"""
import datetime, os, threading, time, zipfile, traceback, sys

import pyqtgraph as pg

from PyQt5.QtWidgets import *
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import * #QAbstractTableModel, QVariant, Qt, pyqtSignal, QThread
from PyQt5.QtSql import * #QSqlQuery, QSqlDatabase
from PyQt5.QtWidgets import *
from PyQt5.QtGui import QColor

from linechart import *

from cdma_evdo_query import CdmaEvdoQuery
from lte_query import LteDataQuery
from signalling_query import SignalingDataQuery
from wcdma_query import WcdmaDataQuery

azenqosDatabase = None
minTimeValue = None
maxTimeValue = None
currentTimestamp = None
currentDateTimeString = None
recentDateTimeString = ''
clickedLatLon = {"lat": 0, "lon": 0}
sliderLength = 0
openedWindows = []
timeSlider = None
isSliderPlay = False
allLayers = []
tableList = []
linechartWindowname = [
            'WCDMA_Line Chart', 'LTE_LTE Line Chart',
            'Data_WCDMA Data Line Chart', 'Data_LTE Data Line Chart','WCDMA_Pilot Analyzer'
        ]
threadpool = QThreadPool()

def validateDateTime(date_string):
    date_format = "%Y-%m-%d %H:%M:%S.%f"
    try:
        date_obj = datetime.datetime.strptime(date_string, date_format)
        return True
    except ValueError:
        return False

# def clearAllSelectedFeatures():
#     mc = iface.mapCanvas()

#     for layer in mc.layers():
#         if layer.type() == layer.VectorLayer:
#             layer.removeSelection()

#     mc.refresh()
#     QgsMessageLog.logMessage('[-- Clear selected features --]')

class WorkerSignals(QObject):
    '''
    Defines the signals available from a running worker thread.

    Supported signals are:

    finished:
        No data
    error:
        `tuple` (exctype, value, traceback.format_exc() )
    result:
        `object` data returned from processing, anything

    '''
    finished = pyqtSignal()
    error = pyqtSignal(tuple)
    result = pyqtSignal(object)

class Worker(QRunnable):
    '''
    Worker thread

    Inherits from QRunnable to handler worker thread setup, signals and wrap-up.

    :param callback: The function callback to run on this worker thread. Supplied args and
                     kwargs will be passed through to the runner.
    :type callback: function
    :param args: Arguments to pass to the callback function
    :param kwargs: Keywords to pass to the callback function

    '''

    def __init__(self, fn, *args, **kwargs):
        super(Worker, self).__init__()
        # Store constructor arguments (re-used for processing)
        self.fn = fn
        self.args = args
        self.kwargs = kwargs
        self.signals = WorkerSignals()

    @pyqtSlot()
    def run(self):
        '''
        Initialise the runner function with passed args, kwargs.
        '''

        # Retrieve args/kwargs here; and fire processing using them
        try:
            result = self.fn(*self.args, **self.kwargs)
        except:
            traceback.print_exc()
            exctype, value = sys.exc_info()[:2]
            self.signals.error.emit((exctype, value, traceback.format_exc()))
        else:
            self.signals.result.emit(result)  # Return the result of the processing
        finally:
            self.signals.finished.emit()  # Done

# Database select window
class Ui_DatabaseDialog(QDialog):
    def __init__(self):
        super(Ui_DatabaseDialog, self).__init__()
        self.setupUi(self)

    def setupUi(self, DatabaseDialog):
        DatabaseDialog.setObjectName("DatabaseDialog")
        DatabaseDialog.setWindowModality(QtCore.Qt.ApplicationModal)
        DatabaseDialog.resize(540, 90)
        DatabaseDialog.setMaximumSize(QtCore.QSize(540, 90))
        self.browseButton = QtWidgets.QPushButton(DatabaseDialog)
        self.browseButton.setGeometry(QtCore.QRect(420, 25, 113, 31))
        self.browseButton.setObjectName("browseButton")
        self.dbPath = QtWidgets.QLineEdit(DatabaseDialog)
        self.dbPath.setGeometry(QtCore.QRect(10, 30, 400, 21))
        self.dbPath.setObjectName("dbPath")
        self.buttonBox = QtWidgets.QDialogButtonBox(DatabaseDialog)
        self.buttonBox.setGeometry(QtCore.QRect(370, 56, 164, 32))
        self.buttonBox.setStandardButtons(QtWidgets.QDialogButtonBox.Ok
                                          | QtWidgets.QDialogButtonBox.Cancel)
        self.buttonBox.setObjectName("buttonBox")
        self.dbPathLabel = QtWidgets.QLabel(DatabaseDialog)
        self.dbPathLabel.setGeometry(QtCore.QRect(10, 10, 181, 16))
        self.dbPathLabel.setObjectName("dbPathLabel")

        self.retranslateUi(DatabaseDialog)
        QtCore.QMetaObject.connectSlotsByName(DatabaseDialog)

        self.browseButton.clicked.connect(self.getfiles)
        self.buttonBox.button(QtWidgets.QDialogButtonBox.Ok).clicked.connect(
            self.checkDatabase)
        self.buttonBox.button(
            QtWidgets.QDialogButtonBox.Cancel).clicked.connect(self.close)

    def retranslateUi(self, DatabaseDialog):
        _translate = QtCore.QCoreApplication.translate
        DatabaseDialog.setWindowTitle(_translate("DatabaseDialog", "Azenqos"))
        self.browseButton.setText(_translate("DatabaseDialog", "Browse.."))
        self.dbPathLabel.setText(
            _translate("DatabaseDialog", "Database path: ( .db, .sqlite )"))

    def getfiles(self):
        fileName, _ = QFileDialog.getOpenFileName(self, 'Single File',
                                                  QtCore.QDir.rootPath(),
                                                  '*.db *.sqlite')
        if fileName != "":
            archive = zipfile.ZipFile
            baseFileName = os.path.basename(str(fileName))
            self.dbPath.setText(fileName)
            self.databasePath = fileName
        else:
            if self.dbPath.text() != "":
                self.databasePath = self.dbPath.text()

    def checkDatabase(self):
        self.addDatabase()
        if not azenqosDatabase.open():
            QtWidgets.QMessageBox.critical(
                None, "Cannot open database",
                "Unable to establish a database connection.\n"
                "This example needs SQLite support. Please read "
                "the Qt SQL driver documentation for information how "
                "to build it.\n\n"
                "Click Cancel to exit.", QtWidgets.QMessageBox.Cancel)
            return False
        else:
            # self.uri = QgsDataSourceUri()
            # self.uri.setDatabase(self.databasePath)
            self.addLayerToQgis()
            # self.layerTask = LayerTask(u'Waste cpu 1', self.uri)
            # QgsApplication.taskManager().addTask(self.layerTask)
            self.getTimeForSlider()
            self.hide()
            self.azenqosMainMenu = AzenqosDialog(self)
            self.azenqosMainMenu.show()
            self.azenqosMainMenu.raise_()
            self.azenqosMainMenu.activateWindow()

    def addLayerToQgis(self):
        global allLayers
        # start_time = time.time()
        # QgsProject.removeAllMapLayers(QgsProject.instance())
        # urlWithParams = 'type=xyz&url=http://a.tile.openstreetmap.org/%7Bz%7D/%7Bx%7D/%7By%7D.png&zmax=19&zmin=0&crs=EPSG3857'
        # # urlWithParams = 'contextualWMSLegend=0&crs=EPSG:4326&dpiMode=7&featureCount=10&format=image/tiff&layers=longdo_icons&styles&url=http://ms.longdo.com/mapproxy/service'
        # rlayer = QgsRasterLayer(urlWithParams, 'Street map', 'wms')
        # if rlayer.isValid():
        #     QgsProject.instance().addMapLayer(rlayer)
        # else:
        #     print('invalid layer')
        azenqosDatabase.open()
        query = QSqlQuery()
        queryString = "SELECT table_name FROM layer_statistics"
        # queryString = "SELECT name FROM sqlite_master WHERE TYPE='table'"
        query.exec_(queryString)
        while query.next():
            tableName = query.value(0)
            allLayers.append(tableName)
        azenqosDatabase.close()

    def getTimeForSlider(self):
        global minTimeValue
        global maxTimeValue
        global currentDateTimeString
        dataList = []
        azenqosDatabase.open()
        for layerName in allLayers:
            subQuery = QSqlQuery()
            queryString = "SELECT MIN(time), MAX(time) FROM %s" % (
                layerName)
            subQuery.exec_(queryString)
            while subQuery.next():
                if subQuery.value(0).strip() and subQuery.value(1).strip():
                    dataList.append([layerName, subQuery.value(0), subQuery.value(1)])
        azenqosDatabase.close()

        try:
            mintime = ''
            maxtime = ''
            for row in range(len(dataList)):
                if row > 0:
                    if dataList[row][1]:
                        if dataList[row][1] < mintime:
                            mintime = dataList[row][1]
                    if dataList[row][2]:
                        if dataList[row][2] > maxtime:
                            maxtime = dataList[row][2]
                else:
                    if dataList[row][1]:
                        mintime = dataList[row][1]
                    if dataList[row][2]:
                        maxtime = dataList[row][2]

            minTimeValue = datetime.datetime.strptime(str(mintime), '%Y-%m-%d %H:%M:%S.%f').timestamp()

            maxTimeValue = datetime.datetime.strptime(str(maxtime), '%Y-%m-%d %H:%M:%S.%f').timestamp()

            currentDateTimeString = '%s' % (
                datetime.datetime.fromtimestamp(minTimeValue))
        except:
            QtWidgets.QMessageBox.critical(
                None, "Cannot open database",
                "Unable to establish a database connection.\n"
                "This example needs SQLite support. Please read "
                "the Qt SQL driver documentation for information how "
                "to build it.\n\n"
                "Click Cancel to exit.", QtWidgets.QMessageBox.Cancel)
            return False
        self.setIncrementValue()

    def addDatabase(self):
        global azenqosDatabase
        azenqosDatabase = QSqlDatabase.addDatabase("QSQLITE")
        azenqosDatabase.setDatabaseName(self.databasePath)

    def setIncrementValue(self):
        global sliderLength
        sliderLength = maxTimeValue - minTimeValue


class AzenqosDialog(QDialog):
    def __init__(self, databaseUi):
        """Constructor."""
        super(AzenqosDialog, self).__init__(None)
        self.timeSliderThread = TimeSliderThread()
        self.posObjs = []
        self.posIds = []
        self.maxPosId = 0
        self.currentMaxPosId = 0
        self.setupUi(self)
        self.raise_()
        self.activateWindow()
        self.databaseUi = databaseUi
        azenqosDatabase.open()

    def setupUi(self, AzenqosDialog):
        global timeSlider
        AzenqosDialog.setObjectName("AzenqosDialog")
        AzenqosDialog.resize(640, 480)
        self.setupTreeWidget(AzenqosDialog)
        self.mdi = QMdiArea()
        self.mdi.show()

        # Time Slider
        timeSlider = TimeSlider(AzenqosDialog)
        timeSlider.setGeometry(QtCore.QRect(300, 56, 150, 22))
        sizePolicy = QSizePolicy(QSizePolicy.Expanding, QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(
            timeSlider.sizePolicy().hasHeightForWidth())
        timeSlider.setSizePolicy(sizePolicy)
        timeSlider.setBaseSize(QtCore.QSize(500, 0))
        timeSlider.setPageStep(1)
        timeSlider.setSliderPosition(0)
        timeSlider.setOrientation(QtCore.Qt.Horizontal)
        timeSlider.setObjectName("timeSlider")
        timeSlider.setTracking(True)
        timeSlider.setRange(0, int(sliderLength))

        # Datetime Textbox
        self.timeEdit = QDateTimeEdit(AzenqosDialog)
        self.timeEdit.setGeometry(QtCore.QRect(480, 56, 140, 22))
        self.timeEdit.setObjectName("timeEdit")
        self.timeEdit.setDisplayFormat("hh:mm:ss")
        self.timeEdit.setDateTime(
            datetime.datetime.fromtimestamp(minTimeValue))
        self.timeEdit.setReadOnly(True)

        # Time label
        self.timeSliderLabel = QLabel(AzenqosDialog)
        self.timeSliderLabel.setGeometry(QtCore.QRect(300, 30, 100, 16))
        self.timeSliderLabel.setObjectName("timeSliderLabel")

        self.setupPlayStopButton(AzenqosDialog)

        # Import Database Button
        self.importDatabaseBtn = QPushButton(AzenqosDialog)
        self.importDatabaseBtn.setGeometry(QtCore.QRect(300, 140, 181, 32))
        self.importDatabaseBtn.setObjectName("importDatabaseBtn")

        # Filter Button
        # self.filterBtn = QPushButton(AzenqosDialog)
        # self.filterBtn.setGeometry(QtCore.QRect(300, 190, 181, 32))
        # self.filterBtn.setObjectName("filterBtn")

        self.retranslateUi(AzenqosDialog)
        QtCore.QMetaObject.connectSlotsByName(AzenqosDialog)

        timeSlider.valueChanged.connect(self.timeChange)
        self.importDatabaseBtn.clicked.connect(self.importDatabase)

    def retranslateUi(self, AzenqosDialog):
        _translate = QtCore.QCoreApplication.translate
        AzenqosDialog.setWindowTitle(
            _translate("AzenqosDialog", "Azenqos Main Menu"))
        self.presentationTreeWidget.headerItem().setText(
            0, _translate("AzenqosDialog", "Presentation"))
        __sortingEnabled = self.presentationTreeWidget.isSortingEnabled()
        self.presentationTreeWidget.setSortingEnabled(False)
        self.presentationTreeWidget.setSortingEnabled(__sortingEnabled)
        self.configurationTreeWidget.headerItem().setText(
            0, _translate("AzenqosDialog", "Configuration"))
        self.configurationTreeWidget.setSortingEnabled(False)
        self.configurationTreeWidget.setSortingEnabled(__sortingEnabled)
        self.importDatabaseBtn.setText(
            _translate("AzenqosDialog", "Import Database"))
        # self.filterBtn.setText(_translate("AzenqosDialog", "Filter"))
        self.timeSliderLabel.setText(_translate("AzenqosDialog", "Time:"))

    def setupTreeWidget(self, AzenqosDialog):
        # Presentation Tree Widget
        self.presentationTreeWidget = QTreeWidget(AzenqosDialog)
        self.presentationTreeWidget.setGeometry(QtCore.QRect(20, 20, 260, 300))
        self.presentationTreeWidget.setFrameShape(QFrame.StyledPanel)
        self.presentationTreeWidget.setAllColumnsShowFocus(True)
        self.presentationTreeWidget.setObjectName("presentationTreeWidget")
        self.presentationTreeWidget.itemDoubleClicked.connect(
            self.loadAllMessages)

        # WCDMA Section
        # wcdma = QTreeWidgetItem(self.presentationTreeWidget, ['WCDMA'])
        # wcdmaActiveMonitoredSets = QTreeWidgetItem(wcdma,
        #                                            ['Active + Monitored Sets'])
        # wcdmaRadioParams = QTreeWidgetItem(wcdma, ['Radio Parameters'])
        # wcdmaASL = QTreeWidgetItem(wcdma, ['Active Set List'])
        # wcdmaMonitoredSet = QTreeWidgetItem(wcdma, ['Monitored Set List'])
        # wcdmaSummary = QTreeWidgetItem(wcdma, ['BLER Summary'])
        # wcdmaTransportChannel = QTreeWidgetItem(wcdma,
        #                                         ['BLER / Transport Channel'])
        # wcdmaLineChart = QTreeWidgetItem(wcdma, ['Line Chart'])
        # wcdmaBearers = QTreeWidgetItem(wcdma, ['Bearers'])
        # wcdmaPilotPoluting = QTreeWidgetItem(wcdma, ['Pilot Poluting Cells'])
        # wcdmaActiveMonitoredBar = QTreeWidgetItem(wcdma,
        #                                           ['Active + Monitored Bar'])
        # wcdmaReports = QTreeWidgetItem(wcdma, ['CM GSM Reports'])
        # wcdmaCells = QTreeWidgetItem(wcdma, ['CM GSM Cells'])
        # wcdmaPilotAnalyzer = QTreeWidgetItem(wcdma, ['Pilot Analyzer'])

        # LTE Section
        lte = QTreeWidgetItem(self.presentationTreeWidget, ['LTE'])
        lteRadioParams = QTreeWidgetItem(lte, ['Radio Parameters'])
        lteServingNeighbors = QTreeWidgetItem(lte, ['Serving + Neighbors'])
        ltePPParams = QTreeWidgetItem(lte, ['PUCCH/PDSCH Parameters'])
        lteLineChart = QTreeWidgetItem(lte, ['LTE Line Chart'])
        lteRlc = QTreeWidgetItem(lte, ['LTE RLC'])
        lteVo = QTreeWidgetItem(lte, ['LTE VoLTE'])

        # CDMA/EVDO Section
        # cdmaEvdo = QTreeWidgetItem(self.presentationTreeWidget, ['CDMA/EVDO'])
        # cdmaEvdoRadioParams = QTreeWidgetItem(cdmaEvdo, ['Radio Parameters'])
        # cdmaEvdoServingNeighbors = QTreeWidgetItem(cdmaEvdo,
        #                                            ['Serving + Neighbors'])
        # cdmaEvdoParams = QTreeWidgetItem(cdmaEvdo, ['EVDO Parameters'])

        # Data Section
        # data = QTreeWidgetItem(self.presentationTreeWidget, ['Data'])
        # dataGsmLineChart = QTreeWidgetItem(data, ['GSM Data Line Chart'])
        # dataWcdmaLineChart = QTreeWidgetItem(data, ['WCDMA Data Line Chart'])
        # dataEdgeInfo = QTreeWidgetItem(data, ['GPRS/EDGE Information'])
        # dataWebBrowser = QTreeWidgetItem(data, ['Web Browser'])
        # dataStats = QTreeWidgetItem(data, ['HSDPA/HSPA + Statistics'])
        # dataHsupaStats = QTreeWidgetItem(data, ['HSUPA Statistics'])
        # dataLteStats = QTreeWidgetItem(data, ['LTE Data Statistics'])
        # dataLteLineChart = QTreeWidgetItem(data, ['LTE Data Line Chart'])
        # dataWifiConnectedAp = QTreeWidgetItem(data, ['Wifi Connected AP'])
        # dataWifiScannedAp = QTreeWidgetItem(data, ['Wifi Scanned APs'])
        # dataWifiGraph = QTreeWidgetItem(data, ['Wifi Graph'])

        # Signaling Section
        signaling = QTreeWidgetItem(self.presentationTreeWidget, ['Signaling'])
        signalingEvents = QTreeWidgetItem(signaling, ['Events'])
        # signalingLayerOne = QTreeWidgetItem(signaling, ['Layer 1 Messages'])
        signalingLayerThree = QTreeWidgetItem(signaling, ['Layer 3 Messages'])
        signalingBenchmark = QTreeWidgetItem(signaling, ['Benchmark'])
        signalingMM = QTreeWidgetItem(signaling, ['MM Reg States'])
        signalingSystemInfo = QTreeWidgetItem(signaling,
                                              ['Serving System Info'])
        # signalingDebug = QTreeWidgetItem(signaling, ['Debug Android/Event'])

        # Positioning Section
        # positioning = QTreeWidgetItem(self.presentationTreeWidget,
        #                               ['Positioning'])
        # positioningGps = QTreeWidgetItem(positioning, ['GPS'])
        # positioningMap = QTreeWidgetItem(positioning, ['Map'])
        # positioningPositioning = QTreeWidgetItem(positioning, ['Positioning'])

        # Customized Window Section
        # customizedWindow = QTreeWidgetItem(self.presentationTreeWidget,
        #                                    ['Customized Window'])
        # customizedWindowStatus = QTreeWidgetItem(customizedWindow,
        #                                          ['Status Window'])
        # customizedWindowMessage = QTreeWidgetItem(customizedWindow,
        #                                           ['Message Window'])
        # customizedWindowChart = QTreeWidgetItem(customizedWindow,
        #                                         ['Line Chart'])
        #
        # # NB-IoT Section
        # nBIoT = QTreeWidgetItem(self.presentationTreeWidget, ['NB-IoT'])
        # nBIoTParams = QTreeWidgetItem(nBIoT,
        #                               ['NB-IoT Radio Parameters Window'])

        self.presentationTreeWidget.header().setCascadingSectionResizes(True)
        self.presentationTreeWidget.header().setHighlightSections(True)

        # Configuration
        self.configurationTreeWidget = QTreeWidget(AzenqosDialog)
        self.configurationTreeWidget.setGeometry(
            QtCore.QRect(20, 320, 260, 100))
        self.configurationTreeWidget.setFrameShape(QFrame.StyledPanel)
        self.configurationTreeWidget.setAllColumnsShowFocus(True)
        self.configurationTreeWidget.setObjectName("configurationTreeWidget")
        cellInformation = QTreeWidgetItem(self.configurationTreeWidget,
                                          ['Cell Information'])
        equipmentConfiguration = QTreeWidgetItem(self.configurationTreeWidget,
                                                 ['Equipment Configuration'])
        self.configurationTreeWidget.itemDoubleClicked.connect(
            self.selectConfiguration)

    def setupPlayStopButton(self, AzenqosDialog):
        self.horizontalLayout = QWidget(AzenqosDialog)
        self.horizontalLayout.setGeometry(QtCore.QRect(290, 70, 90, 48))
        self.playButton = QToolButton()
        self.playButton.setIcon(self.style().standardIcon(QStyle.SP_MediaPlay))
        self.pauseButton = QToolButton()
        self.pauseButton.setIcon(self.style().standardIcon(
            QStyle.SP_MediaPause))
        layout = QHBoxLayout(self.horizontalLayout)
        layout.addStretch(1)
        layout.addWidget(self.playButton)
        layout.addWidget(self.pauseButton)
        self.playButton.clicked.connect(self.startPlaytimeThread)
        self.pauseButton.clicked.connect(self.pauseTime)

    def startPlaytimeThread(self):
        global isSliderPlay
        isSliderPlay = True
        self.playButton.setDisabled(True)
        self.timeSliderThread.changeValue.connect(self.setTimeValue)
        self.timeSliderThread.start()

    def pauseTime(self):
        global isSliderPlay
        timeSlider.setEnabled(True)
        self.playButton.setEnabled(True)
        self.timeSliderThread.quit()
        threading.Event()
        isSliderPlay = False

    def setTimeValue(self, value):
        global isSliderPlay
        timeSlider.setValue(value)
        timeSlider.update()
        if value == maxTimeValue:
            self.pauseTime()

    def loadAllMessages(self):
        getSelected = self.presentationTreeWidget.selectedItems()
        if getSelected:
            baseNode = getSelected[0]
            if baseNode.text(0) is not None:
                getChildNode = baseNode.text(0)
                getParentNode = baseNode.parent().text(0)
                self.classifySelectedItems(getParentNode, getChildNode)

    def importDatabase(self):
        self.databaseDialog = Ui_DatabaseDialog()
        self.databaseDialog.show()
        self.hide()

    def timeChange(self):
        global currentTimestamp
        global timeSlider
        global currentDateTimeString
        value = timeSlider.value()
        timestampValue = minTimeValue + value
        sampledate = datetime.datetime.fromtimestamp(timestampValue)
        self.timeEdit.setDateTime(sampledate)
        if len(openedWindows) > 0:
            for window in openedWindows:
                if not window.title in linechartWindowname:
                    window.hilightRow(sampledate)
                else:
                    print('It\'s linechart.')
                    window.moveChart(sampledate)
        # if len(tableList) > 0:
        #     worker = Worker(self.hilightFeature())
        #     threadpool.start(worker)
        #     self.hilightFeature()
        self.timeSliderThread.set(value)
        currentTimestamp = timestampValue
        currentDateTimeString = '%s' % (datetime.datetime.fromtimestamp(currentTimestamp))

    # def threadComplete(self):
    #     QgsMessageLog.logMessage('[-- THREAD COMPLETE --]')
    #     iface.mapCanvas().refresh()

    # def hilightFeature(self):
    #     QgsMessageLog.logMessage('[-- Start hilight features --]')
    #     start_time = time.time()
    #     self.getPosIdsByTable()
    #     if len(self.posIds) > 0 and len(self.posObjs) > 0:
    #         self.usePosIdsSelectedFeatures()
    #     QgsMessageLog.logMessage('[-- End hilight features --]')

    # def getPosIdsByTable(self):
    #     azenqosDatabase.open()
    #     # start_time = time.time()
    #     QgsMessageLog.logMessage('tables: ' + str(tableList))
    #     for tableName in tableList:
    #         self.posObjs = []
    #         self.posIds = []
    #         query = QSqlQuery()
    #         queryString = "SELECT posid FROM %s WHERE time <= '%s' AND geom IS NOT NULL ORDER BY time DESC LIMIT 1" % (tableName, currentDateTimeString)
    #         query.exec_(queryString)
    #         while query.next():
    #             posid = query.value(0)
    #             posdict = {"posid": posid, "table": tableName}
    #             self.posObjs.append(posdict)
    #             self.posIds.append(posid)
    #     # elapsed_time = time.time() - start_time
    #     # QgsMessageLog.logMessage('Query Elapsed time: ' + str(elapsed_time) + ' s.')
    #     azenqosDatabase.close()


    # def usePosIdsSelectedFeatures(self):
    #     if self.posIds:
    #         selected_ids = []
    #         layerName = None
    #         # start_time = time.time()
    #         self.currentMaxPosId = max(self.posIds)
    #         # if self.currentMaxPosId > self.maxPosId:
    #         for obj in self.posObjs:
    #             if obj.get("posid") == self.currentMaxPosId:
    #                 layerName = obj.get("table")
    #                 break
    #         # elapsed_time = time.time() - start_time
    #         # QgsMessageLog.logMessage('Get layer name and Max PosId Elapsed time: ' + str(elapsed_time) + ' s.')
    #         # QgsMessageLog.logMessage('posIdAppoarchToTime: ' + str(self.currentMaxPosId))

    #         layer = QgsProject.instance().mapLayersByName(layerName)[0]
    #         layerFeatures = layer.getFeatures()
    #         root = QgsProject.instance().layerTreeRoot()
    #         root.setHasCustomLayerOrder(True)
    #         order = root.customLayerOrder()
    #         order.insert(0, order.pop(order.index(layer))) # vlayer to the top
    #         root.setCustomLayerOrder(order)
    #         iface.setActiveLayer(layer)
    #         QgsMessageLog.logMessage('layer name: ' + str(layerName))

    #         for feature in layerFeatures:
    #             posid = feature['posid']
    #             if self.currentMaxPosId == posid:
    #                 selected_ids.append(feature.id())
    #         QgsMessageLog.logMessage('selected_ids: {0}'.format(str(selected_ids)))

    #         if layer:
    #             start_time = time.time()

    #             if len(selected_ids) > 0:
    #                 # clearAllSelectedFeatures()
    #                 layer.selectByIds(selected_ids)
    #                 ext = layer.extent()
    #                 xmin = ext.xMinimum()
    #                 xmax = ext.xMaximum()
    #                 ymin = ext.yMinimum()
    #                 ymax = ext.yMaximum()
    #                 zoomRectangle = QgsRectangle(xmin,ymin,xmax,ymax)
    #                 iface.mapCanvas().setExtent(zoomRectangle)

    #                 # box = layer.boundingBoxOfSelected()
    #                 # iface.mapCanvas().setExtent(box)
    #                 iface.mapCanvas().zoomToSelected(layer)
    #                 iface.mapCanvas().zoomScale(2000.0)
    #                 iface.mapCanvas().refresh()
    #             elapsed_time = time.time() - start_time
    #             QgsMessageLog.logMessage('Select Features Elapsed time: ' + str(elapsed_time) + ' s.')
    #             # self.maxPosId = self.currentMaxPosId


    def classifySelectedItems(self, parent, child):
        global openedWindows
        global tableList
        windowName = parent + "_" + child
        subwindowList = self.mdi.subWindowList()
        if parent == "WCDMA":
            if child == "Active + Monitored Sets":
                if hasattr(self, 'wcdma_ams_window') is False:
                    self.wcdma_ams_window = TableWindow(self, windowName)
                openedWindows.append(self.wcdma_ams_window)
                    #self.mdi.addSubWindow(self.wcdma_ams_window)
                self.wcdma_ams_window.show()
                self.wcdma_ams_window.activateWindow()

            elif child == "Radio Parameters":
                if hasattr(self, 'wcdma_rp_window') is False:
                    self.wcdma_rp_window = TableWindow(self, windowName)
                openedWindows.append(self.wcdma_rp_window)
                    #self.mdi.addSubWindow(self.wcdma_rp_window)
                self.wcdma_rp_window.show()
                self.wcdma_rp_window.activateWindow()

            elif child == "Active Set List":
                if hasattr(self, 'wcdma_asl_window') is False:
                    self.wcdma_asl_window = TableWindow(self, windowName)
                openedWindows.append(self.wcdma_asl_window)
                    #self.mdi.addSubWindow(self.wcdma_asl_window)
                self.wcdma_asl_window.show()
                self.wcdma_asl_window.activateWindow()
            elif child == "Monitored Set List":
                if hasattr(self, 'wcdma_msl_window') is False:
                    self.wcdma_msl_window = TableWindow(self, windowName)
                openedWindows.append(self.wcdma_msl_window)
                    #self.mdi.addSubWindow(self.wcdma_msl_window)
                self.wcdma_msl_window.show()
                self.wcdma_msl_window.activateWindow()
            elif child == "BLER Summary":
                if hasattr(self, 'wcdma_bler_window') is False:
                    self.wcdma_bler_window = TableWindow(self, windowName)
                openedWindows.append(self.wcdma_bler_window)
                    #self.mdi.addSubWindow(self.wcdma_bler_window)
                self.wcdma_bler_window.show()
                self.wcdma_bler_window.activateWindow()
            elif child == "BLER / Transport Channel":
                if hasattr(self, 'wcdma_blertc_window') is False:
                    self.wcdma_blertc_window = TableWindow(self, windowName)
                openedWindows.append(self.wcdma_blertc_window)
                    #self.mdi.addSubWindow(self.wcdma_blertc_window)
                self.wcdma_blertc_window.show()
                self.wcdma_blertc_window.activateWindow()
            elif child == "Line Chart":
                if hasattr(self, 'wcdma_lc_window') is False:
                    self.wcdma_lc_window = Ui_WCDMA_LCwidget(self, windowName, azenqosDatabase)
                openedWindows.append(self.wcdma_lc_window)
                    #self.mdi.addSubWindow(self.wcdma_lc_window)
                self.wcdma_lc_window.show()
                self.wcdma_lc_window.activateWindow()
            elif child == "Bearers":
                if hasattr(self, 'wcdma_bearer_window') is False:
                    self.wcdma_bearer_window = TableWindow(self, windowName)
                openedWindows.append(self.wcdma_bearer_window)
                    #self.mdi.addSubWindow(self.wcdma_bearer_window)
                self.wcdma_bearer_window.show()
                self.wcdma_bearer_window.activateWindow()
            elif child == "Pilot Poluting Cells":
                if hasattr(self, 'wcdma_ppc_window') is False:
                    self.wcdma_ppc_window = TableWindow(self, windowName)
                openedWindows.append(self.wcdma_ppc_window)
                    #self.mdi.addSubWindow(self.wcdma_ppc_window)
                self.wcdma_ppc_window.show()
                self.wcdma_ppc_window.activateWindow()
            elif child == "Active + Monitored Bar":
                if hasattr(self, 'wcdma_ppc_window') is False:
                    self.wcdma_amb_window = TableWindow(self, windowName)
                openedWindows.append(self.wcdma_amb_window)
                    #self.mdi.addSubWindow(self.wcdma_amb_window)
                self.wcdma_amb_window.show()
                self.wcdma_amb_window.activateWindow()
            elif child == "CM GSM Reports":
                if hasattr(self, 'wcdma_report_window') is False:
                    self.wcdma_report_window = TableWindow(self, windowName)
                openedWindows.append(self.wcdma_report_window)
                    #self.mdi.addSubWindow(self.wcdma_report_window)
                self.wcdma_report_window.show()
                self.wcdma_report_window.activateWindow()
            elif child == "CM GSM Cells":
                if hasattr(self, 'wcdma_cells_window') is False:
                    self.wcdma_cells_window = TableWindow(self, windowName)
                openedWindows.append(self.wcdma_cells_window)
                    #self.mdi.addSubWindow(self.wcdma_cells_window)
                self.wcdma_cells_window.show()
                self.wcdma_cells_window.activateWindow()
            elif child == "Pilot Analyzer":
                if hasattr(self, 'wcdma_analyzer_window') is False:
                    self.wcdma_analyzer_window = TableWindow(self, windowName)
                openedWindows.append(self.wcdma_analyzer_window)
                    #self.mdi.addSubWindow(self.wcdma_analyzer_window)
                self.wcdma_analyzer_window.show()
                self.wcdma_analyzer_window.activateWindow()
        elif parent == "LTE":
            if child == "Radio Parameters":
                tableWidget = None
                if hasattr(self, 'lte_param_window') is True:
                    tableWindow = self.lte_param_window.findChild(QWidget, windowName)
                    if not tableWindow:
                        tableWidget = TableWindow(self.events_window, windowName)
                        openedWindows.append(tableWidget)

                    if self.lte_param_window not in subwindowList:
                        self.lte_param_window = QMdiSubWindow(self.mdi)
                        self.mdi.addSubWindow(self.lte_param_window)

                    if tableWidget:
                        self.lte_param_window.setWidget(tableWidget)
                    self.lte_param_window.show()
                else:
                    # create new subwindow
                    self.lte_param_window = QMdiSubWindow(self.mdi)
                    tableWidget = TableWindow(self.lte_param_window, windowName)
                    self.lte_param_window.setWidget(tableWidget)
                    self.mdi.addSubWindow(self.lte_param_window)
                    self.lte_param_window.show()
                    openedWindows.append(tableWidget)

            elif child == "Serving + Neighbors":
                tableWidget = None
                if hasattr(self, 'lte_sn_window') is True:
                    tableWindow = self.lte_sn_window.findChild(QWidget, windowName)
                    if not tableWindow:
                        tableWidget = TableWindow(self.events_window, windowName)
                        openedWindows.append(tableWidget)

                    if self.lte_sn_window not in subwindowList:
                        self.lte_sn_window = QMdiSubWindow(self.mdi)
                        self.mdi.addSubWindow(self.lte_sn_window)

                    if tableWidget:
                        self.lte_sn_window.setWidget(tableWidget)
                    self.lte_sn_window.show()
                else:
                    # create new subwindow
                    self.lte_sn_window = QMdiSubWindow(self.mdi)
                    tableWidget = TableWindow(self.lte_sn_window, windowName)
                    self.lte_sn_window.setWidget(tableWidget)
                    self.mdi.addSubWindow(self.lte_sn_window)
                    self.lte_sn_window.show()
                    openedWindows.append(tableWidget)

            elif child == "PUCCH/PDSCH Parameters":
                tableWidget = None
                if hasattr(self, 'lte_ppparam_window') is True:
                    tableWindow = self.lte_ppparam_window.findChild(QWidget, windowName)
                    if not tableWindow:
                        tableWidget = TableWindow(self.events_window, windowName)
                        openedWindows.append(tableWidget)

                    if self.lte_ppparam_window not in subwindowList:
                        self.lte_ppparam_window = QMdiSubWindow(self.mdi)
                        self.mdi.addSubWindow(self.lte_ppparam_window)

                    if tableWidget:
                        self.lte_ppparam_window.setWidget(tableWidget)
                    self.lte_ppparam_window.show()
                else:
                    # create new subwindow
                    self.lte_ppparam_window = QMdiSubWindow(self.mdi)
                    tableWidget = TableWindow(self.lte_ppparam_window, windowName)
                    self.lte_ppparam_window.setWidget(tableWidget)
                    self.mdi.addSubWindow(self.lte_ppparam_window)
                    self.lte_ppparam_window.show()
                    openedWindows.append(tableWidget)

            elif child == "LTE Line Chart":
                # if hasattr(self, 'lte_lc_window') is False:
                #     self.lte_lc_window = Ui_LTE_LCwidget(self, windowName)
                # openedWindows.append(self.lte_lc_window)
                #     #self.mdi.addSubWindow(self.lte_lc_window)
                # self.lte_lc_window.show()
                # self.lte_lc_window.activateWindow()

                widget = None
                if hasattr(self, 'lte_lc_window') is True:
                    widget = self.lte_lc_window.findChild(QWidget, windowName)
                    if not widget:
                        widget = Ui_LTE_LCwidget(self.lte_lc_window, windowName, azenqosDatabase)
                        openedWindows.append(widget)

                    if self.lte_lc_window not in subwindowList:
                        self.lte_lc_window = QMdiSubWindow(self.mdi)
                        self.mdi.addSubWindow(self.lte_lc_window)

                    if widget:
                        self.lte_lc_window.setWidget(widget)
                    self.lte_lc_window.show()
                else:
                    # create new subwindow
                    self.lte_lc_window = QMdiSubWindow(self.mdi)
                    widget = Ui_LTE_LCwidget(self.lte_lc_window, windowName, azenqosDatabase)
                    self.lte_lc_window.setWidget(widget)
                    self.mdi.addSubWindow(self.lte_lc_window)
                    self.lte_lc_window.show()
                    openedWindows.append(widget)

            elif child == "LTE RLC":
                if hasattr(self, 'lte_rlc_window') is False:
                    self.lte_rlc_window = TableWindow(self, windowName)
                openedWindows.append(self.lte_rlc_window)
                    #self.mdi.addSubWindow(self.lte_rlc_window)
                self.lte_rlc_window.show()
                self.lte_rlc_window.activateWindow()
            elif child == "LTE VoLTE":
                if hasattr(self, 'lte_volte_window') is False:
                    self.lte_volte_window = TableWindow(self, windowName)
                openedWindows.append(self.lte_volte_window)
                    #self.mdi.addSubWindow(self.lte_volte_window)
                self.lte_volte_window.show()
                self.lte_volte_window.activateWindow()
        elif parent == "CDMA/EVDO":
            if child == "Radio Parameters":
                tableWidget = None
                if hasattr(self, 'cdma_rp_window') is True:
                    tableWindow = self.cdma_rp_window.findChild(QWidget, windowName)
                    if not tableWindow:
                        tableWidget = TableWindow(self.events_window, windowName)
                        openedWindows.append(tableWidget)

                    if self.cdma_rp_window not in subwindowList:
                        self.cdma_rp_window = QMdiSubWindow(self.mdi)
                        self.mdi.addSubWindow(self.cdma_rp_window)

                    if tableWidget:
                        self.cdma_rp_window.setWidget(tableWidget)
                    self.cdma_rp_window.show()
                else:
                    # create new subwindow
                    self.cdma_rp_window = QMdiSubWindow(self.mdi)
                    tableWidget = TableWindow(self.cdma_rp_window, windowName)
                    self.cdma_rp_window.setWidget(tableWidget)
                    self.mdi.addSubWindow(self.cdma_rp_window)
                    self.cdma_rp_window.show()
                    openedWindows.append(tableWidget)

            elif child == "Serving + Neighbors":
                tableWidget = None
                if hasattr(self, 'cdma_sn_window') is True:
                    tableWindow = self.cdma_sn_window.findChild(QWidget, windowName)
                    if not tableWindow:
                        tableWidget = TableWindow(self.events_window, windowName)
                        openedWindows.append(tableWidget)

                    if self.cdma_sn_window not in subwindowList:
                        self.cdma_sn_window = QMdiSubWindow(self.mdi)
                        self.mdi.addSubWindow(self.cdma_sn_window)

                    if tableWidget:
                        self.cdma_sn_window.setWidget(tableWidget)
                    self.cdma_sn_window.show()
                else:
                    # create new subwindow
                    self.cdma_sn_window = QMdiSubWindow(self.mdi)
                    tableWidget = TableWindow(self.cdma_sn_window, windowName)
                    self.cdma_sn_window.setWidget(tableWidget)
                    self.mdi.addSubWindow(self.cdma_sn_window)
                    self.cdma_sn_window.show()
                    openedWindows.append(tableWidget)

            elif child == "EVDO Parameters":
                tableWidget = None
                if hasattr(self, 'cdma_evdo_window') is True:
                    tableWindow = self.cdma_evdo_window.findChild(QWidget, windowName)
                    if not tableWindow:
                        tableWidget = TableWindow(self.events_window, windowName)
                        openedWindows.append(tableWidget)

                    if self.cdma_evdo_window not in subwindowList:
                        self.cdma_evdo_window = QMdiSubWindow(self.mdi)
                        self.mdi.addSubWindow(self.cdma_evdo_window)

                    if tableWidget:
                        self.cdma_evdo_window.setWidget(tableWidget)
                    self.cdma_evdo_window.show()
                else:
                    # create new subwindow
                    self.cdma_evdo_window = QMdiSubWindow(self.mdi)
                    tableWidget = TableWindow(self.cdma_evdo_window, windowName)
                    self.cdma_evdo_window.setWidget(tableWidget)
                    self.mdi.addSubWindow(self.cdma_evdo_window)
                    self.cdma_evdo_window.show()
                    openedWindows.append(tableWidget)

        elif parent == "Data":
            if child == "WCDMA Data Line Chart":
                if hasattr(self, 'wcdma_data_lc') is False:
                    self.wcdma_data_lc = Ui_WCDMA_Data_LCwidget(self, windowName, azenqosDatabase)
                openedWindows.append(self.wcdma_data_lc)
                #self.mdi.addSubWindow(self.wcdma_data_lc)
                self.wcdma_data_lc.show()
                self.wcdma_data_lc.activateWindow()
            elif child == "GPRS/EDGE Information":
                if hasattr(self, 'wcdma_data_lc') is False:
                    self.gprs_info = TableWindow(self, windowName)
                openedWindows.append(self.gprs_info)
                #self.mdi.addSubWindow(self.gprs_info)
                self.gprs_info.show()
                self.gprs_info.activateWindow()
            elif child == "Web Browser":
                if hasattr(self, 'web_browser') is False:
                    self.gprs_info = TableWindow(self, windowName)
                openedWindows.append(self.gprs_info)
                #self.mdi.addSubWindow(self.gprs_info)
                self.gprs_info.show()
                self.gprs_info.activateWindow()
            elif child == "HSDPA/HSPA + Statistics":
                if hasattr(self, 'hsdpa_stat') is False:
                    self.hsdpa_stat = TableWindow(self, windowName)
                openedWindows.append(self.hsdpa_stat)
                #self.mdi.addSubWindow(self.hsdpa_stat)
                self.hsdpa_stat.show()
                self.hsdpa_stat.activateWindow()
            elif child == "HSUPA Statistics":
                if hasattr(self, 'hsupa_stat') is False:
                    self.hsupa_stat = TableWindow(self, windowName)
                openedWindows.append(self.hsupa_stat)
                #self.mdi.addSubWindow(self.hsupa_stat)
                self.hsupa_stat.show()
                self.hsupa_stat.activateWindow()
            elif child == "LTE Data Statistics":
                if hasattr(self, 'lte_data_stat') is False:
                    self.lte_data_stat = TableWindow(self, windowName)
                openedWindows.append(self.lte_data_stat)
                #self.mdi.addSubWindow(self.lte_data_stat)
                self.lte_data_stat.show()
                self.lte_data_stat.activateWindow()
            elif child == "LTE Data Line Chart":
                if hasattr(self, 'lte_data_lc') is False:
                    self.lte_data_lc = Ui_LTE_Data_LCwidget(self, windowName, azenqosDatabase)
                openedWindows.append(self.lte_data_lc)
                #self.mdi.addSubWindow(self.lte_data_lc)
                self.lte_data_lc.show()
                self.lte_data_lc.activateWindow()
            elif child == "Wifi Connected AP":
                if hasattr(self, 'wifi_connected_ap') is False:
                    self.wifi_connected_ap = TableWindow(self, windowName)
                openedWindows.append(self.wifi_connected_ap)
                #self.mdi.addSubWindow(self.wifi_connected_ap)
                self.wifi_connected_ap.show()
                self.wifi_connected_ap.activateWindow()
            elif child == "Wifi Scanned APs":
                if hasattr(self, 'wifi_scanned_ap') is False:
                    self.wifi_scanned_ap = TableWindow(self, windowName)
                openedWindows.append(self.wifi_scanned_ap)
                #self.mdi.addSubWindow(self.wifi_scanned_ap)
                self.wifi_scanned_ap.show()
                self.wifi_scanned_ap.activateWindow()
            elif child == "Wifi Graph":
                if hasattr(self, 'wifi_graph') is False:
                    self.wifi_graph = TableWindow(self, windowName)
                openedWindows.append(self.wifi_graph)
                #self.mdi.addSubWindow(self.wifi_graph)
                self.wifi_graph.show()
                self.wifi_graph.activateWindow()
        elif parent == "Signaling":
            if child == "Events":
                events_widget = None
                if hasattr(self, 'events_window') is True:
                    tableWindow = self.events_window.findChild(QWidget, windowName)
                    if not tableWindow:
                        events_widget = TableWindow(self.events_window, windowName)
                        openedWindows.append(events_widget)

                    if self.events_window not in subwindowList:
                        self.events_window = QMdiSubWindow(self.mdi)
                        self.mdi.addSubWindow(self.events_window)

                    if events_widget:
                        self.events_window.setWidget(events_widget)
                    self.events_window.show()

                else:
                    # create new subwindow
                    self.events_window = QMdiSubWindow(self.mdi)
                    events_widget = TableWindow(self.events_window, windowName)
                    self.events_window.setWidget(events_widget)
                    self.mdi.addSubWindow(self.events_window)
                    self.events_window.show()
                    openedWindows.append(events_widget)


            elif child == "Layer 1 Messages":
                if hasattr(self, 'layer_one_messages') is True:
                    tableWindow = self.layer_one_messages.findChild(QWidget, windowName)
                    if not tableWindow:
                        layer_one_widget = TableWindow(self.layer_one_messages, windowName)
                        openedWindows.append(layer_one_widget)

                    if self.layer_one_messages not in subwindowList:
                        self.layer_one_messages = QMdiSubWindow(self.mdi)
                        self.mdi.addSubWindow(self.layer_one_messages)

                    self.layer_one_messages.setWidget(layer_one_widget)
                    self.layer_one_messages.show()

                else:
                    # create new subwindow
                    self.layer_one_messages = QMdiSubWindow(self.mdi)
                    layer_one_widget = TableWindow(self.layer_one_messages, windowName)
                    self.layer_one_messages.setWidget(layer_one_widget)
                    self.mdi.addSubWindow(self.layer_one_messages)
                    self.layer_one_messages.show()
                    openedWindows.append(layer_one_widget)

                # if hasattr(self, 'layer_one_messages') is False:
                #     # self.layer_one_messages = TableWindow(self, windowName)
                #     self.layer_one_messages = TableWindow(self, windowName)
                # self.mdi.addSubWindow(self.layer_one_messages)
                # openedWindows.append(self.layer_one_messages)
                # self.layer_one_messages.show()
                # self.layer_one_messages.activateWindow()
            elif child == "Layer 3 Messages":
                if hasattr(self, 'layer_three_messages') is True:
                    tableWindow = self.layer_three_messages.findChild(QWidget, windowName)
                    if not tableWindow:
                        layer_three_widget = TableWindow(self.layer_three_messages, windowName)
                        openedWindows.append(layer_three_widget)

                    if self.layer_three_messages not in subwindowList:
                        self.layer_three_messages = QMdiSubWindow(self.mdi)
                        self.mdi.addSubWindow(self.layer_three_messages)

                    self.layer_three_messages.setWidget(layer_three_widget)
                    self.layer_three_messages.show()

                else:
                    # create new subwindow
                    self.layer_three_messages = QMdiSubWindow(self.mdi)
                    layer_three_widget = TableWindow(self.layer_three_messages, windowName)
                    self.layer_three_messages.setWidget(layer_three_widget)
                    self.mdi.addSubWindow(self.layer_three_messages)
                    self.layer_three_messages.show()
                    openedWindows.append(layer_three_widget)

                # if hasattr(self, 'layer_three_messages') is False:
                #     # self.layer_three_messages = TableWindow(self, windowName)
                #     self.layer_three_messages = TableWindow(self.mdi, windowName)
                # openedWindows.append(self.layer_three_messages)
                # self.mdi.addSubWindow(self.layer_three_messages)
                # self.layer_three_messages.show()
                # self.layer_three_messages.activateWindow()
            elif child == "Benchmark":
                if hasattr(self, 'benchmark') is True:
                    tableWindow = self.benchmark.findChild(QWidget, windowName)
                    if not tableWindow:
                        benchmark_widget = TableWindow(self.benchmark, windowName)
                        openedWindows.append(benchmark_widget)

                    if self.benchmark not in subwindowList:
                        self.benchmark = QMdiSubWindow(self.mdi)
                        self.mdi.addSubWindow(self.benchmark)
                    if tableWindow:
                        self.benchmark.setWidget(benchmark_widget)
                    self.benchmark.show()

                else:
                    # create new subwindow
                    self.benchmark = QMdiSubWindow(self.mdi)
                    benchmark_widget = TableWindow(self.benchmark, windowName)
                    self.benchmark.setWidget(benchmark_widget)
                    self.mdi.addSubWindow(self.benchmark)
                    self.benchmark.show()
                    openedWindows.append(benchmark_widget)

                # if hasattr(self, 'benchmark') is False:
                #     # self.benchmark = TableWindow(self, windowName)
                #     self.benchmark = TableWindow(self.mdi, windowName)
                # openedWindows.append(self.benchmark)
                # self.mdi.addSubWindow(self.benchmark)
                # self.benchmark.show()
                # self.benchmark.activateWindow()
            elif child == "MM Reg States":
                if hasattr(self, 'mm_reg_states') is True:
                    tableWindow = self.mm_reg_states.findChild(QWidget, windowName)
                    if not tableWindow:
                        mm_widget = TableWindow(self.mm_reg_states, windowName)
                        openedWindows.append(mm_widget)

                    if self.mm_reg_states not in subwindowList:
                        self.mm_reg_states = QMdiSubWindow(self.mdi)
                        self.mdi.addSubWindow(self.mm_reg_states)

                    self.mm_reg_states.setWidget(mm_widget)
                    self.mm_reg_states.show()

                else:
                    # create new subwindow
                    self.mm_reg_states = QMdiSubWindow(self.mdi)
                    mm_widget = TableWindow(self.mm_reg_states, windowName)
                    self.mm_reg_states.setWidget(mm_widget)
                    self.mdi.addSubWindow(self.mm_reg_states)
                    self.mm_reg_states.show()
                    openedWindows.append(mm_widget)

                # if hasattr(self, 'mm_reg_states') is False:
                #     # self.mm_reg_states = TableWindow(self, windowName)
                #     self.mm_reg_states = TableWindow(self.mdi, windowName)
                # openedWindows.append(self.mm_reg_states)
                # self.mdi.addSubWindow(self.mm_reg_states)
                # self.mm_reg_states.show()
                # self.mm_reg_states.activateWindow()
            elif child == "Serving System Info":
                if hasattr(self, 'serving_system_info') is True:
                    tableWindow = self.serving_system_info.findChild(QWidget, windowName)
                    if not tableWindow:
                        serving_system_widget = TableWindow(self.serving_system_info, windowName)
                        openedWindows.append(serving_system_widget)

                    if self.serving_system_info not in subwindowList:
                        self.serving_system_info = QMdiSubWindow(self.mdi)
                        self.mdi.addSubWindow(self.serving_system_info)

                    self.serving_system_info.setWidget(serving_system_widget)
                    self.serving_system_info.show()

                else:
                    # create new subwindow
                    self.serving_system_info = QMdiSubWindow(self.mdi)
                    serving_system_widget = TableWindow(self.serving_system_info, windowName)
                    self.serving_system_info.setWidget(serving_system_widget)
                    self.mdi.addSubWindow(self.serving_system_info)
                    self.serving_system_info.show()
                    openedWindows.append(serving_system_widget)

                # if hasattr(self, 'serving_system_info') is False:
                #     # self.serving_system_info = TableWindow(self, windowName)
                #     self.serving_system_info = TableWindow(self.mdi, windowName)
                # openedWindows.append(self.serving_system_info)
                # self.mdi.addSubWindow(self.serving_system_info)
                # self.serving_system_info.show()
                # self.serving_system_info.activateWindow()
            elif child == "Debug Android/Event":
                if hasattr(self, 'debug_event') is True:
                    tableWindow = self.debug_event.findChild(QWidget, windowName)
                    if not tableWindow:
                        debug_event_widget = TableWindow(self.debug_event, windowName)
                        openedWindows.append(debug_event_widget)

                    if self.debug_event not in subwindowList:
                        self.debug_event = QMdiSubWindow(self.mdi)
                        self.mdi.addSubWindow(self.debug_event)

                    self.debug_event.setWidget(debug_event_widget)
                    self.debug_event.show()

                else:
                    # create new subwindow
                    self.debug_event = QMdiSubWindow(self.mdi)
                    debug_event_widget = TableWindow(self.debug_event, windowName)
                    self.debug_event.setWidget(debug_event_widget)
                    self.mdi.addSubWindow(self.debug_event)
                    self.debug_event.show()
                    openedWindows.append(debug_event_widget)

                # if hasattr(self, 'debug_event') is False:
                #     # self.debug_event = TableWindow(self, windowName)
                #     self.debug_event = TableWindow(self.mdi, windowName)
                # openedWindows.append(self.debug_event)
                # self.mdi.addSubWindow(self.debug_event)
                # self.debug_event.show()
                # self.debug_event.activateWindow()
        # if parent == ''
        # elif parent == "Positioning":
        #     if child == "GPS":
        #         print("1")
        #     elif child == "Map":
        #         print("2")
        #     elif child == "Positioning":
        #         print("3")
        # elif parent == "Customized Window":
        #     if child == "Status Window":
        #         print("1")
        #     elif child == "Message Window":
        #         print("2")
        #     elif child == "Line Chart":
        #         print("3")
        # elif parent == "NB-IoT":
        #     if child == "NB-IoT Radio Parameters Window":
        #         print("1")
        if self.mdi:
            self.mdi.show()

    def selectConfiguration(self):
        getSelected = self.configurationTreeWidget.selectedItems()
        if getSelected:
            baseNode = getSelected[0]
            if baseNode.text(0) is not None:
                getChildNode = baseNode.text(0)
                if getChildNode == 'Cell Information':
                    self.cell_information = CellInformation(self)
                    self.cell_information.show()
                elif getChildNode == 'Equipment Configuration':
                    pass

    def closeEvents(self):
        self.timeSliderThread.exit()

    def reject(self):
        # QgsMessageLog.logMessage('Close App')
        # clearAllSelectedFeatures()
        # QgsProject.removeAllMapLayers(QgsProject.instance())
        self.mdi.close()
        if len(openedWindows) > 0:
            for window in openedWindows:
                window.close()
        super().reject()
        del self.databaseUi
        del self


class TimeSlider(QSlider):
    def __init__(self, parent=None):
        super().__init__(parent)

        # Set integer max and min on parent. These stay constant.
        # self._min_int = minTimeValue
        super().setMinimum(0)
        self._max_int = sliderLength
        super().setMaximum(self._max_int)
        # The "actual" min and max values seen by user.
        self._min_value = 0.0
        self._max_value = self._max_int

    @property
    def _value_range(self):
        return self._max_value - self._min_value

    def value(self):
        thisValue = float(super().value())
        value = thisValue / self._max_int * self._value_range
        return value

    def setValue(self, value):
        resultValue = int(value / self._value_range * self._max_int)
        super().setValue(resultValue)
        # super().repaint()

    def setMinimum(self, value):
        self.setRange(value, self._max_value)

    def setMaximum(self, value):
        self.setRange(self._min_value, value)

    def setRange(self, minimum, maximum):
        old_value = self.value()
        self._min_value = minimum
        self._max_value = maximum
        self.setValue(old_value)  # Put slider in correct position

    def proportion(self):
        return (self.value() - self._min_value) / self._value_range


class TableWindow(QWidget):
    def __init__(self, parent, windowName):
        super().__init__(parent)
        self.title = windowName
        self.tablename = ''
        self.tableHeader = None
        self.left = 10
        self.top = 10
        self.width = 640
        self.height = 480
        self.dataList = []
        self.currentRow = 0
        self.dateString = ''
        self.tableViewCount = 0
        self.setupUi()

    def setupUi(self):
        self.setObjectName(self.title)
        self.setWindowTitle(self.title)
        self.setAttribute(Qt.WA_DeleteOnClose)
        self.tableView = QTableView(self)
        self.tableView.horizontalHeader().setSortIndicator(
            -1, Qt.AscendingOrder)
        self.specifyTablesHeader()
        layout = QVBoxLayout(self)
        layout.addWidget(self.tableView)
        # self.setFixedWidth(layout.sizeHint())
        self.setLayout(layout)
        self.show()

    def setTableModel(self, dataList):
        self.tableModel = TableModel(dataList, self.tableHeader, self)
        self.proxyModel = QtCore.QSortFilterProxyModel()
        self.proxyModel.setSourceModel(self.tableModel)
        self.tableView.setModel(self.proxyModel)
        self.tableView.setSortingEnabled(True)
        self.tableView.resizeColumnsToContents()

    def specifyTablesHeader(self):
        # TODO: Add table when open table window
        if self.title is not None:
            # WCDMA
            if self.title == 'WCDMA_Active + Monitored Sets':
                self.tableHeader = [
                    "Time", "CellName", "CellType", "SC", "Ec/Io", "RSCP",
                    "Freq", "Event"
                ]
                self.dataList = WcdmaDataQuery(
                    azenqosDatabase,
                    currentDateTimeString).getActiveMonitoredSets()
            elif self.title == 'WCDMA_Radio Parameters':
                self.tableHeader = ["Element", "Value"]
                self.dataList = WcdmaDataQuery(
                    azenqosDatabase,
                    currentDateTimeString).getRadioParameters()
            elif self.title == 'WCDMA_Active Set List':
                self.tableHeader = [
                    "Time", "Freq", "PSC", "Cell Position", "Cell TPC",
                    "Diversity"
                ]
                self.dataList = WcdmaDataQuery(
                    azenqosDatabase, currentDateTimeString).getActiveSetList()
            elif self.title == 'WCDMA_Monitored Set List':
                self.tableHeader = [
                    "Time", "Freq", "PSC", "Cell Position", "Diversity"
                ]
                self.dataList = WcdmaDataQuery(
                    azenqosDatabase,
                    currentDateTimeString).getMonitoredSetList()
            elif self.title == 'WCDMA_BLER Summary':
                self.tableHeader = ["Element", "Value"]
                self.dataList = WcdmaDataQuery(
                    azenqosDatabase, currentDateTimeString).getBlerSummary()
            elif self.title == 'WCDMA_BLER / Transport Channel':
                self.tableHeader = [
                    "Transport Channel", "Percent", "Err", "Rcvd"
                ]
                self.dataList = WcdmaDataQuery(
                    azenqosDatabase,
                    currentDateTimeString).getBLER_TransportChannel()
            elif self.title == 'WCDMA_Line Chart':
                self.tableHeader = ["Element", "Value", "MS", "Color"]
            elif self.title == 'WCDMA_Bearers':
                self.tableHeader = [
                    "N Bearers", "Bearers ID", "Bearers Rate DL",
                    "Bearers Rate UL"
                ]
                self.dataList = WcdmaDataQuery(
                    azenqosDatabase, currentDateTimeString).getBearers()
            elif self.title == 'WCDMA_Pilot Poluting Cells':
                self.tableHeader = ["Time", "N Cells", "SC", "RSCP", "Ec/Io"]
                self.dataList = WcdmaDataQuery(
                    azenqosDatabase,
                    currentDateTimeString).getPilotPolutingCells()
            elif self.title == 'WCDMA_Active + Monitored Bar':
                self.tableHeader = ["Cell Type", "Ec/Io", "RSCP"]
                self.dataList = WcdmaDataQuery(
                    azenqosDatabase,
                    currentDateTimeString).getActiveMonitoredBar()
            elif self.title == 'WCDMA_CM GSM Reports':
                self.tableHeader = ["Time", "", "Eq.", "Name", "Info."]

            elif self.title == 'WCDMA_CM GSM Cells':
                self.tableHeader = [
                    "Time", "ARFCN", "RxLev", "BSIC", "Measure"
                ]
                self.dataList = WcdmaDataQuery(
                    azenqosDatabase, currentDateTimeString).getCmGsmCells()
            elif self.title == 'WCDMA_Pilot Analyzer':
                self.tableHeader = ["Element", "Value", "Cell Type", "Color"]

            # LTE
            elif self.title == 'LTE_Radio Parameters':
                self.tableHeader = ["Element", "PCC", "SCC0", "SCC1"]
                self.dataList = LteDataQuery(
                    azenqosDatabase,
                    currentDateTimeString).getRadioParameters()
            elif self.title == 'LTE_Serving + Neighbors':
                self.tableHeader = [
                    "Time", "EARFCN", "Band", "PCI", "RSRP", "RSRQ"
                ]
                self.dataList = LteDataQuery(
                    azenqosDatabase,
                    currentDateTimeString).getServingAndNeighbors()
            elif self.title == 'LTE_PUCCH/PDSCH Parameters':
                self.tableHeader = ["Element", "Value"]
                self.dataList = LteDataQuery(
                    azenqosDatabase,
                    currentDateTimeString).getPucchPdschParameters()
            elif self.title == 'LTE_LTE Line Chart':
                self.tableHeader = ["Element", "Value", "MS", "Color"]
            elif self.title == 'LTE_LTE RLC':
                self.tableHeader = ["Element", "Value", "", "", ""]
                self.dataList = LteDataQuery(azenqosDatabase,
                                             currentDateTimeString).getRlc()
            elif self.title == 'LTE_LTE VoLTE':
                self.tableHeader = ["Element", "Value"]
                self.dataList = LteDataQuery(azenqosDatabase,
                                             currentDateTimeString).getVolte()

            # CDMA/EVDO
            elif self.title == 'CDMA/EVDO_Radio Parameters':
                self.tableHeader = ["Element", "Value"]
                self.dataList = CdmaEvdoQuery(
                    azenqosDatabase,
                    currentDateTimeString).getRadioParameters()
            elif self.title == 'CDMA/EVDO_Serving + Neighbors':
                self.tableHeader = ["Time", "PN", "Ec/Io", "Type"]
                self.dataList = CdmaEvdoQuery(
                    azenqosDatabase,
                    currentDateTimeString).getServingAndNeighbors()
            elif self.title == 'CDMA/EVDO_EVDO Parameters':
                self.tableHeader = ["Element", "Value"]
                self.dataList = CdmaEvdoQuery(
                    azenqosDatabase,
                    currentDateTimeString).getEvdoParameters()

            # Data
            elif self.title == 'Data_GSM Data Line Chart':
                self.tableHeader = ["Element", "Value", "MS", "Color"]
            elif self.title == 'Data_WCDMA Data Line Chart':
                self.tableHeader = ["Element", "Value", "MS", "Color"]
            elif self.title == 'Data_GPRS/EDGE Information':
                self.tableHeader = ["Element", "Value"]
            elif self.title == 'Data_Web Browser':
                self.tableHeader = ["Type", "Object"]
                self.windowHeader = ["ID", "URL", "Type", "State", "Size(%)"]
            elif self.title == 'Data_HSDPA/HSPA + Statistics':
                self.tableHeader = ["Element", "Value"]
            elif self.title == 'Data_HSUPA Statistics':
                self.tableHeader = ["Element", "Value"]
            elif self.title == 'Data_LTE Data Statistics':
                self.tableHeader = ["Element", "Value", "", ""]
            elif self.title == 'Data_LTE Data Line Chart':
                self.tableHeader = ["Element", "Value", "MS", "Color"]
            elif self.title == 'Data_Wifi Connected AP':
                self.tableHeader = ["Element", "Value"]
            elif self.title == 'Data_Wifi Scanned APs':
                self.tableHeader = [
                    "Time", "BSSID", "SSID", "Freq", "Ch.", "Level",
                    "Encryption"
                ]
            elif self.title == 'Data_Wifi Graph':
                return False

            # Signaling
            elif self.title == 'Signaling_Events':
                self.tableHeader = ["Time", "", "Eq.", "Name", "Info."]
                self.tablename = 'events'
                self.dataList = SignalingDataQuery(
                    azenqosDatabase, currentDateTimeString).getEvents()

            elif self.title == 'Signaling_Layer 1 Messages':
                self.tableHeader = ["Time", "", "Eq.", "Name", "Info."]
                self.tablename = 'events'
                self.dataList = SignalingDataQuery(
                    azenqosDatabase,
                    currentDateTimeString).getLayerOneMessages()
            elif self.title == 'Signaling_Layer 3 Messages':
                self.tableHeader = ["Time", "", "Eq.", "", "Name", "Info."]
                self.tablename = 'signalling'
                self.dataList = SignalingDataQuery(
                    azenqosDatabase,
                    currentDateTimeString).getLayerThreeMessages()
            elif self.title == 'Signaling_Benchmark':
                self.tableHeader = ["", "MS1", "MS2", "MS3", "MS4"]
                # self.tablename = 'signalling'
                self.dataList = SignalingDataQuery(
                    azenqosDatabase, currentDateTimeString).getBenchmark()
            elif self.title == 'Signaling_MM Reg States':
                self.tableHeader = ["Element", "Value"]
                self.tablename = 'mm_state'
                self.dataList = SignalingDataQuery(
                    azenqosDatabase, currentDateTimeString).getMmRegStates()
            elif self.title == 'Signaling_Serving System Info':
                self.tableHeader = ["Element", "Value"]
                self.tablename = 'serving_system'
                self.dataList = SignalingDataQuery(
                    azenqosDatabase,
                    currentDateTimeString).getServingSystemInfo()
            elif self.title == 'Signaling_Debug Android/Event':
                self.tableHeader = ["Element", "Value"]
                # self.tablename = 'serving_system'
                self.dataList = SignalingDataQuery(
                    azenqosDatabase,
                    currentDateTimeString).getDebugAndroidEvent()

            if self.dataList is not None:
                self.setTableModel(self.dataList)
                self.tableViewCount = self.tableView.model().rowCount()

            if self.tablename and self.tablename != "":
                global tableList
                if not self.tablename in tableList:
                    tableList.append(self.tablename)

    def hilightRow(self, sampledate):
        # QgsMessageLog.logMessage('[-- Start hilight row --]', tag="Processing")
        # start_time = time.time()
        self.dateString = str(sampledate)
        # self.findCurrentRow()
        if not self.dataList or self.title not in ['Signaling_Events', 'Signaling_Layer 1 Messages', 'Signaling_Layer 3 Messages']:
            worker = Worker(self.specifyTablesHeader())
            threadpool.start(worker)
            # self.specifyTablesHeader()
        else:
            self.findCurrentRow()
            # self.findCurrentRow()
        # elapse_time = time.time() - start_time
        # del worker
        # QgsMessageLog.logMessage('Hilight rows elapse time: {0} s.'.format(str(elapse_time)), tag="Processing")
        # QgsMessageLog.logMessage('[-- End hilight row --]', tag="Processing")

    # def hilightRowProcesses(self):


    def findCurrentRow(self):
        startRange = 0

        if self.currentRow and isSliderPlay == True:
            startRange = self.currentRow

        for row in range(startRange , self.tableViewCount):
            index = self.tableView.model().index(row, 0)
            value = self.tableView.model().data(index)
            if value and index:
                if value >= self.dateString:
                    if isSliderPlay == True:
                        self.tableView.selectRow(self.currentRow)
                    else:
                        self.tableView.selectRow(row - 1)
                    self.currentRow = row - 1
                    break

    def closeEvent(self, QCloseEvent):
        global openedWindows
        global tableList
        if self in openedWindows:
            openedWindows.remove(self)
        if self.tablename and self.tablename in tableList:
            tableList.remove(self.tablename)
        self.close()
        del self


class TableModel(QAbstractTableModel):
    def __init__(self, inputData, header, parent=None, *args):
        QAbstractTableModel.__init__(self, parent, *args)
        self.headerLabels = header
        self.dataSource = inputData
        # self.testColumnValue()

    def rowCount(self, parent):
        rows = 0
        if self.dataSource:
            rows = len(self.dataSource)
        return rows

    def columnCount(self, parent):
        columns = 0
        if self.headerLabels:
            columns = len(self.headerLabels)
        return columns

    def data(self, index, role):
        if not index.isValid():
            return QVariant()
        elif role != Qt.DisplayRole:
            return QVariant()
        return QVariant(self.dataSource[index.row()][index.column()])

    def headerData(self, section, orientation, role=Qt.DisplayRole):
        if role == Qt.DisplayRole and orientation == Qt.Horizontal:
            return self.headerLabels[section]
        return QAbstractTableModel.headerData(self, section, orientation, role)


class DataQuery:
    def __init__(self, windowName):
        self.windowName = windowName
        self.timeFilter = currentTimestamp

    def getGprsEdgeInformation(self):
        if azenqosDatabase is not None:
            azenqosDatabase.open()
        query = QSqlQuery()
        query.exec_("SELECT * FROM events")
        timeField = query.record().indexOf("time")
        nameField = query.record().indexOf("name")
        detailField = query.record().indexOf("info")
        dataList = []
        while query.next():
            timeValue = query.value(timeField)
            nameValue = query.value(nameField)
            detailStrValue = query.value(detailField)
            dataList.append([timeValue, '', nameValue, detailStrValue])
        azenqosDatabase.close()
        return dataList

    def getHsdpaHspaStatistics(self):
        if azenqosDatabase is not None:
            azenqosDatabase.open()
        query = QSqlQuery()
        query.exec_("SELECT * FROM events")
        timeField = query.record().indexOf("time")
        nameField = query.record().indexOf("name")
        detailField = query.record().indexOf("info")
        dataList = []
        while query.next():
            timeValue = query.value(timeField)
            nameValue = query.value(nameField)
            detailStrValue = query.value(detailField)
            dataList.append([timeValue, '', nameValue, detailStrValue])
        azenqosDatabase.close()
        return dataList

    def getHsupaStatistics(self):
        if azenqosDatabase is not None:
            azenqosDatabase.open()
        query = QSqlQuery()
        query.exec_("SELECT * FROM events")
        timeField = query.record().indexOf("time")
        nameField = query.record().indexOf("name")
        detailField = query.record().indexOf("info")
        dataList = []
        while query.next():
            timeValue = query.value(timeField)
            nameValue = query.value(nameField)
            detailStrValue = query.value(detailField)
            dataList.append([timeValue, '', nameValue, detailStrValue])
        azenqosDatabase.close()
        return dataList

    def getLteDataStatistics(self):
        if azenqosDatabase is not None:
            azenqosDatabase.open()
        query = QSqlQuery()
        query.exec_("SELECT * FROM events")
        timeField = query.record().indexOf("time")
        nameField = query.record().indexOf("name")
        detailField = query.record().indexOf("info")
        dataList = []
        while query.next():
            timeValue = query.value(timeField)
            nameValue = query.value(nameField)
            detailStrValue = query.value(detailField)
            dataList.append([timeValue, '', nameValue, detailStrValue])
        azenqosDatabase.close()
        return dataList

    def getWifiConnectedAp(self):
        if azenqosDatabase is not None:
            azenqosDatabase.open()
        query = QSqlQuery()
        query.exec_("SELECT * FROM events")
        timeField = query.record().indexOf("time")
        nameField = query.record().indexOf("name")
        detailField = query.record().indexOf("info")
        dataList = []
        while query.next():
            timeValue = query.value(timeField)
            nameValue = query.value(nameField)
            detailStrValue = query.value(detailField)
            dataList.append([timeValue, '', nameValue, detailStrValue])
        azenqosDatabase.close()
        return dataList

    def getWifiScannedAps(self):
        if azenqosDatabase is not None:
            azenqosDatabase.open()
        query = QSqlQuery()
        query.exec_("SELECT * FROM events")
        timeField = query.record().indexOf("time")
        nameField = query.record().indexOf("name")
        detailField = query.record().indexOf("info")
        dataList = []
        while query.next():
            timeValue = query.value(timeField)
            nameValue = query.value(nameField)
            detailStrValue = query.value(detailField)
            dataList.append([timeValue, '', nameValue, detailStrValue])
        azenqosDatabase.close()
        return dataList

    def getWifiGraph(self):
        if azenqosDatabase is not None:
            azenqosDatabase.open()
        query = QSqlQuery()
        query.exec_("SELECT * FROM events")
        timeField = query.record().indexOf("time")
        nameField = query.record().indexOf("name")
        detailField = query.record().indexOf("info")
        dataList = []
        while query.next():
            timeValue = query.value(timeField)
            nameValue = query.value(nameField)
            detailStrValue = query.value(detailField)
            dataList.append([timeValue, '', nameValue, detailStrValue])
        azenqosDatabase.close()
        return dataList


# LTE Line Chart UI

# class DataQuery:
#     def __inti__(self, fieldArr, tableName, conditionStr):
#         self.fieldArr = fieldArr
#         self.tableName = tableName
#         self.condition = conditionStr

#     def countField(self):
#         fieldCount = 0
#         if self.fieldArr is not None:
#             fieldCount = len(self.fieldArr)
#         return fieldCount

#     def selectFieldToQuery(self):
#         selectField = '*'
#         if self.fieldArr is not None:
#             selectField = ",".join(self.fieldArr)
#         return selectField

#     def getData(self):
#         result = dict()
#         selectField = self.selectFieldToQuery()
#         azenqosDatabase.open()
#         query = QSqlQuery()
#         queryString = 'select %s from %s' % (selectField, self.tableName)
#         query.exec_(queryString)
#         while query.next():
#             for field in range(len(self.fieldArr)):
#                 fieldName = fieldArr[field]
#                 validatedValue = self.valueValidation(query.value(field))
#                 if fieldName in result:
#                     if isinstance(result[fieldName], list):
#                         result[fieldName].append(validatedValue)
#                     else:
#                         result[fieldName] = [validatedValue]
#                 else:
#                     result[fieldName] = [validatedValue]
#         azenqosDatabase.close()
#         return result

#     def valueValidation(self, value):
#         validatedValue = 0
#         if value is not None:
#             validatedValue = value
#         return validatedValue


class CellInformation(QDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setupUi(self)

    def setupUi(self, CellInformation):
        CellInformation.setObjectName("Cell Information")
        CellInformation.resize(640, 522)
        CellInformation.setGeometry(QtCore.QRect(0, 0, 640, 522))
        CellInformation.setMinimumSize(640, 522)
        self.verticalLayoutWidget = QtWidgets.QWidget(CellInformation)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(0, 320, 601, 151))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.SettingLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.SettingLayout.setContentsMargins(10, 10, 10, 10)
        self.SettingLayout.setObjectName("SettingLayout")
        self.Setting = QtWidgets.QGroupBox(self.verticalLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred,
                                           QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(
            self.Setting.sizePolicy().hasHeightForWidth())
        self.Setting.setSizePolicy(sizePolicy)
        self.Setting.setMinimumSize(QtCore.QSize(0, 0))
        font = QtGui.QFont()
        font.setPointSize(13)
        self.Setting.setFont(font)
        self.Setting.setAlignment(QtCore.Qt.AlignLeading | QtCore.Qt.AlignLeft
                                  | QtCore.Qt.AlignTop)
        self.Setting.setObjectName("Setting")
        self.OpacityCheckbox = QtWidgets.QCheckBox(self.Setting)
        self.OpacityCheckbox.setGeometry(QtCore.QRect(30, 30, 86, 31))
        self.OpacityCheckbox.setObjectName("OpacityCheckbox")
        self.PercentageCombobox = QtWidgets.QComboBox(self.Setting)
        self.PercentageCombobox.setGeometry(QtCore.QRect(100, 30, 71, 31))
        self.PercentageCombobox.setObjectName("PercentageCombobox")
        self.PercentageLabel = QtWidgets.QLabel(self.Setting)
        self.PercentageLabel.setGeometry(QtCore.QRect(170, 30, 21, 31))
        self.PercentageLabel.setObjectName("PercentageLabel")
        self.CellDefinitionLabel = QtWidgets.QLabel(self.Setting)
        self.CellDefinitionLabel.setGeometry(QtCore.QRect(30, 70, 121, 16))
        self.CellDefinitionLabel.setObjectName("CellDefinitionLabel")
        self.CellDefinitionCombobox = QtWidgets.QComboBox(self.Setting)
        self.CellDefinitionCombobox.setGeometry(QtCore.QRect(160, 60, 121, 41))
        self.CellDefinitionCombobox.setObjectName("CellDefinitionCombobox")
        self.SearchCellDistanceLabel = QtWidgets.QLabel(self.Setting)
        self.SearchCellDistanceLabel.setGeometry(QtCore.QRect(
            30, 100, 131, 16))
        self.SearchCellDistanceLabel.setObjectName("SearchCellDistanceLabel")
        self.KiloAmount = QtWidgets.QLineEdit(self.Setting)
        self.KiloAmount.setGeometry(QtCore.QRect(180, 100, 61, 21))
        self.KiloAmount.setObjectName("KiloAmount")
        self.KilometerLabel = QtWidgets.QLabel(self.Setting)
        self.KilometerLabel.setGeometry(QtCore.QRect(260, 100, 59, 16))
        self.KilometerLabel.setObjectName("KilometerLabel")
        self.SettingLayout.addWidget(self.Setting)
        self.verticalLayoutWidget_2 = QtWidgets.QWidget(CellInformation)
        self.verticalLayoutWidget_2.setGeometry(QtCore.QRect(0, 0, 601, 321))
        self.verticalLayoutWidget_2.setObjectName("verticalLayoutWidget_2")
        self.CellLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_2)
        self.CellLayout.setContentsMargins(10, 20, 10, 10)
        self.CellLayout.setObjectName("CellLayout")
        self.CellDefinitionFile = QtWidgets.QGroupBox(
            self.verticalLayoutWidget_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred,
                                           QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(
            self.CellDefinitionFile.sizePolicy().hasHeightForWidth())
        self.CellDefinitionFile.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(13)
        self.CellDefinitionFile.setFont(font)
        self.CellDefinitionFile.setObjectName("CellDefinitionFile")
        self.FilePath4 = QtWidgets.QLineEdit(self.CellDefinitionFile)
        self.FilePath4.setGeometry(QtCore.QRect(110, 270, 341, 21))
        self.FilePath4.setObjectName("FilePath4")
        self.CdmaCellFileCheckbox = QtWidgets.QCheckBox(
            self.CellDefinitionFile)
        self.CdmaCellFileCheckbox.setGeometry(QtCore.QRect(30, 240, 151, 20))
        self.CdmaCellFileCheckbox.setObjectName("CdmaCellFileCheckbox")
        self.LteCellFileCheckbox = QtWidgets.QCheckBox(self.CellDefinitionFile)
        self.LteCellFileCheckbox.setGeometry(QtCore.QRect(30, 170, 131, 20))
        self.LteCellFileCheckbox.setObjectName("LteCellFileCheckbox")
        self.FilePath2 = QtWidgets.QLineEdit(self.CellDefinitionFile)
        self.FilePath2.setGeometry(QtCore.QRect(110, 130, 341, 21))
        self.FilePath2.setObjectName("FilePath2")
        self.FilenameLabel1 = QtWidgets.QLabel(self.CellDefinitionFile)
        self.FilenameLabel1.setGeometry(QtCore.QRect(40, 60, 59, 16))
        self.FilenameLabel1.setObjectName("FilenameLabel1")
        self.FilenameLabel4 = QtWidgets.QLabel(self.CellDefinitionFile)
        self.FilenameLabel4.setGeometry(QtCore.QRect(40, 270, 59, 16))
        self.FilenameLabel4.setObjectName("FilenameLabel4")
        self.WcdmaCellFileCheckbox = QtWidgets.QCheckBox(
            self.CellDefinitionFile)
        self.WcdmaCellFileCheckbox.setGeometry(QtCore.QRect(30, 100, 161, 20))
        self.WcdmaCellFileCheckbox.setObjectName("WcdmaCellFileCheckbox")
        self.FilePath1 = QtWidgets.QLineEdit(self.CellDefinitionFile)
        self.FilePath1.setGeometry(QtCore.QRect(110, 60, 341, 21))
        self.FilePath1.setObjectName("FilePath1")
        self.FilePath3 = QtWidgets.QLineEdit(self.CellDefinitionFile)
        self.FilePath3.setGeometry(QtCore.QRect(110, 200, 341, 21))
        self.FilePath3.setObjectName("FilePath3")
        self.FilenameLabel3 = QtWidgets.QLabel(self.CellDefinitionFile)
        self.FilenameLabel3.setGeometry(QtCore.QRect(40, 200, 59, 16))
        self.FilenameLabel3.setObjectName("FilenameLabel3")
        self.GsmCellFileCheckbox = QtWidgets.QCheckBox(self.CellDefinitionFile)
        self.GsmCellFileCheckbox.setGeometry(QtCore.QRect(30, 30, 141, 20))
        self.GsmCellFileCheckbox.setObjectName("GsmCellFileCheckbox")
        self.FilenameLabel2 = QtWidgets.QLabel(self.CellDefinitionFile)
        self.FilenameLabel2.setGeometry(QtCore.QRect(40, 130, 59, 16))
        self.FilenameLabel2.setObjectName("FilenameLabel2")
        self.BrowseButton1 = QtWidgets.QToolButton(self.CellDefinitionFile)
        self.BrowseButton1.setGeometry(QtCore.QRect(460, 60, 51, 22))
        self.BrowseButton1.setObjectName("BrowseButton1")
        self.BrowseButton2 = QtWidgets.QToolButton(self.CellDefinitionFile)
        self.BrowseButton2.setGeometry(QtCore.QRect(460, 130, 51, 22))
        self.BrowseButton2.setObjectName("BrowseButton2")
        self.BrowseButton3 = QtWidgets.QToolButton(self.CellDefinitionFile)
        self.BrowseButton3.setGeometry(QtCore.QRect(460, 200, 51, 22))
        self.BrowseButton3.setObjectName("BrowseButton3")
        self.BrowseButton4 = QtWidgets.QToolButton(self.CellDefinitionFile)
        self.BrowseButton4.setGeometry(QtCore.QRect(460, 270, 51, 22))
        self.BrowseButton4.setObjectName("BrowseButton4")
        self.CellLayout.addWidget(self.CellDefinitionFile)
        self.verticalLayoutWidget_3 = QtWidgets.QWidget(CellInformation)
        self.verticalLayoutWidget_3.setGeometry(QtCore.QRect(0, 470, 601, 55))
        self.verticalLayoutWidget_3.setObjectName("verticalLayoutWidget_3")
        self.ButtonLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_3)
        self.ButtonLayout.setContentsMargins(10, 10, 10, 10)
        self.ButtonLayout.setObjectName("ButtonLayout")
        self.buttonBox = QtWidgets.QDialogButtonBox(
            self.verticalLayoutWidget_3)
        self.buttonBox.setStandardButtons(QtWidgets.QDialogButtonBox.Ok
                                          | QtWidgets.QDialogButtonBox.Cancel)
        self.buttonBox.setObjectName("buttonBox")
        self.ButtonLayout.addWidget(self.buttonBox)

        self.BrowseButton1.clicked.connect(lambda: self.browseFile('1'))
        self.BrowseButton2.clicked.connect(lambda: self.browseFile('2'))
        self.BrowseButton3.clicked.connect(lambda: self.browseFile('3'))
        self.BrowseButton4.clicked.connect(lambda: self.browseFile('4'))

        self.retranslateUi(CellInformation)
        QtCore.QMetaObject.connectSlotsByName(CellInformation)

    def retranslateUi(self, CellInformation):
        _translate = QtCore.QCoreApplication.translate
        CellInformation.setWindowTitle(
            _translate("CellInformation", "Cell Information"))
        self.Setting.setTitle(_translate("CellInformation", "Setting"))
        self.OpacityCheckbox.setText(_translate("CellInformation", "Opacity"))
        self.PercentageLabel.setText(_translate("CellInformation", "%"))
        self.CellDefinitionLabel.setText(
            _translate("CellInformation", "Cell Definition Text"))
        self.SearchCellDistanceLabel.setText(
            _translate("CellInformation", "Search Cell Distance"))
        self.KilometerLabel.setText(_translate("CellInformation", "Kilometer"))
        self.CellDefinitionFile.setTitle(
            _translate("CellInformation", "Cell definition file"))
        self.CdmaCellFileCheckbox.setText(
            _translate("CellInformation", "Use CDMA cell file"))
        self.LteCellFileCheckbox.setText(
            _translate("CellInformation", "Use LTE cell file"))
        self.FilenameLabel1.setText(_translate("CellInformation", "Filename"))
        self.FilenameLabel4.setText(_translate("CellInformation", "Filename"))
        self.WcdmaCellFileCheckbox.setText(
            _translate("CellInformation", "Use WCDMA cell file"))
        self.FilenameLabel3.setText(_translate("CellInformation", "Filename"))
        self.GsmCellFileCheckbox.setText(
            _translate("CellInformation", "Use GSM cell file"))
        self.FilenameLabel2.setText(_translate("CellInformation", "Filename"))
        self.BrowseButton1.setText(_translate("CellInformation", "Browse"))
        self.BrowseButton2.setText(_translate("CellInformation", "Browse"))
        self.BrowseButton3.setText(_translate("CellInformation", "Browse"))
        self.BrowseButton4.setText(_translate("CellInformation", "Browse"))

    def browseFile(self, buttonNo):
        if buttonNo == '1':
            fileName, _ = QFileDialog.getOpenFileName(self, 'Single File',
                                                      QtCore.QDir.rootPath(),
                                                      '*.cel')
            if fileName != "":
                baseFileName = os.path.basename(str(fileName))
                self.FilePath1.setText(fileName)
            return False
        elif buttonNo == '2':
            fileName, _ = QFileDialog.getOpenFileName(self, 'Single File',
                                                      QtCore.QDir.rootPath(),
                                                      '*.cel')
            if fileName != "":
                baseFileName = os.path.basename(str(fileName))
                self.FilePath2.setText(fileName)
            return False
        elif buttonNo == '3':
            fileName, _ = QFileDialog.getOpenFileName(self, 'Single File',
                                                      QtCore.QDir.rootPath(),
                                                      '*.cel')
            if fileName != "":
                baseFileName = os.path.basename(str(fileName))
                self.FilePath3.setText(fileName)
            return False
        elif buttonNo == '4':
            fileName, _ = QFileDialog.getOpenFileName(self, 'Single File',
                                                      QtCore.QDir.rootPath(),
                                                      '*.cel')
            if fileName != "":
                baseFileName = os.path.basename(str(fileName))
                self.FilePath4.setText(fileName)
            return False
        return False


class TimeSliderThread(QThread):
    changeValue = pyqtSignal(float)

    def __init__(self):
        QThread.__init__(self)
        self.currentSliderValue = None

    def __del__(self):
        self.wait()

    def run(self):
        self.playTime()

    def playTime(self):
        timeSlider.setDisabled(True)
        global isSliderPlay
        # isSliderPlay = True
        if isSliderPlay:
            if self.currentSliderValue:
                for x in range(int(self.currentSliderValue), int(sliderLength)):
                    if not isSliderPlay:
                        break
                    else:
                        self.sleep(1)
                        value = timeSlider.value() + 1
                        self.changeValue.emit(value)

                    if x >= int(sliderLength):
                        isSliderPlay = False
                        break
            else:
                for x in range(int(sliderLength)):
                    if not isSliderPlay:
                        break
                    else:
                        self.sleep(1)
                        value = timeSlider.value() + 1
                        self.changeValue.emit(value)

                    if x >= int(sliderLength):
                        isSliderPlay = False
                        break
        else:
            self.quit()

    def set(self, value):
        self.currentSliderValue = value

# class LayerTask(QgsTask):
#     def __init__(self, desc, uri):
#         QgsTask.__init__(self, desc)
#         self.uri = uri
#         self.vlayers = []
#         self.start_time = None
#         self.desc = desc
#         self.exception = None

#     def run(self):
#         QgsMessageLog.logMessage('[-- Start add layers --]', tag="Processing")
#         self.start_time = time.time()
#         for tableName in allLayers:
#             self.uri.setDataSource('', tableName, 'geom')
#             vlayer = QgsVectorLayer(self.uri.uri(), tableName, 'spatialite')
#             if vlayer:
#                 symbol_renderer = vlayer.renderer()
#                 if symbol_renderer:
#                     symbol = symbol_renderer.symbol()
#                     symbol.setColor(QColor(125,139,142))
#                     symbol.symbolLayer(0).setStrokeColor(QColor(0,0,0))
#                     symbol.setSize(2.4)
#                 iface.layerTreeView().refreshLayerSymbology(vlayer.id())
#                 vlayer.triggerRepaint()
#                 self.vlayers.append(vlayer)
#         return True

#     def finished(self, result):
#         if result:
#             for vlayer in self.vlayers:
#                 QgsProject.instance().addMapLayer(vlayer)
#             iface.mapCanvas().setSelectionColor(QColor("red"))
#             elapsed_time = time.time() - self.start_time
#             QgsMessageLog.logMessage('Elapsed time: ' + str(elapsed_time) + ' s.', tag="Processing")
#             QgsMessageLog.logMessage('[-- End add layers --]', tag="Processing")
#         else:
#             if self.exception is None:
#                 QgsMessageLog.logMessage(
#                     'Task "{name}" not successful but without '\
#                     'exception (probably the task was manually '\
#                     'canceled by the user)'.format(
#                     name=self.desc), tag="Exception")
#             else:
#                 QgsMessageLog.logMessage(
#                     'Task "{name}" Exception: {exception}'.format(
#                     name=self.desc),
#                     exception=self.exception,
#                     tag="Exception")
#                 raise self.exception


if __name__ == '__main__':
    app = QApplication(sys.argv)
    dialog = Ui_DatabaseDialog()
    dialog.show()
    sys.exit(app.exec_())
