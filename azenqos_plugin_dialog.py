# -*- coding: utf-8 -*-
"""
/***************************************************************************
 AzenqosDialog
                                 A QGIS plugin
 Azenqos Plugin
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2019-03-18
        git sha              : $Format:%H$
        copyright            : (C) 2019 by Metamedia Techonology Co.,Ltd
        email                : gritmanoch@longdo.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
import sqlite3
import sys
import pyqtgraph as pg
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import *
from PyQt5.QtCore import QAbstractTableModel, QVariant, Qt, QByteArray
from PyQt5.QtSql import QSqlQuery, QSqlDatabase
# from qgis.core import QgsDataSourceUri, QgsMessageLog
# from qgis.utils import *


azenqosDatabase = None
latestMenu = None

class Ui_DatabaseDialog(QDialog):
    def __init__(self, parent=None):
        super(Ui_DatabaseDialog, self).__init__(parent)
        self.setupUi(self)

    def setupUi(self, DatabaseDialog):
        DatabaseDialog.setObjectName("DatabaseDialog")
        DatabaseDialog.setWindowModality(QtCore.Qt.ApplicationModal)
        DatabaseDialog.resize(540, 90)
        DatabaseDialog.setMaximumSize(QtCore.QSize(540, 90))
        self.browseButton = QtWidgets.QPushButton(DatabaseDialog)
        self.browseButton.setGeometry(QtCore.QRect(420, 25, 113, 31))
        self.browseButton.setObjectName("browseButton")
        self.dbPath = QtWidgets.QTextEdit(DatabaseDialog)
        self.dbPath.setGeometry(QtCore.QRect(10, 30, 400, 21))
        self.dbPath.setObjectName("dbPath")
        self.buttonBox = QtWidgets.QDialogButtonBox(DatabaseDialog)
        self.buttonBox.setGeometry(QtCore.QRect(370, 56, 164, 32))
        self.buttonBox.setStandardButtons(QtWidgets.QDialogButtonBox.Cancel | QtWidgets.QDialogButtonBox.Ok)
        self.buttonBox.setObjectName("buttonBox")
        self.dbPathLabel = QtWidgets.QLabel(DatabaseDialog)
        self.dbPathLabel.setGeometry(QtCore.QRect(10, 10, 181, 16))
        self.dbPathLabel.setObjectName("dbPathLabel")

        self.retranslateUi(DatabaseDialog)
        QtCore.QMetaObject.connectSlotsByName(DatabaseDialog)
        self.browseButton.clicked.connect(self.getfiles)
        self.buttonBox.button(QtWidgets.QDialogButtonBox.Ok).clicked.connect(self.checkDatabase)
        self.buttonBox.button(QtWidgets.QDialogButtonBox.Cancel).clicked.connect(self.close)

    def retranslateUi(self, DatabaseDialog):
        _translate = QtCore.QCoreApplication.translate
        DatabaseDialog.setWindowTitle(_translate("DatabaseDialog", "Azenqos"))
        self.browseButton.setText(_translate("DatabaseDialog", "Browse.."))
        self.dbPathLabel.setText(_translate("DatabaseDialog", "Database path: ( .db, .sqlite )"))

    def getfiles(self):
        fileName, _ = QFileDialog.getOpenFileName(self, 'Single File', QtCore.QDir.rootPath(), '*.db;;*.sqlite')
        self.databasePath = fileName
        if fileName != "":
            baseFileName = os.path.basename(str(fileName))
            self.dbPath.setText(fileName)
            # if conn == True:
            #     QMessageBox.about(self, 'Connection result', 'Database is Connected')

    def checkDatabase(self):
        if hasattr(self, 'db'):
            QMessageBox.about(self, 'Connection result', 'Database is Connected, Enter the main menu')
        else:
            self.db = QSqlDatabase.addDatabase("QSQLITE")
            self.db.setDatabaseName(self.databasePath)
            global azenqosDatabase
            azenqosDatabase = self.db
        if not self.db.open():
            QtWidgets.QMessageBox.critical(None, "Cannot open database",
                                           "Unable to establish a database connection.\n"
                                           "This example needs SQLite support. Please read "
                                           "the Qt SQL driver documentation for information how "
                                           "to build it.\n\n"
                                           "Click Cancel to exit.", QtWidgets.QMessageBox.Cancel)
            return False
        else:
            QMessageBox.about(self, 'Connection result', 'Database is Connected, Enter the main menu')
            self.db.removeDatabase(self.databasePath)
            self.azenqosMainMenu = AzenqosDialog()
            self.azenqosMainMenu.raise_()
            self.azenqosMainMenu.activateWindow()
            self.azenqosMainMenu.show()
            self.hide()

class AzenqosDialog(QMainWindow):
    def __init__(self):
        """Constructor."""
        super(AzenqosDialog, self).__init__()
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        # self.databasePath = databasePath
        # self.db.setDatabaseName(self.databasePath)
        self.setupUi(self)

    def setupUi(self, AzenqosDialog):
        AzenqosDialog.setObjectName("AzenqosDialog")
        AzenqosDialog.resize(891, 557)
        self.treeWidget = QTreeWidget(AzenqosDialog)
        self.treeWidget.setGeometry(QtCore.QRect(20, 40, 491, 471))
        self.treeWidget.setFrameShape(QFrame.StyledPanel)
        self.treeWidget.setAllColumnsShowFocus(True)
        self.treeWidget.setObjectName("treeWidget")
        self.treeWidget.itemDoubleClicked.connect(self.loadAllMessages)

        # GSM Section
        gsm = QTreeWidgetItem(self.treeWidget, ['GSM'])
        gsmRadioParams = QTreeWidgetItem(gsm, ['Radio Parameters'])
        gsmServeNeighbor = QTreeWidgetItem(gsm, ['Serving + Neighbors'])
        gsmCurrentChannel = QTreeWidgetItem(gsm, ['Current Channel'])
        gsmCI = QTreeWidgetItem(gsm, ['C/I'])
        gsmLineChart = QTreeWidgetItem(gsm, ['GSM Line Chart'])
        gsmEventsCounter = QTreeWidgetItem(gsm, ['Events Counter'])

        # WCDMA Section
        wcdma = QTreeWidgetItem(self.treeWidget, ['WCDMA'])
        wcdmaActiveMonitoredSets = QTreeWidgetItem(wcdma, ['Active + Monitored Sets'])
        wcdmaRadioParams = QTreeWidgetItem(wcdma, ['Radio Parameters'])
        wcdmaASL = QTreeWidgetItem(wcdma, ['Active Set List'])
        wcdmaMonitoredSet = QTreeWidgetItem(wcdma, ['Monitored Set List'])
        wcdmaSummary = QTreeWidgetItem(wcdma, ['BLER Summary'])
        wcdmaTransportChannel = QTreeWidgetItem(wcdma, ['BLER / Transport Channel'])
        wcdmaLineChart = QTreeWidgetItem(wcdma, ['Line Chart'])
        wcdmaBearers = QTreeWidgetItem(wcdma, ['Bearers'])
        wcdmaPilotPoluting = QTreeWidgetItem(wcdma, ['Pilot Poluting Cells'])
        wcdmaActiveMonitoredBar = QTreeWidgetItem(wcdma, ['Active + Monitored Bar'])
        wcdmaReports = QTreeWidgetItem(wcdma, ['CM GSM Reports'])
        wcdmaCells = QTreeWidgetItem(wcdma, ['CM GSM Cells'])
        wcdmaPilotAnalyzer = QTreeWidgetItem(wcdma, ['Pilot Analyzer'])

        # LTE Section
        lte = QTreeWidgetItem(self.treeWidget, ['LTE'])
        lteRadioParams = QTreeWidgetItem(lte, ['Radio Parameters'])
        lteServingNeighbors = QTreeWidgetItem(lte, ['Serving + Neighbors'])
        ltePPParams = QTreeWidgetItem(lte, ['PUCCH/PDSCH Parameters'])
        lteLineChart = QTreeWidgetItem(lte, ['LTE Line Chart'])
        lteRlc = QTreeWidgetItem(lte, ['LTE RLC'])
        lteVo = QTreeWidgetItem(lte, ['LTE VoLTE'])

        # CDMA/EVDO Section
        cdmaEvdo = QTreeWidgetItem(self.treeWidget, ['CDMA/EVDO'])
        cdmaEvdoRadioParams = QTreeWidgetItem(cdmaEvdo, ['Radio Parameters'])
        cdmaEvdoServingNeighbors = QTreeWidgetItem(cdmaEvdo, ['Serving + Neighbors'])
        cdmaEvdoParams = QTreeWidgetItem(cdmaEvdo, ['EVDO Parameters'])

        # Data Section
        data = QTreeWidgetItem(self.treeWidget, ['Data'])
        dataGsmLineChart = QTreeWidgetItem(data, ['GSM Data Line Chart'])
        dataWcdmaLineChart = QTreeWidgetItem(data, ['WCDMA Data Line Chart'])
        dataEdgeInfo = QTreeWidgetItem(data, ['GPRS/EDGE Information'])
        dataWebBrowser = QTreeWidgetItem(data, ['Web Browser'])
        dataStats = QTreeWidgetItem(data, ['HSDPA/HSPA + Statistics'])
        dataHsupaStats = QTreeWidgetItem(data, ['HSUPA Statistics'])
        dataLteStats = QTreeWidgetItem(data, ['LTE Data Statistics'])
        dataLteLineChart = QTreeWidgetItem(data, ['LTE Data Line Chart'])
        dataWifiConnectedAp = QTreeWidgetItem(data, ['Wifi Connected AP'])
        dataWifiScannedAp = QTreeWidgetItem(data, ['Wifi Scanned APs'])
        dataWifiGraph = QTreeWidgetItem(data, ['Wifi Graph'])

        # Signaling Section
        signaling = QTreeWidgetItem(self.treeWidget, ['Signaling'])
        signalingEvents = QTreeWidgetItem(signaling, ['Events'])
        signalingLayerOne = QTreeWidgetItem(signaling, ['Layer 1 Messages'])
        signalingLayerThree = QTreeWidgetItem(signaling, ['Layer 3 Messages'])
        signalingBenchmark = QTreeWidgetItem(signaling, ['Benchmark'])
        signalingMM = QTreeWidgetItem(signaling, ['MM Reg States'])
        signalingSystemInfo = QTreeWidgetItem(signaling, ['Serving System Info'])
        signalingDebug = QTreeWidgetItem(signaling, ['Debug Android/Event'])

        # # Positioning Section
        # positioning = QTreeWidgetItem(self.treeWidget, ['Positioning'])
        # positioningGps = QTreeWidgetItem(positioning, ['GPS'])
        # positioningMap = QTreeWidgetItem(positioning, ['Map'])
        # positioningPositioning = QTreeWidgetItem(positioning, ['Positioning'])
        #
        # # Customized Window Section
        # customizedWindow = QTreeWidgetItem(self.treeWidget, ['Customized Window'])
        # customizedWindowStatus = QTreeWidgetItem(customizedWindow, ['Status Window'])
        # customizedWindowMessage = QTreeWidgetItem(customizedWindow, ['Message Window'])
        # customizedWindowChart = QTreeWidgetItem(customizedWindow, ['Line Chart'])
        #
        # # NB-IoT Section
        # nBIoT = QTreeWidgetItem(self.treeWidget, ['NB-IoT'])
        # nBIoTParams = QTreeWidgetItem(nBIoT, ['NB-IoT Radio Parameters Window'])

        self.treeWidget.header().setCascadingSectionResizes(True)
        self.treeWidget.header().setHighlightSections(True)
        self.horizontalSlider = QSlider(AzenqosDialog)
        self.horizontalSlider.setGeometry(QtCore.QRect(700, 50, 151, 22))
        sizePolicy = QSizePolicy(QSizePolicy.Expanding, QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.horizontalSlider.sizePolicy().hasHeightForWidth())
        self.horizontalSlider.setSizePolicy(sizePolicy)
        self.horizontalSlider.setBaseSize(QtCore.QSize(500, 0))
        self.horizontalSlider.setPageStep(10)
        self.horizontalSlider.setSliderPosition(0)
        self.horizontalSlider.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider.setObjectName("horizontalSlider")
        self.pushButton = QPushButton(AzenqosDialog)
        self.pushButton.setGeometry(QtCore.QRect(550, 150, 181, 32))
        self.pushButton.setObjectName("pushButton")
        self.pushButton_2 = QPushButton(AzenqosDialog)
        self.pushButton_2.setGeometry(QtCore.QRect(550, 190, 181, 32))
        self.pushButton_2.setObjectName("pushButton_2")
        self.timeEdit = QTimeEdit(AzenqosDialog)
        self.timeEdit.setGeometry(QtCore.QRect(560, 50, 118, 22))
        self.timeEdit.setObjectName("timeEdit")
        self.filenameLabel = QLabel(AzenqosDialog)
        self.filenameLabel.setGeometry(QtCore.QRect(560, 100, 100, 16))
        self.filenameLabel.setObjectName("filenameLabel")
        self.filename = QLabel(AzenqosDialog)
        self.filename.setGeometry(QtCore.QRect(670, 100, 180, 16))
        self.filename.setObjectName("filename")
        self.retranslateUi(AzenqosDialog)
        QtCore.QMetaObject.connectSlotsByName(AzenqosDialog)

    def retranslateUi(self, AzenqosDialog):
        _translate = QtCore.QCoreApplication.translate
        AzenqosDialog.setWindowTitle(_translate("AzenqosDialog", "Azenqos Main Menu"))
        self.treeWidget.headerItem().setText(0, _translate("AzenqosDialog", "Toolbox"))
        __sortingEnabled = self.treeWidget.isSortingEnabled()
        self.treeWidget.setSortingEnabled(False)
        self.treeWidget.setSortingEnabled(__sortingEnabled)
        self.pushButton.setText(_translate("AzenqosDialog", "Import Database"))
        self.pushButton_2.setText(_translate("AzenqosDialog", "Database Filter"))
        self.filenameLabel.setText(_translate("AzenqosDialog", "Database name:"))
        self.filename.setText(_translate("AzenqosDialog", ""))
        self.pushButton.clicked.connect(self.importDatabase)

    def loadAllMessages(self):
        getSelected = self.treeWidget.selectedItems()
        if getSelected:
            baseNode = getSelected[0]
            # QgsMessageLog.logMessage('เลือกเมนูสำเร็จ', 'Azenqos Log')
            # QgsMessageLog.logMessage(str(baseNode), 'Azenqos Log')
            if baseNode.text(0) is not None:
                getChildNode = baseNode.text(0)
                getParentNode = baseNode.parent().text(0)
                self.classifySelectedItems(getParentNode, getChildNode)
                global latestMenu
                latestMenu = getParentNode + '_' + getChildNode
                print(latestMenu)

    def importDatabase(self):
        # self.db = QtSql.QSqlDatabase.addDatabase("QSQLITE")
        # self.db.setDatabaseName(self.databasePath)
        print(azenqosDatabase)
        if not azenqosDatabase.open():
            QtWidgets.QMessageBox.critical(None, "Cannot open database",
                                           "Unable to establish a database connection.\n"
                                           "This example needs SQLite support. Please read "
                                           "the Qt SQL driver documentation for information how "
                                           "to build it.\n\n"
                                           "Click Cancel to exit.", QtWidgets.QMessageBox.Cancel)
            return False
        # self.database.removeDatabase(self.databasePath)
        azenqosDatabase.close()

    def getDatabasePath(self):
        return self.databasePath

    def setDatabaseActive(self, connection: sqlite3):
        cur = connection.cursor()
        return cur

    def closeDatabaseConnection(self, connection: sqlite3):
        connection.close()

    def classifySelectedItems(self, parent, child):
        if parent == "GSM":
            if child == "Radio Parameters":
                if hasattr(self, 'gsm_rdp_window'):
                    self.gsm_rdp_window.show()
                else:
                    if hasattr(self, 'database'):
                        self.gsm_rdp_window = TableWindow(parent + "_" + child)
                    else:
                        self.gsm_rdp_window = TableWindow(parent + "_" + child)
                    self.gsm_rdp_window.show()
            elif child == "Serving + Neighbors":
                if hasattr(self, 'gsm_sn_window'):
                    self.gsm_sn_window.show()
                else:
                    self.gsm_sn_window = TableWindow(parent + "_" + child)
                    self.gsm_sn_window.show()
            elif child == "Current Channel":
                if hasattr(self, 'gsm_cc_window'):
                    self.gsm_cc_window.show()
                else:
                    self.gsm_cc_window = TableWindow(parent + "_" + child)
                    self.gsm_cc_window.show()
            elif child == "C/I":
                if hasattr(self, 'gsm_ci_window'):
                    self.gsm_ci_window.show()
                else:
                    self.gsm_ci_window = TableWindow(parent + "_" + child)
                    self.gsm_ci_window.show()
            elif child == "GSM Line Chart":
                if hasattr(self, 'gsm_lc_window'):
                    self.gsm_lc_window.show()
                else:
                    self.gsm_lc_window = TableWindow(parent + "_" + child)
                    self.gsm_lc_window.show()
            elif child == "Events Counter":
                if hasattr(self, 'gsm_ec_window'):
                    self.gsm_ec_window.show()
                else:
                    self.gsm_ec_window = TableWindow(parent + "_" + child)
                    self.gsm_ec_window.show()
        elif parent == "WCDMA":
            if child == "Active + Monitored Sets":
                if hasattr(self, 'wcdma_ams_window'):
                    self.wcdma_ams_window.show()
                else:
                    self.wcdma_ams_window = TableWindow(parent + "_" + child)
                    self.wcdma_ams_window.show()
            elif child == "Radio Parameters":
                if hasattr(self, 'wcdma_rp_window'):
                    self.wcdma_rp_window.show()
                else:
                    self.wcdma_rp_window = TableWindow(parent + "_" + child)
                    self.wcdma_rp_window.show()
            elif child == "Active Set List":
                if hasattr(self, 'wcdma_asl_window'):
                    self.wcdma_asl_window.show()
                else:
                    self.wcdma_asl_window = TableWindow(parent + "_" + child)
                    self.wcdma_asl_window.show()
            elif child == "Monitored Set List":
                if hasattr(self, 'wcdma_msl_window'):
                    self.wcdma_msl_window.show()
                else:
                    self.wcdma_msl_window = TableWindow(parent + "_" + child)
                    self.wcdma_msl_window.show()
            elif child == "WCDMA BLER Summary":
                if hasattr(self, 'wcdma_bler_window'):
                    self.wcdma_bler_window.show()
                else:
                    self.wcdma_bler_window = TableWindow(parent + "_" + child)
                    self.wcdma_bler_window.show()
            elif child == "WCDMA BLER / Transport Channel":
                if hasattr(self, 'wcdma_bler_window'):
                    self.wcdma_blertc_window.show()
                else:
                    self.wcdma_blertc_window = TableWindow(parent + "_" + child)
                    self.wcdma_blertc_window.show()
            elif child == "WCDMA Line Chart":
                if hasattr(self, 'wcdma_lc_window'):
                    self.wcdma_lc_window.show()
                else:
                    self.wcdma_lc_window = TableWindow(parent + "_" + child)
                    self.wcdma_lc_window.show()
            elif child == "WCDMA Bearers":
                if hasattr(self, 'wcdma_bearer_window'):
                    self.wcdma_bearer_window.show()
                else:
                    self.wcdma_bearer_window = TableWindow(parent + "_" + child)
                    self.wcdma_bearer_window.show()
            elif child == "Active + Monitored Bar":
                if hasattr(self, 'wcdma_amb_window'):
                    self.wcdma_amb_window.show()
                else:
                    self.wcdma_amb_window = TableWindow(parent + "_" + child)
                    self.wcdma_amb_window.show()
            elif child == "WCDMA CM GSM Reports":
                if hasattr(self, 'wcdma_report_window'):
                    self.wcdma_report_window.show()
                else:
                    self.wcdma_report_window = TableWindow(parent + "_" + child)
                    self.wcdma_report_window.show()
            elif child == "WCDMA CM GSM Cells":
                if hasattr(self, 'wcdma_cells_window'):
                    self.wcdma_cells_window.show()
                else:
                    self.wcdma_cells_window = TableWindow(parent + "_" + child)
                    self.wcdma_cells_window.show()
            elif child == "WCDMA Pilot Analyzer":
                if hasattr(self, 'wcdma_analyzer_window'):
                    self.wcdma_analyzer_window.show()
                else:
                    self.wcdma_analyzer_window = TableWindow(parent + "_" + child)
                    self.wcdma_analyzer_window.show()
        elif parent == "LTE":
            if child == "Radio Parameters":
                if hasattr(self, 'lte_param_window'):
                    self.lte_param_window.show()
                else:
                    self.lte_param_window = TableWindow(parent + "_" + child)
                    self.lte_param_window.show()
            elif child == "Serving + Neighbors":
                if hasattr(self, 'lte_sn_window'):
                    self.lte_sn_window.show()
                else:
                    self.lte_sn_window = TableWindow(parent + "_" + child)
                    self.lte_sn_window.show()
            elif child == "PUCCH/PDSCH Parameters":
                if hasattr(self, 'lte_ppparam_window'):
                    self.lte_ppparam_window.show()
                else:
                    self.lte_ppparam_window = TableWindow(parent + "_" + child)
                    self.lte_ppparam_window.show()
            elif child == "LTE Line Chart":
                if hasattr(self, 'lte_lc_window'):
                    self.lte_lc_window.show()
                else:
                    self.lte_lc_window = TableWindow(parent + "_" + child)
                    self.lte_lc_window.show()
            elif child == "LTE RLC":
                if hasattr(self, 'lte_rlc_window'):
                    self.lte_rlc_window.show()
                else:
                    self.lte_rlc_window = TableWindow(parent + "_" + child)
                    self.lte_rlc_window.show()
            elif child == "LTE VoLTE":
                if hasattr(self, 'lte_volte_window'):
                    self.lte_volte_window.show()
                else:
                    self.lte_volte_window = TableWindow(parent + "_" + child)
                    self.lte_volte_window.show()
        elif parent == "CDMA/EVDO":
            if child == "Radio Parameters":
                if hasattr(self, 'cdma_rp_window'):
                    self.cdma_rp_window.show()
                else:
                    self.cdma_rp_window = TableWindow(parent + "_" + child)
                    self.cdma_rp_window.show()
            elif child == "Serving + Neighbors":
                if hasattr(self, 'cdma_sn_window'):
                    self.cdma_sn_window.show()
                else:
                    self.cdma_sn_window = TableWindow(parent + "_" + child)
                    self.cdma_sn_window.show()
            elif child == "EVDO Parameters":
                if hasattr(self, 'cdma_evdo_window'):
                    self.cdma_evdo_window.show()
                else:
                    self.cdma_evdo_window = TableWindow(parent + "_" + child)
                    self.cdma_evdo_window.show()
        elif parent == "Data":
            if child == "GSM Data Line Chart":
                if hasattr(self, 'gsm_data_lc'):
                    self.gsm_data_lc.show()
                else:
                    self.gsm_data_lc = TableWindow(parent + "_" + child)
                    self.gsm_data_lc.show()
            elif child == "WCDMA Data Line Chart":
                if hasattr(self, 'wcdma_data_lc'):
                    self.wcdma_data_lc.show()
                else:
                    self.wcdma_data_lc = TableWindow(parent + "_" + child)
                    self.wcdma_data_lc.show()
            elif child == "GPRS/EDGE Information":
                if hasattr(self, 'gprs_info'):
                    self.gprs_info.show()
                else:
                    self.gprs_info = TableWindow(parent + "_" + child)
                    self.gprs_info.show()
            elif child == "Web Browser":
                if hasattr(self, 'web_browser'):
                    self.web_browser.show()
                else:
                    self.web_browser = TableWindow(parent + "_" + child)
                    self.web_browser.show()
            elif child == "HSDPA/HSPA + Statistics":
                if hasattr(self, 'hsdpa_stat'):
                    self.hsdpa_stat.show()
                else:
                    self.hsdpa_stat = TableWindow(parent + "_" + child)
                    self.hsdpa_stat.show()
            elif child == "HSUPA Statistics":
                if hasattr(self, 'hsupa_stat'):
                    self.hsupa_stat.show()
                else:
                    self.hsupa_stat = TableWindow(parent + "_" + child)
                    self.hsupa_stat.show()
            elif child == "LTE Data Statistics":
                if hasattr(self, 'lte_data_stat'):
                    self.lte_data_stat.show()
                else:
                    self.lte_data_stat = TableWindow(parent + "_" + child)
                    self.lte_data_stat.show()
            elif child == "LTE Data Line Chart":
                if hasattr(self, 'lte_data_lc'):
                    self.lte_data_lc.show()
                else:
                    self.lte_data_lc = TableWindow(parent + "_" + child)
                    self.lte_data_lc.show()
            elif child == "Wifi Connected AP":
                if hasattr(self, 'wifi_connected_ap'):
                    self.wifi_connected_ap.show()
                else:
                    self.wifi_connected_ap = TableWindow(parent + "_" + child)
                    self.wifi_connected_ap.show()
            elif child == "Wifi Scanned APs":
                if hasattr(self, 'wifi_scanned_ap'):
                    self.wifi_scanned_ap.show()
                else:
                    self.wifi_scanned_ap = TableWindow(parent + "_" + child)
                    self.wifi_scanned_ap.show()
            elif child == "Wifi Graph":
                if hasattr(self, 'wifi_graph'):
                    self.wifi_graph.show()
                else:
                    self.wifi_graph = TableWindow(parent + "_" + child)
                    self.wifi_graph.show()
        elif parent == "Signaling":
            if child == "Events":
                if hasattr(self, 'events_window'):
                    self.events_window.show()
                else:
                    self.events_window = TableWindow(parent + "_" + child)
                    self.events_window.show()
            elif child == "Layer 1 Messages":
                if hasattr(self, 'layer_one_messages'):
                    self.layer_one_messages.show()
                else:
                    self.layer_one_messages = TableWindow(parent + "_" + child)
                    self.layer_one_messages.show()
            elif child == "Layer 3 Messages":
                if hasattr(self, 'layer_three_messages'):
                    self.layer_three_messages.show()
                else:
                    self.layer_three_messages = TableWindow(parent + "_" + child)
                    self.layer_three_messages.show()
            elif child == "Benchmark":
                if hasattr(self, 'benchmark'):
                    self.benchmark.show()
                else:
                    self.benchmark = TableWindow(parent + "_" + child)
                    self.benchmark.show()
            elif child == "MM Reg States":
                if hasattr(self, 'mm_reg_states'):
                    self.mm_reg_states.show()
                else:
                    self.mm_reg_states = TableWindow(parent + "_" + child)
                    self.mm_reg_states.show()
            elif child == "Serving System Info":
                if hasattr(self, 'serving_system_info'):
                    self.serving_system_info.show()
                else:
                    self.serving_system_info = TableWindow(parent + "_" + child)
                    self.serving_system_info.show()
            elif child == "Debug Android/Event":
                if hasattr(self, 'debug_event'):
                    self.debug_event.show()
                else:
                    self.debug_event = TableWindow(parent + "_" + child)
                    self.debug_event.show()
        # elif parent == "Positioning":
        #     if child == "GPS":
        #         print("1")
        #     elif child == "Map":
        #         print("2")
        #     elif child == "Positioning":
        #         print("3")
        # elif parent == "Customized Window":
        #     if child == "Status Window":
        #         print("1")
        #     elif child == "Message Window":
        #         print("2")
        #     elif child == "Line Chart":
        #         print("3")
        # elif parent == "NB-IoT":
        #     if child == "NB-IoT Radio Parameters Window":
        #         print("1")


class TableWindow(QWidget):
    def __init__(self, windowName):
        super(TableWindow, self).__init__()
        self.title = windowName
        self.left = 10
        self.top = 10
        self.width = 640
        self.height = 480
        self.setupUi()

    def setupUi(self):
        self.setObjectName(self.title)
        self.setWindowTitle(self.title)
        # self.setGeometry(self.left, self.top, self.width, self.height)

        # grid_layout = QGridLayout(self)
        # self.centralwidget.setLayout(grid_layout)

        self.tableView = QTableView(self)
        self.tableView.horizontalHeader().setSortIndicator(-1, Qt.AscendingOrder)
        self.tableView.setSortingEnabled(True)
        self.setTableView()
        # self.tableWidget = QTableWidget(self.centralwidget)
        # self.tableWidget.setGeometry(QtCore.QRect(20, 20, self.width, self.height))
        # self.tableWidget.setObjectName("tableWidget")
        # self.tableWidget.setColumnCount(4)
        # self.tableWidget.setHorizontalHeaderLabels(["Time", "Eq.", "Name", "Info."])

        # grid_layout.addWidget(self.tableWidget, 0, 0)

        layout = QVBoxLayout(self)
        layout.addWidget(self.tableView)
        self.setLayout(layout)

        self.raise_()
        self.activateWindow()


    def setTableView(self):
        query = DataQuery(self.title, None)
        dataList = query.getData()
        self.tableModel = TableModel(dataList, self)
        self.tableView.setModel(self.tableModel)
        self.tableView.setSortingEnabled(True)
        self.tableView.resizeColumnsToContents()

    def specifyTablesHeader(self):
        if self.title is not None:
            # GSM
            if self.title == 'GSM_Radio Parameters':
                return False
            elif self.title == 'GSM_Serving + Neighbors':
                return False
            elif self.title == 'GSM_Current Channel':
                return False
            elif self.title == 'GSM_C/I':
                return False
            elif self.title == 'GSM_Line Chart':
                return False
            elif self.title == 'GSM_Events Counter':
                return False

            # WCDMA
            elif self.title == 'WCDMA_Active + Monitored Sets':
                return False
            elif self.title == 'WCDMA_Radio Parameters':
                return False
            elif self.title == 'WCDMA_Active Set Lists':
                return False
            elif self.title == 'WCDMA_Monitored Set List':
                return False
            elif self.title == 'WCDMA_BLER Summary':
                return False
            elif self.title == 'WCDMA_BLER / Transport Channel':
                return False
            elif self.title == 'WCDMA_Line Chart':
                return False
            elif self.title == 'WCDMA_Bearers':
                return False
            elif self.title == 'WCDMA_Pilot Poluting Cells':
                return False
            elif self.title == 'WCDMA_Active + Monitored Bar':
                return False
            elif self.title == 'WCDMA_CM GSM Reports':
                return False
            elif self.title == 'WCDMA_CM GSM Cells':
                return False
            elif self.title == 'WCDMA_Pilot Analyzer':
                return False

            # LTE
            elif self.title == 'LTE_Radio Parameters':
                return False
            elif self.title == 'LTE_Serving + Neighbors':
                return False
            elif self.title == 'LTE_PUCCH/PDSCH Parameters':
                return False
            elif self.title == 'LTE_LTE Line Chart':
                return False
            elif self.title == 'LTE_LTE RLC':
                return False
            elif self.title == 'LTE_LTE VoLTE':
                return False

            # CDMA/EVDO
            elif self.title == 'CDMA/EVDO_Radio Parameters':
                return False
            elif self.title == 'CDMA/EVDO_Serving + Neighbors':
                return False
            elif self.title == 'CDMA/EVDO_EVDO Parameters':
                return False

            # Data
            elif self.title == 'Data_GSM Data Line Chart':
                return False
            elif self.title == 'Data_WCDMA Data Line Chart':
                return False
            elif self.title == 'Data_GPRS/EDGE Information':
                return False
            elif self.title == 'Data_Web Browser':
                return False
            elif self.title == 'Data_HSDPA/HSPA + Statistics':
                return False
            elif self.title == 'Data_HSUPA Statistics':
                return False
            elif self.title == 'Data_LTE Data Statistics':
                return False
            elif self.title == 'Data_LTE Data Line Chart':
                return False
            elif self.title == 'Data_Wifi Connected AP':
                return False
            elif self.title == 'Data_Wifi Scanned APs':
                return False
            elif self.title == 'Data_Wifi Graph':
                return False

            # Signaling
            elif self.title == 'Signaling_Events':
                return False
            elif self.title == 'Signaling_Layer 1 Messages':
                return False
            elif self.title == 'Signaling_Layer 3 Messages':
                return False
            elif self.title == 'Signaling_Benchmark':
                return False
            elif self.title == 'Signaling_MM Ref States':
                return False
            elif self.title == 'Signaling_Serving System Info':
                return False
            elif self.title == 'Signaling_Debug Android/Event':
                return False

class TableModel(QAbstractTableModel):
    header_labels = ["Time", "Eq.", "Name", "Info."]

    def __init__(self, inputData, header, parent=None, *args):
        QAbstractTableModel.__init__(self, parent, *args)
        self.dataSource = inputData

    def rowCount(self, parent):
        return len(self.dataSource)

    def columnCount(self, parent):
        return len(self.dataSource[0])

    def data(self, index, role):
        if not index.isValid():
            return QVariant()
        elif role != Qt.DisplayRole:
            return QVariant()
        return QVariant(self.dataSource[index.row()][index.column()])

    def headerData(self, section, orientation, role=Qt.DisplayRole):
        if role == Qt.DisplayRole and orientation == Qt.Horizontal:
            return self.header_labels[section]
        return QAbstractTableModel.headerData(self, section, orientation, role)

# class PlotGraph(pg.PlotCurveItem):
#     def __init__(self, parent=None):
#         super(PlotGraph, self).__init__()
#         self.y1 = [2, 4, 8, 10, 12]
#         self.y2 = [1, 3, 5, 7, 9]
#         self.x = range(0, 10)
#         self.setupUi(self)
#
#     def setupUi(self, PlotGraph):
#         self.graphwindow = pg.GraphicsWindow()
#
#     def showGraph(self):

class DataQuery(object):
    def __init__(self, windowName, timeFilter=None):
        self.windowName = windowName
        self.timeFilter = timeFilter

    def getData(self):
        if azenqosDatabase is not None:
            azenqosDatabase.open()
        index = 0
        query = QSqlQuery()
        query.exec_("select * from events")
        timeField = query.record().indexOf("time");
        nameField = query.record().indexOf("name");
        detailField = query.record().indexOf("info");
        dataList = []
        while query.next():
            timeValue = query.value(timeField)
            nameValue = query.value(nameField)
            detailStrValue = query.value(detailField)
            dataList.append([timeValue, '', nameValue, detailStrValue])
        azenqosDatabase.close()
        return dataList



class ChooseDatabaseWindow(QMainWindow):
    def __init__(self):
        super(ChooseDatabaseWindow, self).__init__()


# if __name__ == '__main__':
#     app = QApplication(sys.argv)
#     # dialog = AzenqosDialog()
#     dialog = Ui_DatabaseDialog()
#     dialog.show()
#     sys.exit(app.exec_())
