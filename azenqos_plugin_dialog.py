# -*- coding: utf-8 -*-
"""
/***************************************************************************
 AzenqosDialog
                                 A QGIS plugin
 Azenqos Plugin
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2019-03-18
        git sha              : $Format:%H$
        copyright            : (C) 2019 by Metamedia Techonology Co.,Ltd
        email                : gritmanoch@longdo.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
# from PyQt5 import *
# from PyQt5.QtWidgets import *
import sqlite3

import pyqtgraph as pg
# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
# FORM_CLASS, _ = uic.loadUiType(os.path.join(os.path.dirname(__file__), 'azenqos_plugin_dialog_base.ui'))
from PyQt5 import QtCore, QtGui, QtWidgets, QtSql
from PyQt5.QtWidgets import *
from PyQt5.QtCore import QSettings
from qgis.core import *
from qgis.utils import *


class AzenqosDialog(QDialog):
    def __init__(self, parent=None):
        """Constructor."""
        super(AzenqosDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)

    def setupUi(self, AzenqosDialog):
        AzenqosDialog.setObjectName("AzenqosDialog")
        AzenqosDialog.resize(891, 557)
        self.treeWidget = QTreeWidget(AzenqosDialog)
        self.treeWidget.setGeometry(QtCore.QRect(20, 40, 491, 471))
        self.treeWidget.setFrameShape(QFrame.StyledPanel)
        self.treeWidget.setAllColumnsShowFocus(True)
        self.treeWidget.setObjectName("treeWidget")
        self.treeWidget.itemDoubleClicked.connect(self.loadAllMessages)

        # GSM Section
        gsm = QTreeWidgetItem(self.treeWidget, ['GSM'])
        gsmRadioParams = QTreeWidgetItem(gsm, ['Radio Parameters'])
        gsmServeNeighbor = QTreeWidgetItem(gsm, ['Serving + Neighbors'])
        gsmCurrentChannel = QTreeWidgetItem(gsm, ['Current Channel'])
        gsmCI = QTreeWidgetItem(gsm, ['C/I'])
        gsmLineChart = QTreeWidgetItem(gsm, ['GSM Line Chart'])
        gsmEventsCounter = QTreeWidgetItem(gsm, ['Events Counter'])

        # WCDMA Section
        wcdma = QTreeWidgetItem(self.treeWidget, ['WCDMA'])
        wcdmaActiveMonitoredSets = QTreeWidgetItem(wcdma, ['Active + Monitored Sets'])
        wcdmaRadioParams = QTreeWidgetItem(wcdma, ['Radio Parameters'])
        wcdmaASL = QTreeWidgetItem(wcdma, ['Active Set List'])
        wcdmaMonitoredSet = QTreeWidgetItem(wcdma, ['Monitored Set List'])
        wcdmaSummary = QTreeWidgetItem(wcdma, ['WCDMA BLER Summary'])
        wcdmaTransportChannel = QTreeWidgetItem(wcdma, ['WCDMA BLER / Transport Channel'])
        wcdmaLineChart = QTreeWidgetItem(wcdma, ['WCDMA Line Chart'])
        wcdmaBearers = QTreeWidgetItem(wcdma, ['WCDMA Bearers'])
        wcdmaPilotPoluting = QTreeWidgetItem(wcdma, ['WCDMA Pilot Poluting Cells'])
        wcdmaActiveMonitoredBar = QTreeWidgetItem(wcdma, ['Active + Monitored Bar'])
        wcdmaReports = QTreeWidgetItem(wcdma, ['WCDMA CM GSM Reports'])
        wcdmaCells = QTreeWidgetItem(wcdma, ['WCDMA CM GSM Cells'])
        wcdmaPilotAnalyzer = QTreeWidgetItem(wcdma, ['WCDMA Pilot Analyzer'])

        # LTE Section
        lte = QTreeWidgetItem(self.treeWidget, ['LTE'])
        lteRadioParams = QTreeWidgetItem(lte, ['Radio Parameters'])
        lteServingNeighbors = QTreeWidgetItem(lte, ['Serving + Neighbors'])
        ltePPParams = QTreeWidgetItem(lte, ['PUCCH/PDSCH Parameters'])
        lteLineChart = QTreeWidgetItem(lte, ['LTE Line Chart'])
        lteRlc = QTreeWidgetItem(lte, ['LTE RLC'])
        lteVo = QTreeWidgetItem(lte, ['LTE VoLTE'])

        # CDMA/EVDO Section
        cdmaEvdo = QTreeWidgetItem(self.treeWidget, ['CDMA/EVDO'])
        cdmaEvdoRadioParams = QTreeWidgetItem(cdmaEvdo, ['Radio Parameters'])
        cdmaEvdoServingNeighbors = QTreeWidgetItem(cdmaEvdo, ['Serving + Neighbors'])
        cdmaEvdoParams = QTreeWidgetItem(cdmaEvdo, ['EVDO Parameters'])

        # Data Section
        data = QTreeWidgetItem(self.treeWidget, ['Data'])
        dataGsmLineChart = QTreeWidgetItem(data, ['GSM Data Line Chart'])
        dataWcdmaLineChart = QTreeWidgetItem(data, ['WCDMA Data Line Chart'])
        dataEdgeInfo = QTreeWidgetItem(data, ['GPRS/EDGE Information'])
        dataWebBrowser = QTreeWidgetItem(data, ['Web Browser'])
        dataStats = QTreeWidgetItem(data, ['HSDPA/HSPA + Statistics'])
        dataHsupaStats = QTreeWidgetItem(data, ['HSUPA Statistics'])
        dataLteStats = QTreeWidgetItem(data, ['LTE Data Statistics'])
        dataLteLineChart = QTreeWidgetItem(data, ['LTE Data Line Chart'])
        dataWifiConnectedAp = QTreeWidgetItem(data, ['Wifi Connected AP'])
        dataWifiScannedAp = QTreeWidgetItem(data, ['Wifi Scanned APs'])
        dataWifiGraph = QTreeWidgetItem(data, ['Wifi Graph'])

        # Signaling Section
        signaling = QTreeWidgetItem(self.treeWidget, ['Signaling'])
        signalingEvents = QTreeWidgetItem(signaling, ['Events'])
        signalingLayerOne = QTreeWidgetItem(signaling, ['Layer 1 Messages'])
        signalingLayerThree = QTreeWidgetItem(signaling, ['Layer 3 Messages'])
        signalingBenchmark = QTreeWidgetItem(signaling, ['Benchmark'])
        signalingMM = QTreeWidgetItem(signaling, ['MM Reg States'])
        signalingSystemInfo = QTreeWidgetItem(signaling, ['Serving System Info'])
        signalingDebug = QTreeWidgetItem(signaling, ['Debug Android/Event'])

        # Positioning Section
        positioning = QTreeWidgetItem(self.treeWidget, ['Positioning'])
        positioningGps = QTreeWidgetItem(positioning, ['GPS'])
        positioningMap = QTreeWidgetItem(positioning, ['Map'])
        positioningPositioning = QTreeWidgetItem(positioning, ['Positioning'])

        # Customized Window Section
        customizedWindow = QTreeWidgetItem(self.treeWidget, ['Customized Window'])
        customizedWindowStatus = QTreeWidgetItem(customizedWindow, ['Status Window'])
        customizedWindowMessage = QTreeWidgetItem(customizedWindow, ['Message Window'])
        customizedWindowChart = QTreeWidgetItem(customizedWindow, ['Line Chart'])

        # NB-IoT Section
        nBIoT = QTreeWidgetItem(self.treeWidget, ['NB-IoT'])
        nBIoTParams = QTreeWidgetItem(nBIoT, ['NB-IoT Radio Parameters Window'])

        self.treeWidget.header().setCascadingSectionResizes(True)
        self.treeWidget.header().setHighlightSections(True)
        self.horizontalSlider = QSlider(AzenqosDialog)
        self.horizontalSlider.setGeometry(QtCore.QRect(700, 50, 151, 22))
        sizePolicy = QSizePolicy(QSizePolicy.Expanding, QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.horizontalSlider.sizePolicy().hasHeightForWidth())
        self.horizontalSlider.setSizePolicy(sizePolicy)
        self.horizontalSlider.setBaseSize(QtCore.QSize(500, 0))
        self.horizontalSlider.setPageStep(10)
        self.horizontalSlider.setSliderPosition(0)
        self.horizontalSlider.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider.setObjectName("horizontalSlider")
        self.pushButton = QPushButton(AzenqosDialog)
        self.pushButton.setGeometry(QtCore.QRect(550, 150, 181, 32))
        self.pushButton.setObjectName("pushButton")
        self.pushButton_2 = QPushButton(AzenqosDialog)
        self.pushButton_2.setGeometry(QtCore.QRect(550, 190, 181, 32))
        self.pushButton_2.setObjectName("pushButton_2")
        self.timeEdit = QTimeEdit(AzenqosDialog)
        self.timeEdit.setGeometry(QtCore.QRect(560, 50, 118, 22))
        self.timeEdit.setObjectName("timeEdit")
        self.filenameLabel = QLabel(AzenqosDialog)
        self.filenameLabel.setGeometry(QtCore.QRect(560, 100, 100, 16))
        self.filenameLabel.setObjectName("filenameLabel")
        self.filename = QLabel(AzenqosDialog)
        self.filename.setGeometry(QtCore.QRect(670, 100, 180, 16))
        self.filename.setObjectName("filename")
        self.retranslateUi(AzenqosDialog)
        QtCore.QMetaObject.connectSlotsByName(AzenqosDialog)

    def retranslateUi(self, AzenqosDialog):
        _translate = QtCore.QCoreApplication.translate
        AzenqosDialog.setWindowTitle(_translate("AzenqosDialog", "Azenqos Main Menu"))
        self.treeWidget.headerItem().setText(0, _translate("AzenqosDialog", "Toolbox"))
        __sortingEnabled = self.treeWidget.isSortingEnabled()
        self.treeWidget.setSortingEnabled(False)
        self.treeWidget.setSortingEnabled(__sortingEnabled)
        self.pushButton.setText(_translate("AzenqosDialog", "Import Database"))
        self.pushButton_2.setText(_translate("AzenqosDialog", "Database Filter"))
        self.filenameLabel.setText(_translate("AzenqosDialog", "Database name:"))
        self.filename.setText(_translate("AzenqosDialog", ""))
        self.pushButton.clicked.connect(self.getfiles)

    def getfiles(self):
        fileName, _ = QFileDialog.getOpenFileName(self, 'Single File', QtCore.QDir.rootPath() , '*.db')
        self.databasePath = fileName
        if fileName != "":
            baseFileName = os.path.basename(str(fileName))
            self.filename.setText(baseFileName)
            conn = self.importDatabase()
            if conn != "":
                QMessageBox.about(self, 'Connection result', 'Database is Connected')



    def loadAllMessages(self):
        getSelected = self.treeWidget.selectedItems()
        if getSelected:
            baseNode = getSelected[0]
            QgsMessageLog.logMessage('เลือกเมนูสำเร็จ', 'Azenqos Log')
            QgsMessageLog.logMessage(str(baseNode), 'Azenqos Log')
            if baseNode.text(0) is not None:
                getChildNode = baseNode.text(0)
                getParentNode = baseNode.parent().text(0)
                self.classifySelectedItems(getParentNode, getChildNode)

    def importDatabase(self):
        try:
            # conn = sqlite3.connect(self.databasePath)
            # db = QtSql.QSqlDatabase('QSQLITE')
            # db.setDatabaseName(self.databasePath)
            QgsMessageLog.logMessage('Database Connected', 'Azenqos Log')
            layer = iface.activeLayer()
            uri = QgsDataSourceUri(layer.dataProvider().dataSourceUri())
            db = QtSql.QSqlDatabase.addDatabase("QSQLITE")
            db.setDatabaseName(uri.database())
            db.open()
            return db
        except ConnectionError as e:
            print(e)

        return None

    def classifySelectedItems(self, parent, child):
        if parent == "GSM":
            if child == "Radio Parameters":
                if hasattr(self, 'gsm_rdp_window'):
                    self.gsm_rdp_window.show()
                else:
                    self.gsm_rdp_window = NewWindow(parent + "_" + child)
                    self.gsm_rdp_window.show()
            elif child == "Serving + Neighbors":
                if hasattr(self, 'gsm_sn_window'):
                    self.gsm_sn_window.show()
                else:
                    self.gsm_sn_window = NewWindow(child)
                    self.gsm_sn_window.show()
            elif child == "Current Channel":
                if hasattr(self, 'gsm_cc_window'):
                    self.gsm_cc_window.show()
                else:
                    self.gsm_cc_window = NewWindow(child)
                    self.gsm_cc_window.show()
            elif child == "C/I":
                if hasattr(self, 'gsm_ci_window'):
                    self.gsm_ci_window.show()
                else:
                    self.gsm_ci_window = NewWindow(child)
                    self.gsm_ci_window.show()
            elif child == "GSM Line Chart":
                if hasattr(self, 'gsm_lc_window'):
                    self.gsm_lc_window.show()
                else:
                    self.gsm_lc_window = NewWindow(child)
                    self.gsm_lc_window.show()
            elif child == "Events Counter":
                if hasattr(self, 'gsm_ec_window'):
                    self.gsm_ec_window.show()
                else:
                    self.gsm_ec_window = NewWindow(child)
                    self.gsm_ec_window.show()
        elif parent == "WCDMA":
            if child == "Active + Monitored Sets":
                if hasattr(self, 'wcdma_ams_window'):
                    self.wcdma_ams_window.show()
                else:
                    self.wcdma_ams_window = NewWindow(child)
                    self.wcdma_ams_window.show()
            elif child == "Radio Parameters":
                if hasattr(self, 'wcdma_rp_window'):
                    self.wcdma_rp_window.show()
                else:
                    self.wcdma_rp_window = NewWindow(child)
                    self.wcdma_rp_window.show()
            elif child == "Active Set List":
                if hasattr(self, 'wcdma_asl_window'):
                    self.wcdma_asl_window.show()
                else:
                    self.wcdma_asl_window = NewWindow(child)
                    self.wcdma_asl_window.show()
            elif child == "Monitored Set List":
                if hasattr(self, 'wcdma_msl_window'):
                    self.wcdma_msl_window.show()
                else:
                    self.wcdma_msl_window = NewWindow(child)
                    self.wcdma_msl_window.show()
            elif child == "WCDMA BLER Summary":
                if hasattr(self, 'wcdma_bler_window'):
                    self.wcdma_bler_window.show()
                else:
                    self.wcdma_bler_window = NewWindow(child)
                    self.wcdma_bler_window.show()
            elif child == "WCDMA BLER / Transport Channel":
                if hasattr(self, 'wcdma_bler_window'):
                    self.wcdma_blertc_window.show()
                else:
                    self.wcdma_blertc_window = NewWindow(child)
                    self.wcdma_blertc_window.show()
            elif child == "WCDMA Line Chart":
                if hasattr(self, 'wcdma_lc_window'):
                    self.wcdma_lc_window.show()
                else:
                    self.wcdma_lc_window = NewWindow(child)
                    self.wcdma_lc_window.show()
            elif child == "WCDMA Bearers":
                if hasattr(self, 'wcdma_bearer_window'):
                    self.wcdma_bearer_window.show()
                else:
                    self.wcdma_bearer_window = NewWindow(child)
                    self.wcdma_bearer_window.show()
            elif child == "Active + Monitored Bar":
                if hasattr(self, 'wcdma_amb_window'):
                    self.wcdma_amb_window.show()
                else:
                    self.wcdma_amb_window = NewWindow(child)
                    self.wcdma_amb_window.show()
            elif child == "WCDMA CM GSM Reports":
                if hasattr(self, 'wcdma_report_window'):
                    self.wcdma_report_window.show()
                else:
                    self.wcdma_report_window = NewWindow(child)
                    self.wcdma_report_window.show()
            elif child == "WCDMA CM GSM Cells":
                if hasattr(self, 'wcdma_cells_window'):
                    self.wcdma_cells_window.show()
                else:
                    self.wcdma_cells_window = NewWindow(child)
                    self.wcdma_cells_window.show()
            elif child == "WCDMA Pilot Analyzer":
                if hasattr(self, 'wcdma_analyzer_window'):
                    self.wcdma_analyzer_window.show()
                else:
                    self.wcdma_analyzer_window = NewWindow(child)
                    self.wcdma_analyzer_window.show()
        elif parent == "LTE":
            if child == "Radio Parameters":
                if hasattr(self, 'lte_param_window'):
                    self.lte_param_window.show()
                else:
                    self.lte_param_window = NewWindow(child)
                    self.lte_param_window.show()
            elif child == "Serving + Neighbors":
                if hasattr(self, 'lte_sn_window'):
                    self.lte_sn_window.show()
                else:
                    self.lte_sn_window = NewWindow(child)
                    self.lte_sn_window.show()
            elif child == "PUCCH/PDSCH Parameters":
                if hasattr(self, 'lte_ppparam_window'):
                    self.lte_ppparam_window.show()
                else:
                    self.lte_ppparam_window = NewWindow(child)
                    self.lte_ppparam_window.show()
            elif child == "LTE Line Chart":
                if hasattr(self, 'lte_lc_window'):
                    self.lte_lc_window.show()
                else:
                    self.lte_lc_window = NewWindow(child)
                    self.lte_lc_window.show()
            elif child == "LTE RLC":
                if hasattr(self, 'lte_rlc_window'):
                    self.lte_rlc_window.show()
                else:
                    self.lte_rlc_window = NewWindow(child)
                    self.lte_rlc_window.show()
            elif child == "LTE VoLTE":
                if hasattr(self, 'lte_volte_window'):
                    self.lte_volte_window.show()
                else:
                    self.lte_volte_window = NewWindow(child)
                    self.lte_volte_window.show()
        elif parent == "CDMA/EVDO":
            if child == "Radio Parameters":
                if hasattr(self, 'cdma_rp_window'):
                    self.cdma_rp_window.show()
                else:
                    self.cdma_rp_window = NewWindow(child)
                    self.cdma_rp_window.show()
            elif child == "Serving + Neighbors":
                if hasattr(self, 'cdma_sn_window'):
                    self.cdma_sn_window.show()
                else:
                    self.cdma_sn_window = NewWindow(child)
                    self.cdma_sn_window.show()
            elif child == "EVDO Parameters":
                if hasattr(self, 'cdma_evdo_window'):
                    self.cdma_evdo_window.show()
                else:
                    self.cdma_evdo_window = NewWindow(child)
                    self.cdma_evdo_window.show()
        elif parent == "Data":
            if child == "GSM Data Line Chart":
                print("51")
            elif child == "WCDMA Data Line Chart":
                print("52")
            elif child == "GPRS/EDGE Information":
                print("53")
            elif child == "Web Browser":
                print("54")
            elif child == "HSDPA/HSPA + Statistics":
                print("55")
            elif child == "HSUPA Statistics":
                print("56")
            elif child == "LTE Data Statistics":
                print("57")
            elif child == "LTE Data Line Chart":
                print("58")
            elif child == "Wifi Connected AP":
                print("59")
            elif child == "Wifi Scanned APs":
                print("510")
            elif child == "Wifi Graph":
                print("511")
        elif parent == "Signaling":
            if child == "Events":
                print("1")
            elif child == "Layer 1 Messages":
                print("2")
            elif child == "Layer 3 Messages":
                print("3")
            elif child == "Benchmark":
                print("4")
            elif child == "MM Reg States":
                print("5")
            elif child == "Serving System Info":
                print("6")
            elif child == "Debug Android/Event":
                print("7")
        elif parent == "Positioning":
            if child == "GPS":
                print("1")
            elif child == "Map":
                print("2")
            elif child == "Positioning":
                print("3")
        elif parent == "Customized Window":
            if child == "Status Window":
                print("1")
            elif child == "Message Window":
                print("2")
            elif child == "Line Chart":
                print("3")
        elif parent == "NB-IoT":
            if child == "NB-IoT Radio Parameters Window":
                print("1")

class NewWindow(QDialog):
    def __init__(self, windowName):
        super(NewWindow, self).__init__()
        self.title = windowName
        self.left = 10
        self.top = 10
        self.width = 480
        self.height = 360
        self.setupUi()

    def setupUi(self):
        self.setObjectName(self.title)
        self.setWindowTitle(self.title)
        self.setGeometry(self.left, self.top, self.width, self.height)
        self.raise_()
        self.activateWindow()

class PlotGraph(pg.PlotCurveItem):
    def __init__(self, parent=None):
        super(PlotGraph, self).__init__()
        self.y1 = [2, 4, 8, 10, 12]
        self.y2 = [1, 3, 5, 7, 9]
        self.x = range(0,10)
        self.setupUi(self)

    def setupUi(self, PlotGraph):
        self.graphwindow = pg.GraphicsWindow()


    # def showGraph(self):



