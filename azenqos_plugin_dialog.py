# -*- coding: utf-8 -*-
"""
/***************************************************************************
 AzenqosDialog
                                 A QGIS plugin
 Azenqos Plugin
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2019-03-18
        git sha              : $Format:%H$
        copyright            : (C) 2019 by Metamedia Techonology Co.,Ltd
        email                : gritmanoch@longdo.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

# from PyQt5 import *
# from PyQt5.QtWidgets import *
import sqlite3

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
# FORM_CLASS, _ = uic.loadUiType(os.path.join(os.path.dirname(__file__), 'azenqos_plugin_dialog_base.ui'))
from PyQt5.QtWidgets import QMainWindow
from qgis.PyQt import QtWidgets, QtCore, QtGui
import numpy as np
import pyqtgraph as pg



class AzenqosDialog(QtWidgets.QDialog):
    def __init__(self, parent=None):
        """Constructor."""
        super(AzenqosDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)

    def setupUi(self, AzenqosDialog):
        AzenqosDialog.setObjectName("AzenqosDialog")
        AzenqosDialog.resize(891, 557)
        self.treeWidget = QtWidgets.QTreeWidget(AzenqosDialog)
        self.treeWidget.setGeometry(QtCore.QRect(20, 40, 491, 471))
        self.treeWidget.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.treeWidget.setAllColumnsShowFocus(True)
        self.treeWidget.setObjectName("treeWidget")
        self.treeWidget.itemDoubleClicked.connect(self.loadAllMessages)

        gsm = QtWidgets.QTreeWidgetItem(self.treeWidget, ['GSM'])
        gsmRadioParams = QtWidgets.QTreeWidgetItem(gsm, ['Radio Parameters'])
        gsmServeNeighbor = QtWidgets.QTreeWidgetItem(gsm, ['Serving + Neighbors'])
        gsmCurrentChannel = QtWidgets.QTreeWidgetItem(gsm, ['Current Channel'])
        gsmCI = QtWidgets.QTreeWidgetItem(gsm, ['C/I'])
        gsmLineChart = QtWidgets.QTreeWidgetItem(gsm, ['GSM Line Chart'])
        gsmEventsCounter = QtWidgets.QTreeWidgetItem(gsm, ['Events Counter'])

        wcdma = QtWidgets.QTreeWidgetItem(self.treeWidget, ['WCDMA'])
        wcdmaActiveMonitoredSets = QtWidgets.QTreeWidgetItem(wcdma, ['Active + Monitored Sets'])
        wcdmaRadioParams = QtWidgets.QTreeWidgetItem(wcdma, ['Radio Parameters'])
        wcdmaASL = QtWidgets.QTreeWidgetItem(wcdma, ['Active Set List'])
        wcdmaMonitoredSet = QtWidgets.QTreeWidgetItem(wcdma, ['Monitored Set List'])
        wcdmaSummary = QtWidgets.QTreeWidgetItem(wcdma, ['WCDMA BLER Summary'])
        wcdmaTransportChannel = QtWidgets.QTreeWidgetItem(wcdma, ['WCDMA BLER / Transport Channel'])
        wcdmaLineChart = QtWidgets.QTreeWidgetItem(wcdma, ['WCDMA Line Chart'])
        wcdmaBearers = QtWidgets.QTreeWidgetItem(wcdma, ['WCDMA Bearers'])
        wcdmaPilotPoluting = QtWidgets.QTreeWidgetItem(wcdma, ['WCDMA Pilot Poluting Cells'])
        wcdmaActiveMonitoredBar = QtWidgets.QTreeWidgetItem(wcdma, ['Active + Monitored Bar'])
        wcdmaReports = QtWidgets.QTreeWidgetItem(wcdma, ['WCDMA CM GSM Reports'])
        wcdmaCells = QtWidgets.QTreeWidgetItem(wcdma, ['WCDMA CM GSM Cells'])
        wcdmaPilotAnalyzer = QtWidgets.QTreeWidgetItem(wcdma, ['WCDMA Pilot Analyzer'])

        lte = QtWidgets.QTreeWidgetItem(self.treeWidget, ['LTE'])
        lteRadioParams = QtWidgets.QTreeWidgetItem(lte, ['Radio Parameters'])
        lteServingNeighbors = QtWidgets.QTreeWidgetItem(lte, ['Serving + Neighbors'])
        ltePPParams = QtWidgets.QTreeWidgetItem(lte, ['PUCCH/PDSCH Paramters'])
        lteLineChart = QtWidgets.QTreeWidgetItem(lte, ['LTE Line Chart'])
        lteRlc = QtWidgets.QTreeWidgetItem(lte, ['LTE RLC'])
        lteVo = QtWidgets.QTreeWidgetItem(lte, ['LTE VoLTE'])

        cdmaEvdo = QtWidgets.QTreeWidgetItem(self.treeWidget, ['CDMA/EVDO'])
        cdmaEvdoRadioParams = QtWidgets.QTreeWidgetItem(cdmaEvdo, ['Radio Parameters'])
        cdmaEvdoServingNeighbors = QtWidgets.QTreeWidgetItem(cdmaEvdo, ['Serving + Neighbors'])
        cdmaEvdoParams = QtWidgets.QTreeWidgetItem(cdmaEvdo, ['EVDO Parameters'])

        data = QtWidgets.QTreeWidgetItem(self.treeWidget, ['Data'])
        dataGsmLineChart = QtWidgets.QTreeWidgetItem(data, ['GSM Data Line Chart'])
        dataWcdmaLineChart = QtWidgets.QTreeWidgetItem(data, ['WCDMA Data Line Chart'])
        dataEdgeInfo = QtWidgets.QTreeWidgetItem(data, ['GPRS/EDGE Information'])
        dataWebBrowser = QtWidgets.QTreeWidgetItem(data, ['Web Browser'])
        dataStats = QtWidgets.QTreeWidgetItem(data, ['HSDPA/HSPA + Statistics'])
        dataHsupaStats = QtWidgets.QTreeWidgetItem(data, ['HSUPA Statistics'])
        dataLteStats = QtWidgets.QTreeWidgetItem(data, ['LTE Data Statistics'])
        dataLteLineChart = QtWidgets.QTreeWidgetItem(data, ['LTE Data Line Chart'])
        dataWifiConnectedAp = QtWidgets.QTreeWidgetItem(data, ['Wifi Connected AP'])
        dataWifiScannedAp = QtWidgets.QTreeWidgetItem(data, ['Wifi Scanned APs'])
        dataWifiGraph = QtWidgets.QTreeWidgetItem(data, ['Wifi Graph'])

        signaling = QtWidgets.QTreeWidgetItem(self.treeWidget, ['Signaling'])
        signalingEvents = QtWidgets.QTreeWidgetItem(signaling, ['Events'])
        signalingLayerOne = QtWidgets.QTreeWidgetItem(signaling, ['Layer 1 Messages'])
        signalingLayerThree = QtWidgets.QTreeWidgetItem(signaling, ['Layer 3 Messages'])
        signalingBenchmark = QtWidgets.QTreeWidgetItem(signaling, ['Benchmark'])
        signalingMM = QtWidgets.QTreeWidgetItem(signaling, ['MM Reg States'])
        signalingSystemInfo = QtWidgets.QTreeWidgetItem(signaling, ['Serving System Info'])
        signalingDebug = QtWidgets.QTreeWidgetItem(signaling, ['Debug Android/Event'])

        positioning = QtWidgets.QTreeWidgetItem(self.treeWidget, ['Positioning'])
        positioningGps = QtWidgets.QTreeWidgetItem(positioning, ['GPS'])
        positioningMap = QtWidgets.QTreeWidgetItem(positioning, ['Map'])
        positioningPositioning = QtWidgets.QTreeWidgetItem(positioning, ['Positioning'])

        customizedWindow = QtWidgets.QTreeWidgetItem(self.treeWidget, ['Customized Window'])
        customizedWindowStatus = QtWidgets.QTreeWidgetItem(customizedWindow, ['Status Window'])
        customizedWindowMessage = QtWidgets.QTreeWidgetItem(customizedWindow, ['Message Window'])
        customizedWindowChart = QtWidgets.QTreeWidgetItem(customizedWindow, ['Line Chart'])

        nBIoT = QtWidgets.QTreeWidgetItem(self.treeWidget, ['NB-IoT'])
        nBIoTParams = QtWidgets.QTreeWidgetItem(nBIoT, ['NB-IoT Radio Parameters Window'])

        self.treeWidget.header().setCascadingSectionResizes(True)
        self.treeWidget.header().setHighlightSections(True)
        self.horizontalSlider = QtWidgets.QSlider(AzenqosDialog)
        self.horizontalSlider.setGeometry(QtCore.QRect(700, 50, 151, 22))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.horizontalSlider.sizePolicy().hasHeightForWidth())
        self.horizontalSlider.setSizePolicy(sizePolicy)
        self.horizontalSlider.setBaseSize(QtCore.QSize(500, 0))
        self.horizontalSlider.setPageStep(10)
        self.horizontalSlider.setSliderPosition(0)
        self.horizontalSlider.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider.setObjectName("horizontalSlider")
        self.pushButton = QtWidgets.QPushButton(AzenqosDialog)
        self.pushButton.setGeometry(QtCore.QRect(550, 150, 181, 32))
        self.pushButton.setObjectName("pushButton")
        self.pushButton_2 = QtWidgets.QPushButton(AzenqosDialog)
        self.pushButton_2.setGeometry(QtCore.QRect(550, 190, 181, 32))
        self.pushButton_2.setObjectName("pushButton_2")
        self.timeEdit = QtWidgets.QTimeEdit(AzenqosDialog)
        self.timeEdit.setGeometry(QtCore.QRect(560, 50, 118, 22))
        self.timeEdit.setObjectName("timeEdit")
        self.filenameLabel = QtWidgets.QLabel(AzenqosDialog)
        self.filenameLabel.setGeometry(QtCore.QRect(560, 100, 100, 16))
        self.filenameLabel.setObjectName("filenameLabel")
        self.filename = QtWidgets.QLabel(AzenqosDialog)
        self.filename.setGeometry(QtCore.QRect(670, 100, 180, 16))
        self.filename.setObjectName("filename")
        self.retranslateUi(AzenqosDialog)
        QtCore.QMetaObject.connectSlotsByName(AzenqosDialog)

    def retranslateUi(self, AzenqosDialog):
        _translate = QtCore.QCoreApplication.translate
        AzenqosDialog.setWindowTitle(_translate("AzenqosDialog", "Azenqos"))
        self.treeWidget.headerItem().setText(0, _translate("AzenqosDialog", "Toolbox"))
        __sortingEnabled = self.treeWidget.isSortingEnabled()
        self.treeWidget.setSortingEnabled(False)
        self.treeWidget.setSortingEnabled(__sortingEnabled)
        self.pushButton.setText(_translate("AzenqosDialog", "Import Database"))
        self.pushButton_2.setText(_translate("AzenqosDialog", "Database Filter"))
        self.filenameLabel.setText(_translate("AzenqosDialog", "Database name:"))
        self.filename.setText(_translate("AzenqosDialog", ""))
        self.pushButton.clicked.connect(self.getfiles)

    def getfiles(self):
        fileName, _ = QtWidgets.QFileDialog.getOpenFileName(self, 'Single File', QtCore.QDir.rootPath() , '*.db')
        self.databasePath = fileName
        if fileName != "":
            baseFileName = os.path.basename(str(fileName))
            self.filename.setText(baseFileName)
            conn = self.importDatabase()
            if conn != "":
                QtWidgets.QMessageBox.about(self, 'Connection result', 'Database is Connected')



    def loadAllMessages(self):
        getSelected = self.treeWidget.selectedItems()
        if getSelected:
            baseNode = getSelected[0]
            getChildNode = baseNode.text(0)
            getParentNode = baseNode.parent().text(0)
            self.classifySelectedItems(getParentNode, getChildNode)

    def importDatabase(self):
        try:
            conn = sqlite3.connect(self.databasePath)
            return conn
        except ConnectionError as e:
            print(e)

        return None

    def createNewWindows(self):
        self.plainWindow = QMainWindow()
        self.plainWindow.show()

    def classifySelectedItems(self, parent, child):
        if parent == "GSM":
            if child == "Radio Parameters":
                self.newWindow = NewWindow()
                self.newWindow.show()
                print("11")
            elif child == "Serving + Neighbors":
                print("12")
            elif child == "Current Channel":
                print("13")
            elif child == "Serving + Neighbors":
                print("14")
            elif child == "C/I":
                print("15")
            elif child == "GSM Line Chart":
                print("16")
            elif child == "Events Counter":
                print("17")
        elif parent == "WCDMA":
            if child == "Active + Monitored Sets":
                print("21")
            elif child == "Radio Parameters":
                print("22")
            elif child == "Active Set List":
                print("23")
            elif child == "Monitored Set List":
                print("24")
            elif child == "WCDMA BLER Summary":
                print("25")
            elif child == "WCDMA BLER / Transport Channel":
                print("26")
            elif child == "WCDMA Line Chart":
                print("27")
            elif child == "WCDMA Bearers":
                print("28")
            elif child == "Active + Monitored Bar":
                print("29")
            elif child == "WCDMA CM GSM Reports":
                print("210")
            elif child == "WCDMA CM GSM Cells":
                print("211")
            elif child == "WCDMA Pilot Analyzer":
                print("212")
        elif parent == "LTE":
            if child == "Radio Parameters":
                print("31")
            elif child == "Serving + Neighbors":
                print("32")
            elif child == "PUCCH/PDSCH Paramters":
                print("33")
            elif child == "LTE Line Chart":
                print("34")
            elif child == "LTE RLC":
                print("35")
            elif child == "LTE VoLTE":
                print("36")
        elif parent == "CDMA/EVDO":
            if child == "Radio Parameters":
                print("41")
            elif child == "Serving + Neighbors":
                print("42")
            elif child == "EVDO Parameters":
                print("43")
        elif parent == "Data":
            if child == "GSM Data Line Chart":
                print("51")
            elif child == "WCDMA Data Line Chart":
                print("52")
            elif child == "GPRS/EDGE Information":
                print("53")
            elif child == "Web Browser":
                print("54")
            elif child == "HSDPA/HSPA + Statistics":
                print("55")
            elif child == "HSUPA Statistics":
                print("56")
            elif child == "LTE Data Statistics":
                print("57")
            elif child == "LTE Data Line Chart":
                print("58")
            elif child == "Wifi Connected AP":
                print("59")
            elif child == "Wifi Scanned APs":
                print("510")
            elif child == "WWifi Graph":
                print("511")
        elif parent == "Signaling":
            if child == "Events":
                print("1")
            elif child == "Layer 1 Messages":
                print("2")
            elif child == "Layer 3 Messages":
                print("3")
            elif child == "Benchmark":
                print("4")
            elif child == "MM Reg States":
                print("5")
            elif child == "Serving System Info":
                print("6")
            elif child == "Debug Android/Event":
                print("7")
        elif parent == "Positioning":
            if child == "GPS":
                print("1")
            elif child == "Map":
                print("2")
            elif child == "Positioning":
                print("3")
        elif parent == "Customized Window":
            if child == "Status Window":
                print("1")
            elif child == "Message Window":
                print("2")
            elif child == "Line Chart":
                print("3")
        elif parent == "NB-IoT":
            if child == "NB-IoT Radio Parameters Window":
                print("1")

class NewWindow(QMainWindow):
    def __init__(self, parent=None):
        super(NewWindow, self).__init__(parent)
        self.setupUi(self)

    def setupUi(self, NewWindow):
        NewWindow.setObjectName("NewWindow")
        NewWindow.resize(891, 557)
        NewWindow.setWindowTitle("NewWindow")

class PlotGraph()
